import{_ as i,o as s,c as a,R as e}from"./chunks/framework.EUU6lLMq.js";const u=JSON.parse('{"title":"Профиль приложений","description":"","frontmatter":{},"headers":[],"relativePath":"ru_RU/guide/app-profile.md","filePath":"ru_RU/guide/app-profile.md"}'),t={name:"ru_RU/guide/app-profile.md"},l=e(`<h1 id="профиль-приложении" tabindex="-1">Профиль приложений <a class="header-anchor" href="#профиль-приложении" aria-label="Permalink to &quot;Профиль приложений&quot;">​</a></h1><p>Профиль приложений - это механизм, предоставляемый KernelSU для настройки конфигурации различных приложений.</p><p>Для приложений, получивших права root (т.е. имеющих возможность использовать <code>su</code>), App Profile может также называться Root Profile. Он позволяет настраивать правила <code>uid</code>, <code>gid</code>, <code>groups</code>, <code>capabilities</code> и <code>SELinux</code> команды <code>su</code>, тем самым ограничивая привилегии пользователя root. Например, она может предоставлять сетевые права только приложениям межсетевого экрана, отказывая в праве доступа к файлам, или предоставлять права shell вместо полного root-доступа для приложений freeze: *<em>сохранение власти в рамках принципа наименьших привилегий</em>.</p><p>Для обычных приложений, не имеющих прав root, App Profile может управлять поведением ядра и системы модулей по отношению к этим приложениям. Например, он может определять, следует ли обращать внимание на модификации, возникающие в результате работы модулей. На основе этой конфигурации ядро и система модулей могут принимать решения, например, выполнять операции, аналогичные &quot;скрытию&quot;.</p><h2 id="корневои-профиль" tabindex="-1">Корневой профиль <a class="header-anchor" href="#корневои-профиль" aria-label="Permalink to &quot;Корневой профиль&quot;">​</a></h2><h3 id="uid-gid-и-группы" tabindex="-1">UID, GID и группы <a class="header-anchor" href="#uid-gid-и-группы" aria-label="Permalink to &quot;UID, GID и группы&quot;">​</a></h3><p>В системах Linux существуют два понятия: пользователи и группы. Каждый пользователь имеет идентификатор пользователя (UID), а пользователь может принадлежать к нескольким группам, каждая из которых имеет свой идентификатор группы (GID). Эти идентификаторы используются для идентификации пользователей в системе и определяют, к каким системным ресурсам они могут получить доступ.</p><p>Пользователи с UID, равным 0, называются корневыми пользователями, а группы с GID, равным 0, - корневыми группами. Группа пользователей root, как правило, обладает самыми высокими системными привилегиями.</p><p>В случае системы Android каждое приложение является отдельным пользователем (исключая сценарии с общим UID) с уникальным UID. Например, <code>0</code> представляет пользователя root, <code>1000</code> - <code>system</code>, <code>2000</code> - ADB shell, а UID в диапазоне от 10000 до 19999 - обычные приложения.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Здесь упомянутый UID не совпадает с концепцией нескольких пользователей или рабочих профилей в системе Android. На самом деле рабочие профили реализуются путем разделения диапазона UID. Например, 10000-19999 представляет собой основного пользователя, а 110000-119999 - рабочий профиль. Каждое обычное приложение среди них имеет свой уникальный UID.</p></div><p>Каждое приложение может иметь несколько групп, причем GID представляет собой основную группу, которая обычно совпадает с UID. Другие группы называются дополнительными. Определенные разрешения контролируются через группы, например, разрешения на доступ к сети или доступ к Bluetooth.</p><p>Например, если мы выполним команду <code>id</code> в оболочке ADB, то результат может выглядеть следующим образом:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oriole:/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) gid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) groups</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1004</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1007</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1015</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdcard_rw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1028</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdcard_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1078</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ext_data_rw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1079</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ext_obb_rw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_bt_admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_bt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3006</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_bw_stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3009</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readproc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uhid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3012</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readtracefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u:r:shell:s0</span></span></code></pre></div><p>Здесь UID равен <code>2000</code>, а GID (идентификатор основной группы) также равен <code>2000</code>. Кроме того, он входит в несколько дополнительных групп, таких как <code>inet</code> (указывает на возможность создания сокетов <code>AF_INET</code> и <code>AF_INET6</code>) и <code>sdcard_rw</code> (указывает на права чтения/записи на SD-карту).</p><p>Корневой профиль KernelSU позволяет настраивать UID, GID и группы для корневого процесса после выполнения команды <code>su</code>. Например, в корневом профиле корневого приложения можно установить его UID на <code>2000</code>, что означает, что при использовании <code>su</code> фактические разрешения приложения будут находиться на уровне оболочки ADB. Группа <code>inet</code> может быть удалена, что не позволит команде <code>su</code> получить доступ к сети.</p><div class="tip custom-block"><p class="custom-block-title">Примечание</p><p>Профиль приложений контролирует только разрешения корневого процесса после использования <code>su</code>; он не контролирует разрешения самого приложения. Если приложение запросило разрешение на доступ к сети, оно может получить доступ к сети даже без использования <code>su</code>. Удаление группы <code>inet</code> из <code>su</code> только предотвращает доступ <code>su</code> к сети.</p></div><p>Корневой профиль реализуется в ядре и не зависит от добровольного поведения root-приложений, в отличие от переключения пользователей или групп через <code>su</code>, предоставление прав <code>su</code> полностью зависит от пользователя, а не от разработчика.</p><h3 id="привилегии" tabindex="-1">Привилегии <a class="header-anchor" href="#привилегии" aria-label="Permalink to &quot;Привилегии&quot;">​</a></h3><p>Привилегии - это механизм разделения привилегий в Linux.</p><p>В традиционных реализациях UNIX для проверки прав доступа выделяются две категории процессов: привилегированные процессы (эффективный идентификатор пользователя равен 0 и называется суперпользователем или root) и непривилегированные процессы (эффективный UID которых не равен нулю). Привилегированные процессы обходят все проверки прав ядра, в то время как непривилегированные процессы подвергаются полной проверке прав на основе учетных данных процесса (обычно: эффективный UID, эффективный GID и список дополнительных групп).</p><p>Начиная с версии Linux 2.2, в Linux привилегии, традиционно ассоциируемые с суперпользователем, разделены на отдельные единицы, называемые возможностями, которые могут быть независимо включены и выключены.</p><p>Каждая способность представляет собой одну или несколько привилегий. Например, <code>CAP_DAC_READ_SEARCH</code> представляет собой возможность обхода проверок прав на чтение файлов, а также прав на чтение и выполнение каталогов. Если пользователь с эффективным UID <code>0</code> (пользователь root) не имеет возможности <code>CAP_DAC_READ_SEARCH</code> или более высоких возможностей, это означает, что, хотя он и является пользователем root, он не может читать файлы по своему усмотрению.</p><p>Корневой профиль KernelSU позволяет настраивать возможности корневого процесса после выполнения <code>su</code>, тем самым добиваясь частичного предоставления &quot;прав root&quot;. В отличие от вышеупомянутых UID и GID, некоторые root-приложения после использования <code>su</code> требуют UID, равный <code>0</code>. В таких случаях ограничение возможностей данного root-пользователя с UID <code>0</code> может ограничить их разрешенные операции.</p><div class="tip custom-block"><p class="custom-block-title">Настоятельная рекомендация</p><p>В документе привелегий Linux <a href="https://man7.org/linux/man-pages/man7/capabilities.7.html" target="_blank" rel="noreferrer">официальной документации</a> дается подробное объяснение возможностей, представленных каждой привелегией. Если вы собираетесь настраивать привелегии, настоятельно рекомендуется сначала прочитать этот документ.</p></div><h3 id="selinux" tabindex="-1">SELinux <a class="header-anchor" href="#selinux" aria-label="Permalink to &quot;SELinux&quot;">​</a></h3><p>SELinux - это мощный механизм обязательного контроля доступа (MAC). Он работает по принципу <strong>запрет по умолчанию</strong>: любое действие, не разрешенное в явном виде, запрещается.</p><p>SELinux может работать в двух глобальных режимах:</p><ol><li>Разрешительный режим: События запрета регистрируются, но не выполняются.</li><li>Принудительный режим: События запрета регистрируются и выполняются.</li></ol><div class="warning custom-block"><p class="custom-block-title">Предупреждение</p><p>Современные системы Android в значительной степени опираются на SELinux для обеспечения общей безопасности системы. Настоятельно не рекомендуется использовать пользовательские системы, работающие в &quot;разрешительном режиме&quot;, поскольку это не дает существенных преимуществ перед полностью открытой системой.</p></div><p>Объяснение полной концепции SELinux является сложным и выходит за рамки данного документа. Рекомендуется сначала разобраться в его работе с помощью следующих ресурсов:</p><ol><li><a href="https://en.wikipedia.org/wiki/Security-Enhanced_Linux" target="_blank" rel="noreferrer">Wikipedia</a></li><li><a href="https://www.redhat.com/en/topics/linux/what-is-selinux" target="_blank" rel="noreferrer">Red Hat: Что такое SELinux?</a></li><li><a href="https://wiki.archlinux.org/title/SELinux" target="_blank" rel="noreferrer">ArchLinux: SELinux</a></li></ol><p>Корневой профиль KernelSU позволяет настраивать SELinux-контекст корневого процесса после выполнения команды <code>su</code>. Для этого контекста могут быть заданы специальные правила управления доступом, позволяющие осуществлять тонкий контроль над правами root.</p><p>В типичных сценариях, когда приложение выполняет команду <code>su</code>, оно переключает процесс на домен SELinux с <strong>неограниченным доступом</strong>, например <code>u:r:su:s0</code>. С помощью профиля Root Profile этот домен может быть переключен на пользовательский домен, например <code>u:r:app1:s0</code>, и для него может быть определен ряд правил:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enforce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeattribute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mlstrustedsubject</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span></span></code></pre></div><p>Обратите внимание, что правило <code>allow app1 * * *</code> используется только в демонстрационных целях. На практике это правило не должно широко использоваться, поскольку оно мало чем отличается от разрешительного режима.</p><h3 id="эскалация" tabindex="-1">Эскалация <a class="header-anchor" href="#эскалация" aria-label="Permalink to &quot;Эскалация&quot;">​</a></h3><p>При неправильной настройке корневого профиля может возникнуть сценарий эскалации: ограничения, накладываемые корневым профилем, могут непреднамеренно не сработать.</p><p>Например, если предоставить права root пользователю ADB shell (что является обычным случаем), а затем предоставить права root обычному приложению, но настроить его профиль root с UID 2000 (это UID пользователя ADB shell), то приложение может получить полный доступ root, выполнив команду <code>su</code> дважды:</p><ol><li>При первом выполнении команды <code>su</code> будет применен профиль App Profile и произойдет переход на UID <code>2000</code> (adb shell) вместо <code>0</code> (root).</li><li>При втором выполнении команды <code>su</code>, поскольку UID равен <code>2000</code>, а в конфигурации вы предоставили доступ root к UID <code>2000</code> (adb shell), приложение получит полные привилегии root.</li></ol><div class="warning custom-block"><p class="custom-block-title">Примечание</p><p>Такое поведение вполне ожидаемо и не является ошибкой. Поэтому мы рекомендуем следующее:</p><p>Если вам действительно необходимо предоставить права root в ADB (например, как разработчику), не рекомендуется изменять UID на <code>2000</code> при настройке корневого профиля. Лучше использовать <code>1000</code> (система).</p></div><h2 id="некорневои-профиль" tabindex="-1">Некорневой профиль <a class="header-anchor" href="#некорневои-профиль" aria-label="Permalink to &quot;Некорневой профиль&quot;">​</a></h2><h3 id="размонтирование-модулеи" tabindex="-1">Размонтирование модулей <a class="header-anchor" href="#размонтирование-модулеи" aria-label="Permalink to &quot;Размонтирование модулей&quot;">​</a></h3><p>KernelSU предоставляет бессистемный механизм модификации системных разделов, реализуемый через монтирование overlayfs. Однако некоторые приложения могут быть чувствительны к такому поведению. Поэтому мы можем выгрузить модули, смонтированные в этих приложениях, установив опцию &quot;размонтирование модулей&quot;.</p><p>Кроме того, в интерфейсе настроек менеджера KernelSU имеется переключатель &quot;размонтирование модулей по умолчанию&quot;. По умолчанию этот переключатель <strong>включен</strong>, что означает, что KernelSU или некоторые модули будут выгружать модули для данного приложения, если не будут применены дополнительные настройки. Если вам не нравится эта настройка или если она влияет на определенные приложения, у вас есть следующие возможности:</p><ol><li>Оставить переключатель &quot;размонтирование модулей по умолчанию&quot; и индивидуально отключить опцию &quot;размонтирование модулей&quot; в профиле приложений для приложений, требующих загрузки модулей (действует как &quot;белый список&quot;).</li><li>Отключить переключатель &quot;размонтирование модулей по умолчанию&quot; и индивидуально включить опцию &quot;размонтирование модулей&quot; в App Profile для приложений, требующих выгрузки модулей (действует как &quot;черный список&quot;).</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>В устройствах, использующих ядро версии 5.10 и выше, выгрузку модулей выполняет само ядро. Однако для устройств с ядром версии ниже 5.10 этот переключатель является лишь опцией конфигурации, и KernelSU сам по себе не предпринимает никаких действий. Некоторые модули, например, Zygisksu, могут использовать этот переключатель для определения необходимости выгрузки модулей.</p></div>`,46),h=[l];function p(n,o,k,d,r,c){return s(),a("div",null,h)}const g=i(t,[["render",p]]);export{u as __pageData,g as default};
