import{_ as i,o as s,c as a,R as e}from"./chunks/framework.EUU6lLMq.js";const g=JSON.parse('{"title":"App Profile","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/guide/app-profile.md","filePath":"zh_CN/guide/app-profile.md"}'),t={name:"zh_CN/guide/app-profile.md"},p=e(`<h1 id="app-profile" tabindex="-1">App Profile <a class="header-anchor" href="#app-profile" aria-label="Permalink to &quot;App Profile&quot;">​</a></h1><p>App Profile 是 KernelSU 提供的一种针对各种应用自定义其使用配置的机制。</p><p>对授予了 root 权限（也即可以使用 <code>su</code>）的应用来说，App Profile 也可以称之为 Root Profile，它可以自定义 <code>su</code> 的 <code>uid</code>, <code>gid</code>, <code>groups</code>, <code>capabilities</code> 以及 <code>SELinux</code> 规则，从而限制 root 用户的权限；比如可以针对防火墙应用仅授予网络权限，而不授予文件访问权限，针对冻结类应用仅授予 shell 权限而不是直接给 root；通过最小化权限原则<strong>把权力关进笼子里</strong>。</p><p>对于没有被授予 root 权限的普通应用，App Profile 可以控制内核以及模块系统对此应用的行为；比如是否需要针对此应用卸载模块造成的修改等。内核和模块系统可以通过此配置决定是否要做一些类似“隐藏痕迹”类的操作。</p><h2 id="root-profile" tabindex="-1">Root Profile <a class="header-anchor" href="#root-profile" aria-label="Permalink to &quot;Root Profile&quot;">​</a></h2><h3 id="uid、gid-和-groups" tabindex="-1">UID、GID 和 groups <a class="header-anchor" href="#uid、gid-和-groups" aria-label="Permalink to &quot;UID、GID 和 groups&quot;">​</a></h3><p>Linux 系统中有用户和组两个概念。每个用户都有一个用户 ID(UID)，一个用户可以属于多个组，每个组也有组 ID(GID)。该 ID 用于识别系统的用户并确定用户可以访问哪些系统资源。</p><p>UID 为 0 的用户被称之为 root 用户，GID 为 0 的组被称之为 root 组；root 用户组通常拥有系统的最高权限。</p><p>对于 Android 系统来说，每一个 App 都是一个单独的用户（不考虑 share uid 的情况），拥有一个唯一的 UID。比如 <code>0</code> 是 root 用户，<code>1000</code> 是 <code>system</code>，<code>2000</code> 是 ADB shell，10000-19999 的是普通用户。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>此处的 UID 跟 Android 系统的多用户，或者说工作资料（Work Profile），不是一个概念。工作资料实际上是对 UID 进行分片实现的，比如 10000-19999 是主用户，110000-119999 是工作资料；他们中的任何一个普通应用都拥有自己独有的 UID。</p></div><p>每一个 App 可以有若干个组，GID 使其主要的组，通常与 UID 一致；其他的组被称之为补充组(groups)。某些权限是通过组控制的，比如网络访问，蓝牙等。</p><p>例如，如果我们在 ADB shell 中执行 <code>id</code> 命令，会得到如下输出：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oriole:/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) gid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) groups</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1004</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1007</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1015</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdcard_rw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1028</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdcard_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1078</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ext_data_rw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,1079</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ext_obb_rw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_bt_admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_bt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3006</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_bw_stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3009</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readproc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uhid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,3012</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readtracefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u:r:shell:s0</span></span></code></pre></div><p>其中，UID 为 <code>2000</code>，GID 也即主要组 ID 也为 <code>2000</code>；除此之外它还在很多补充组里面，例如 <code>inet</code> 组代表可以创建 <code>AF_INET</code> 和 <code>AF_INET6</code> 的 socket（访问网络），<code>sdcard_rw</code> 代表可以读写 sdcard 等。</p><p>KernelSU 的 Root Profile 可以自定义执行 <code>su</code> 后 root 进程的 UID, GID 和 groups。例如，你可以设置某个 root 应用的 Root Profile 其 UID 为 <code>2000</code>，这意味着此应用在使用 <code>su</code> 的时候，它的实际权限是 ADB Shell 级别；你可以去掉 groups 中的 <code>inet</code>，这样这个 <code>su</code> 就无法访问网络。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>App Profile 仅仅是控制 root 应用使用 <code>su</code> 后的权限，它并非控制 App 本身的权限！如果 App 本身申请了网络访问权限，那么它即使不使用 <code>su</code> 也可以访问网络；为 <code>su</code> 去掉 <code>inet</code> 组仅仅是让 <code>su</code> 无法访问网络。</p></div><p>与应用通过 <code>su</code> 主动切换用户或者组不同，Root Profile 是在内核中强制实施的，不依赖 root 应用的自觉行为，<code>su</code> 权限的授予完全取决于用户而非开发者。</p><h3 id="capabilities" tabindex="-1">Capabilities <a class="header-anchor" href="#capabilities" aria-label="Permalink to &quot;Capabilities&quot;">​</a></h3><p>Capabilities 是 Linux 的一种分权机制。</p><p>传统的 UNIX 系统为了执行权限检查，将进程分为两类：特权进程（其有效用户 ID 为 0，称为超级用户或 root）和非特权进程（其有效 UID 为非零）。特权进程会绕过所有内核权限检查，而非特权进程则根据其凭据（通常是有效UID、有效GID和补充组列表）进行完整的权限检查。</p><p>从 Linux 2.2开始，Linux 将传统上与超级用户关联的特权分解为独立的单元，称为 Capabilities（有的也翻译为“权能”），它们可以独立启用和禁用。</p><p>每一个 Capability 代表一个或者一类权限。比如 <code>CAP_DAC_READ_SEARCH</code> 就代表是否有能力绕过文件读取权限检查和目录读取和执行权限检查。如果一个有效 UID 为 <code>0</code> 的用户（root 用户）没有 <code>CAP_DAC_READ_SEARCH</code> 或者更高 Capalities，这意味着即使它是 root 也不能随意读取文件。</p><p>KernelSU 的 Root Profile 可以自定义执行 <code>su</code> 后 root 进程的 Capabilities，从而实现只授予“部分 root 权限”。与上面介绍的 UID, GID 不同，某些 root 应用就是需要 <code>su</code> 后 UID 是 <code>0</code>，此时我们可以通过限制这个 UID 为 <code>0</code> 的 root 用户的 Capabilities，就可以限制它能够执行的操作。</p><div class="tip custom-block"><p class="custom-block-title">强烈建议</p><p>Linux 系统关于 Capability 的 <a href="https://man7.org/linux/man-pages/man7/capabilities.7.html" target="_blank" rel="noreferrer">官方文档</a>，解释了每一项 Capability 所代表的能力，写的非常详细，如果你想要自定义 Capabilities，请务必先阅读此文档。</p></div><h3 id="selinux" tabindex="-1">SELinux <a class="header-anchor" href="#selinux" aria-label="Permalink to &quot;SELinux&quot;">​</a></h3><p>SELinux 是一种强大的强制性权限访问控制（MAC）机制。它按照<strong>默认拒绝</strong>的原则运行：任何未经明确允许的行为都会被拒绝。</p><p>SELinux 可按两种全局模式运行：</p><ol><li>宽容模式：权限拒绝事件会被记录下来，但不会被强制执行。</li><li>强制模式：权限拒绝事件会被记录下来<strong>并</strong>强制执行。</li></ol><div class="warning custom-block"><p class="custom-block-title">警告</p><p>现代的 Android 系统极度依赖 SELinux 来保障整个系统的安全性，我们强烈建议您不要使用任何以“宽容模式”运行的自定义系统，因为那样与裸奔没什么区别。</p></div><p>SELinux 的完整概念比较复杂，我们这里不打算讲解它的具体工作方式，建议你先通过以下资料来了解其工作原理：</p><ol><li><a href="https://en.wikipedia.org/wiki/Security-Enhanced_Linux" target="_blank" rel="noreferrer">wikipedia</a></li><li><a href="https://www.redhat.com/en/topics/linux/what-is-selinux" target="_blank" rel="noreferrer">Redhat: what-is-selinux</a></li><li><a href="https://wiki.archlinux.org/title/SELinux" target="_blank" rel="noreferrer">ArchLinux: SELinux</a></li></ol><p>KernelSU 的 Root Profile 可以自定义执行 <code>su</code> 后 root 进程的 SELinux context，并且可以针对这个 context 设置特定的访问控制规则，从而更加精细化地控制 root 权限。</p><p>通常情况下，应用执行 <code>su</code> 后，会将进程切换到一个 <strong>不受任何限制</strong> 的 SELinux 域，比如 <code>u:r:su:s0</code>，通过 Root Profile，我们可以将它切换到一个自定义的域，比如 <code>u:r:app1:s0</code>，然后为这个域制定一系列规则：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enforce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeattribute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mlstrustedsubject</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span></span></code></pre></div><p>注意：此处的 <code>allow app1 * * *</code> 仅仅作为演示方便而使用，实际过程中不应使用这个规则，因为它跟 permissive 区别不大。</p><h3 id="逃逸" tabindex="-1">逃逸 <a class="header-anchor" href="#逃逸" aria-label="Permalink to &quot;逃逸&quot;">​</a></h3><p>如果 Root Profile 的配置不合理，那么可能会发生逃逸的情况：Root Profile 的限制会意外失效。</p><p>比如，如果你为 ADB shell 用户设置允许 root 权限（这是相当常见的情况）；然后你给某个普通应用允许 root 权限，但是配置它的 root profile 中的 UID 为 2000（ADB shell 用户的 UID）；那么此时，这个 App 可以通过执行两次 <code>su</code> 来获得完整的 root 权限：</p><ol><li>第一次执行 <code>su</code>，由于 App Profile 强制生效，会正常切换到 UID 为 <code>2000(adb shell)</code> 而非 <code>0(root)</code>。</li><li>第二次执行 <code>su</code>，由于此时它 UID 是 <code>2000</code>，而你给 <code>2000(adb shell)</code> 配置了允许 root，它会获得完整的 root 权限！</li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这是完全符合预期的行为，并非 BUG！因此我们建议：</p><p>如果你的确需要给 adb 授予 root 权限（比如你是开发者），那么不建议你在配置 Root Profile 的时候将 UID 改成 <code>2000</code>，用 <code>1000(system)</code> 会更好。</p></div><h2 id="non-root-profile" tabindex="-1">Non Root Profile <a class="header-anchor" href="#non-root-profile" aria-label="Permalink to &quot;Non Root Profile&quot;">​</a></h2><h3 id="卸载模块" tabindex="-1">卸载模块 <a class="header-anchor" href="#卸载模块" aria-label="Permalink to &quot;卸载模块&quot;">​</a></h3><p>KernelSU 提供了一种 systemless 的方式来修改系统分区，这是通过挂载 overlayfs 来实现的。但有些情况下，App 可能会对这种行为比较敏感；因此，我们可以通过设置“卸载模块”来卸载挂载在这些 App 上的模块。</p><p>另外，KernelSU 管理器的设置界面还提供了一个“默认卸载模块”的开关，这个开关默认情况下是<strong>开启</strong>的，这意味着<strong>如果不对 App 做额外的设置</strong>，默认情况下 KernelSU 或者某些模块会对此 App 执行卸载操作。当然，如果你不喜欢这个设置或者这个设置会影响某些 App，可以有如下选择：</p><ol><li>保持“默认卸载模块”的开关，然后针对不需要“卸载模块”的 App 进行单独的设置，在 App Profile 中关闭“卸载模块”；（相当于“白名单“）。</li><li>关闭“默认卸载模块”的开关，然后针对需要“卸载模块”的 App 进行单独的设置，在 App Profile 中开启“卸载模块”；（相当于“黑名单“）。</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>KernelSU 在 5.10 及以上内核上，内核会执行“卸载模块”的操作；但在 5.10 以下的设备上，这个开关仅仅是一个“配置项”，KernelSU 本身不会做任何动作，一些模块（如 Zygisksu 会通过这个模块决定是否需要卸载）</p></div>`,46),l=[p];function o(h,n,r,k,d,c){return s(),a("div",null,l)}const F=i(t,[["render",o]]);export{g as __pageData,F as default};
