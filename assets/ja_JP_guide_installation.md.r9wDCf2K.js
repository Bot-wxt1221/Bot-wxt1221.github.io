import{_ as e,o,c as a,R as i}from"./chunks/framework.EUU6lLMq.js";const m=JSON.parse('{"title":"インストール","description":"","frontmatter":{},"headers":[],"relativePath":"ja_JP/guide/installation.md","filePath":"ja_JP/guide/installation.md"}'),l={name:"ja_JP/guide/installation.md"},t=i(`<h1 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-label="Permalink to &quot;インストール&quot;">​</a></h1><h2 id="デバイスが対応しているか確認する" tabindex="-1">デバイスが対応しているか確認する <a class="header-anchor" href="#デバイスが対応しているか確認する" aria-label="Permalink to &quot;デバイスが対応しているか確認する&quot;">​</a></h2><p><a href="https://github.com/tiann/KernelSU/releases" target="_blank" rel="noreferrer">GitHub Releases</a> から KernelSU Manager アプリをダウンロードし、お使いのデバイスにインストールしてください。</p><ul><li>アプリが「非対応」と表示した場合は、<strong>自分でカーネルをコンパイルする必要がある</strong>という意味です。KernelSU は書き込むためのブートイメージを提供しません。</li><li>アプリが「未インストール」と表示した場合、お使いのデバイスは KernelSU に対応しています。</li></ul><div class="info custom-block"><p class="custom-block-title">ヒント</p><p>非対応と表示されているデバイスについては、<a href="./unofficially-support-devices.html">非公式の対応デバイス</a>であればご自身でカーネルをビルドできます。</p></div><h2 id="純正の-boot-img-をバックアップ" tabindex="-1">純正の boot.img をバックアップ <a class="header-anchor" href="#純正の-boot-img-をバックアップ" aria-label="Permalink to &quot;純正の boot.img をバックアップ&quot;">​</a></h2><p>書き込む前に、まず純正の boot.img をバックアップする必要があります。ブートループが発生した場合は、fastboot を使用して純正のブートイメージを書き込むことでいつでもシステムを復旧できます。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>書き込みによりデータ損失を引き起こす可能性があります。次のステップに進む前に、このステップを必ず行うようにしてください！また、可能であればすべてのデータをバックアップしてください。</p></div><h2 id="必要な知識" tabindex="-1">必要な知識 <a class="header-anchor" href="#必要な知識" aria-label="Permalink to &quot;必要な知識&quot;">​</a></h2><h3 id="adb-と-fastboot" tabindex="-1">ADB と fastboot <a class="header-anchor" href="#adb-と-fastboot" aria-label="Permalink to &quot;ADB と fastboot&quot;">​</a></h3><p>このチュートリアルでは、デフォルトで ADB と fastboot のツールを使用します。ご存じない方は、まず検索エンジンを使って勉強されることをおすすめします。</p><h3 id="kmi" tabindex="-1">KMI <a class="header-anchor" href="#kmi" aria-label="Permalink to &quot;KMI&quot;">​</a></h3><p>同じ Kernel Module Interface (KMI) のカーネルバージョンは<strong>互換性があります</strong>。これが GKI の「汎用」という意味です。逆に言えば KMI が異なればカーネルには互換性がなく、お使いのデバイスと異なる KMI のカーネルイメージを書き込むと、ブートループが発生する場合があります。</p><p>具体的には GKI デバイスの場合、カーネルバージョンの形式は以下のようになります：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>KernelRelease :=</span></span>
<span class="line"><span>Version.PatchLevel.SubLevel-AndroidRelease-KmiGeneration-suffix</span></span>
<span class="line"><span>w      .x         .y       -zzz           -k            -something</span></span></code></pre></div><p><code>w.x-zzz-k</code> は KMI のバージョンです。例えば、デバイスのカーネルバージョンが <code>5.10.101-android12-9-g30979850fc20</code> である場合、その KMIは <code>5.10-android12-9</code> であり、理論的には他の KMI カーネルでも正常に起動できます。</p><div class="tip custom-block"><p class="custom-block-title">ヒント</p><p>カーネルバージョンの SubLevel は、KMI の一部ではないことに注意してください。<code>5.10.101-android12-9-g30979850fc20</code> は <code>5.10.137-android12-9-g30979850fc20</code> と同じ KMI を持っているということになります。</p></div><h3 id="kernel-バージョンと-android-バージョンの違い" tabindex="-1">Kernel バージョンと Android バージョンの違い <a class="header-anchor" href="#kernel-バージョンと-android-バージョンの違い" aria-label="Permalink to &quot;Kernel バージョンと Android バージョンの違い&quot;">​</a></h3><p>注意： <strong>カーネルバージョンと Android バージョンは必ずしも同じではありません</strong>。</p><p>カーネルのバージョンは「android12-5.10.101」なのに、Android システムのバージョンは「Android 13」などとなっている場合、驚かないでください。Linux カーネルのバージョン番号は、必ずしも<strong>デバイスの出荷時</strong>にプリインストールされている Android システムのバージョンと一致していません。Android システムが後でアップグレードされた場合、一般的にはカーネルのバージョンは変更されません。書き込む際は、<strong>必ずカーネルバージョンを参照してください</strong>!!!</p><h2 id="インストール方法" tabindex="-1">インストール方法 <a class="header-anchor" href="#インストール方法" aria-label="Permalink to &quot;インストール方法&quot;">​</a></h2><p>KernelSU のインストール方法はいくつかあり、それぞれ適したシーンが異なりますので、必要に応じて選択してください。</p><ol><li>カスタムリカバリー（TWRPなど）でインストールする</li><li>Franco Kernel Manager などのカーネル管理アプリでインストールする</li><li>KernelSU が提供する boot.img を使用し、fastboot でインストールする</li><li>boot.img を手動でパッチしてインストールする</li></ol><h2 id="カスタムリカバリーでインストール" tabindex="-1">カスタムリカバリーでインストール <a class="header-anchor" href="#カスタムリカバリーでインストール" aria-label="Permalink to &quot;カスタムリカバリーでインストール&quot;">​</a></h2><p>前提条件：デバイスに TWRP などのカスタムリカバリーがあること。ない場合、または公式リカバリーしかない場合は他の方法を使用してください。</p><p>手順:</p><ol><li>KernelSUの<a href="https://github.com/tiann/KernelSU/releases" target="_blank" rel="noreferrer">リリースページ</a>から、お使いのデバイスのバージョンにあった AnyKernel3 で始まる ZIP パッケージをダウンロードします。例えば、デバイスのカーネルのバージョンが<code>android12-5.10. 66</code>の場合、AnyKernel3-android12-5.10.66_yyyy-MM.zip<code>（yyyy</code>は年、<code>MM</code>は月）のファイルをダウンロードします。</li><li>デバイスを TWRP へ再起動します。</li><li>adb を使用して AnyKernel3-*.zip をデバイスの /sdcard に入れ、TWRP GUI でインストールを選択します。または直接<code>adb sideload AnyKernel-*.zip</code> でインストールできます。</li></ol><p>この方法は TWRP を使用できるならどのようなインストール（初期インストールやその後のアップグレード）にも適しています。</p><h2 id="カーネル管理アプリでインストール" tabindex="-1">カーネル管理アプリでインストール <a class="header-anchor" href="#カーネル管理アプリでインストール" aria-label="Permalink to &quot;カーネル管理アプリでインストール&quot;">​</a></h2><p>前提条件：お使いのデバイスが root 化されている必要があります。例えば、Magisk をインストールして root を取得した場合、または古いバージョンの KernelSU をインストールしており、別のバージョンの KernelSU にアップグレードする必要がある場合などです。お使いのデバイスが root 化されていない場合、他の方法をお試しください。</p><p>手順:</p><ol><li>AnyKernel3 ZIP をダウンロードします。ダウンロード方法は、「カスタムリカバリーでインストール」を参照してください。</li><li>カーネル管理アプリを開き、AnyKernel3 の ZIP をインストールします。</li></ol><p>カーネル管理アプリは以下のようなものが人気です：</p><ol><li><a href="https://github.com/capntrips/KernelFlasher/releases" target="_blank" rel="noreferrer">Kernel Flasher</a></li><li><a href="https://play.google.com/store/apps/details?id=com.franco.kernel" target="_blank" rel="noreferrer">Franco Kernel Manager</a></li><li><a href="https://play.google.com/store/apps/details?id=flar2.exkernelmanager" target="_blank" rel="noreferrer">Ex Kernel Manager</a></li></ol><p>この方法は KernelSU をアップグレードするときに便利で、パソコンがなくてもできます。（まずはバックアップしてください！）</p><h2 id="kernelsu-が提供する-boot-img-を使用してインストール" tabindex="-1">KernelSU が提供する boot.img を使用してインストール <a class="header-anchor" href="#kernelsu-が提供する-boot-img-を使用してインストール" aria-label="Permalink to &quot;KernelSU が提供する boot.img を使用してインストール&quot;">​</a></h2><p>この方法は TWRP や root 権限を必要としないので、KernelSU を初めてインストールする場合に適しています。</p><h3 id="正しい-boot-img-を見つける" tabindex="-1">正しい boot.img を見つける <a class="header-anchor" href="#正しい-boot-img-を見つける" aria-label="Permalink to &quot;正しい boot.img を見つける&quot;">​</a></h3><p>KernelSU では、GKI デバイス用の汎用 boot.img を提供しています。デバイスの boot パーティションに boot.img をフラッシュする必要があります。</p><p>boot.img は、<a href="https://github.com/tiann/KernelSU/releases" target="_blank" rel="noreferrer">GitHub Release</a> からダウンロードできます。例えば、あなたのデバイスがカーネル <code>android12-5.10.101</code> の場合、<code>android-5.10.101_yyyy-MM.boot-&lt;format&gt;.img</code>をダウンロードする必要があります。（KMI を同じにしてください！）。</p><p><code>&lt;format&gt;</code>は純正 boot.img のカーネル圧縮形式を指します。純正の boot.img のカーネル圧縮形式を確認してください。間違った圧縮形式を使うと、ブートループするかもしれません。</p><div class="info custom-block"><p class="custom-block-title">情報</p><ol><li>magiskboot を使えば、元のブートの圧縮形式を知ることができます。もちろん、あなたのデバイスと同じモデルを持つ、より経験豊富な他の人にも聞くこともできます。また、カーネルの圧縮形式は通常変更されないので、ある圧縮形式でうまく起動した場合、後でその形式を試すことも可能です。</li><li>Xiaomi デバイスでは通常 <code>gz</code> か<strong>無圧縮</strong>が使われます。</li><li>Pixel デバイスでは以下の手順に従ってください。</li></ol></div><h3 id="boot-img-をデバイスに書き込む" tabindex="-1">boot.img をデバイスに書き込む <a class="header-anchor" href="#boot-img-をデバイスに書き込む" aria-label="Permalink to &quot;boot.img をデバイスに書き込む&quot;">​</a></h3><p><code>adb</code> でデバイスを接続し、<code>adb reboot bootloader</code> で fastboot モードにし、このコマンドで KernelSU を書き込んでください：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fastboot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boot.img</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">情報</p><p>デバイスが <code>fastboot boot</code> をサポートしている場合、まず <code>fastboot boot.img</code> を使えば書き込みせずにシステムを起動できます。予期せぬことが起こった場合は、もう一度再起動して起動してください。</p></div><h3 id="再起動" tabindex="-1">再起動 <a class="header-anchor" href="#再起動" aria-label="Permalink to &quot;再起動&quot;">​</a></h3><p>書き込みが完了したら、デバイスを再起動します：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fastboot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reboot</span></span></code></pre></div><h2 id="boot-img-を手動でパッチ" tabindex="-1">boot.img を手動でパッチ <a class="header-anchor" href="#boot-img-を手動でパッチ" aria-label="Permalink to &quot;boot.img を手動でパッチ&quot;">​</a></h2><p>デバイスによっては、boot.img のフォーマットが <code>lz4</code> でない、<code>gz</code> である、無圧縮であるなど、あまり一般的でないことがあります。最も典型的なのは Pixel で、boot.img フォーマットは <code>lz4_legacy</code> 圧縮、RAM ディスクは <code>gz</code> か <code>lz4_legacy</code> 圧縮です。この時、KernelSU が提供した boot.img を直接書き込むとデバイスが起動できなくなる場合があります。その場合は手動で boot.img に対してパッチしてください。</p><p>パッチ方式は一般的に2種類あります：</p><ol><li><a href="https://forum.xda-developers.com/t/tool-android-image-kitchen-unpack-repack-kernel-ramdisk-win-android-linux-mac.2073775/" target="_blank" rel="noreferrer">Android-Image-Kitchen</a></li><li><a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noreferrer">magiskboot</a></li></ol><p>このうち、Android-Image-Kitchen は PC での操作に適しており、magiskboot はデバイスとの連携が必要です。</p><h3 id="準備" tabindex="-1">準備 <a class="header-anchor" href="#準備" aria-label="Permalink to &quot;準備&quot;">​</a></h3><ol><li>お使いのデバイスの純正 boot.img を入手します。デバイスメーカーから入手できます。<a href="https://github.com/ssut/payload-dumper-go" target="_blank" rel="noreferrer">payload-dumper-go</a>が必要かもしれません。</li><li>お使いのデバイスの KMI バージョンに合った、KernelSU が提供する AnyKernel3 の ZIP ファイルをダウンロードします（<em>カスタムリカバリーでインストール</em>を参照してください）。</li><li>AnyKernel3 パッケージを展開し、KernelSU のカーネルファイルである <code>Image</code> ファイルを取得します。</li></ol><h3 id="android-image-kitchen-を使う" tabindex="-1">Android-Image-Kitchen を使う <a class="header-anchor" href="#android-image-kitchen-を使う" aria-label="Permalink to &quot;Android-Image-Kitchen を使う&quot;">​</a></h3><ol><li>Android-Image-Kitchen を PC にダウンロードします。</li><li>純正 boot.img を Android-Image-Kitchen のルートフォルダに入れます。</li><li>Android-Image-Kitchen のルートディレクトリで <code>./unpackimg.sh boot.img</code> を実行して、boot.imgを展開します。</li><li><code>split_img</code> ディレクトリの <code>boot.img-kernel</code> を AnyKernel3 から展開した <code>Image</code> に置き換えます（boot.img-kernelに名前が変わっていることに注意してください）。</li><li>Android-Image-Kitchen のルートディレクトリで <code>./repackimg.sh</code> を実行すると、 <code>image-new.img</code> というファイルが生成されます。</li></ol><h3 id="magiskboot-を使う" tabindex="-1">magiskboot を使う <a class="header-anchor" href="#magiskboot-を使う" aria-label="Permalink to &quot;magiskboot を使う&quot;">​</a></h3><ol><li>最新の Magisk を<a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noreferrer">リリースページ</a>からダウンロードしてください。</li><li><code>Magisk-*(version).apk</code> を <code>Magisk-*.zip</code> に名前を変更して展開してください。</li><li><code>Magisk-*/lib/arm64-v8a/libmagiskboot.so</code>を adb でデバイスに転送します：<code>adb push Magisk-*/lib/arm64-v8a/libmagiskboot.so /data/local/tmp/magiskboot</code></li><li>純正 boot.img と AnyKernel3 の中の Image をデバイスに転送します。</li><li>adb shell に入り、<code>cd /data/local/tmp/</code> し、<code>chmod +x magiskboot</code> を実行します。</li><li>adb shell に入り、<code>cd /data/local/tmp/</code> し、<code>./magiskboot unpack boot.img</code> を実行して <code>boot.img</code> を抽出します。<code>kernel</code> ファイルが純正カーネルです。</li><li><code>kernel</code> を <code>Image</code> で置き換えます: <code>mv -f Image kernel</code></li><li><code>./magiskboot repack boot.img</code> を実行してブートイメージをリパックします。出来上がった <code>new-boot.img</code> を fastboot でデバイスに書き込んでください。</li></ol><h2 id="その他の方法" tabindex="-1">その他の方法 <a class="header-anchor" href="#その他の方法" aria-label="Permalink to &quot;その他の方法&quot;">​</a></h2><p>実はこれらのインストール方法はすべて、<strong>元のカーネルを KernelSU が提供するカーネルに置き換える</strong>という主旨でしかなく、これが実現できれば他の方法でもインストール可能です：</p><ol><li>まず Magisk をインストールし、Magisk を通じて root 権限を取得し、カーネル管理アプリで KernelSU の AnyKernel ZIPをインストールする</li><li>PC 上で何らかの書き込みツールを使用し、KernelSU が提供するカーネルを書き込む</li></ol>`,63),r=[t];function n(s,d,c,h,p,b){return o(),a("div",null,r)}const k=e(l,[["render",n]]);export{m as __pageData,k as default};
