{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/Hingle/source/static/hingle.css","path":"static/hingle.css","modified":0,"renderable":1},{"_id":"themes/Hingle/source/static/hingle.js","path":"static/hingle.js","modified":0,"renderable":1},{"_id":"themes/Hingle/source/static/kico.css","path":"static/kico.css","modified":0,"renderable":1},{"_id":"themes/Hingle/source/static/kico.js","path":"static/kico.js","modified":0,"renderable":1},{"_id":"themes/Hingle/source/static/img/icon.png","path":"static/img/icon.png","modified":0,"renderable":1},{"_id":"themes/Hingle/source/js/custom/gitalk.min.js","path":"js/custom/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/Hingle/source/js/custom/md5.min.js","path":"js/custom/md5.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/0001.md","hash":"926d5edc2bce2ad2339e922393e8cd41704cfd0f","modified":1704712357254},{"_id":"source/_posts/0002.md","hash":"db0c464f1511d8671ea5d05739b7052a35035182","modified":1704712411260},{"_id":"source/_posts/0003.md","hash":"d7aa91a58a93ef572fa78e7321c6972aa6816d82","modified":1704796988366},{"_id":"source/_posts/0008.md","hash":"f9410098d9f5a07f15aecfa716abbdcb257e0c29","modified":1704712777080},{"_id":"source/_posts/0007.md","hash":"eedeba92b68d9a9f05d56cf8a6d9ed19ee36ad19","modified":1704712699806},{"_id":"source/_posts/0005.md","hash":"472faa06ee01f8b716a6e8d453376da048644fe8","modified":1704712550579},{"_id":"source/_posts/0009.md","hash":"d18fa1832cac2d14209a52bdaaefafb0c08b9d94","modified":1704712828866},{"_id":"source/_posts/0004.md","hash":"5c6a424d878826418c3b2eb4c5dcef0324d34268","modified":1704712506847},{"_id":"source/_posts/0006.md","hash":"0d129ef1978d3d63f20f321978e92a17d0748519","modified":1704716699114},{"_id":"source/_posts/0010.md","hash":"097c97dc6f8821406a8a8c64b1317061766ff81e","modified":1704712866007},{"_id":"source/_posts/0011.md","hash":"df431a056abfb9d8f13532adfd618413e6029a55","modified":1704716388670},{"_id":"source/_posts/0025.md","hash":"6dd33ecfb1be138b5c9b3fe819fe73553da1a0d6","modified":1704715760793},{"_id":"source/_posts/0024.md","hash":"b120b887a0a4c760ca0928373925fd2b13afe0aa","modified":1704715715975},{"_id":"source/_posts/0023.md","hash":"0b5719ef9bedcd507e65b3c2eea038a49428a14f","modified":1704715654689},{"_id":"source/_posts/0015.md","hash":"89b419dbdd9af948dc07e37ce22a24e9ff3ff4a4","modified":1704715398593},{"_id":"source/_posts/0018.md","hash":"739d2af12e98da720542756e0db6c644f755e505","modified":1704715434868},{"_id":"source/_posts/0022.md","hash":"c41abb6549297b6d2d0f927868339bc9db15d500","modified":1704716419508},{"_id":"source/_posts/0021.md","hash":"46ac60995f0070ff54fd211a4211c75ba79ab3f7","modified":1704716425765},{"_id":"source/_posts/0020.md","hash":"d7c8f4e7cf13e2ccd5a3aa1f1422fc6877ab0304","modified":1704715558312},{"_id":"source/_posts/0017.md","hash":"3b21465de159bc2db986b6c65026ca146dfc8ec1","modified":1704715406210},{"_id":"source/_posts/0013.md","hash":"72d964947401fa3659c00984ec5eeb7560a5c623","modified":1704715185860},{"_id":"source/_posts/0012.md","hash":"b31dd7704d4902a42222012000159247c2062806","modified":1704715043966},{"_id":"source/_posts/0014.md","hash":"a051470477e394ac1f297a124daeaeeb2cd1b377","modified":1704716412694},{"_id":"source/_posts/0016.md","hash":"7189495dcf43cab4d9682ff11bbc8078113b5aa0","modified":1704716406387},{"_id":"source/_posts/0019.md","hash":"a69376ad97fe03f3105eb56eb84a7740272280e7","modified":1704716399227},{"_id":"themes/Hingle/source/static/hingle.js","hash":"cb7c49db65b063d89bca03eee3e2e79af2ada0c1","modified":1704709365332},{"_id":"themes/Hingle/source/static/hingle.css","hash":"714f235e6706d1f085d4f1e2576f9d8c1a79684e","modified":1704709365332},{"_id":"themes/Hingle/layout/_partial/social.ejs","hash":"dc4e3e915327d500b5ad125c0f4847fffb37d47e","modified":1704709365332},{"_id":"themes/Hingle/layout/_partial/header.ejs","hash":"2f13227159607016a577345c974c80fe397666e5","modified":1704709365332},{"_id":"themes/Hingle/layout/page.ejs","hash":"c68ccdfa357c4d0cfd64054cbc895fd0b847acde","modified":1704787370362},{"_id":"themes/Hingle/_config.yml","hash":"d7531b23ba0788441390d20db44c850efcab2a3d","modified":1704710599246},{"_id":"themes/Hingle/layout/layout.ejs","hash":"6b51c9598139016d4a451cd32ca9076c3a9089d7","modified":1704709365332},{"_id":"themes/Hingle/layout/index.ejs","hash":"9bcb0ddbe47e19149c6b50b0dc669955d7804caa","modified":1704709365332},{"_id":"themes/Hingle/layout/archive.ejs","hash":"90eff02318b17c6eff80021d9a32c2a680415d29","modified":1704709365332},{"_id":"themes/Hingle/layout/_partial/head.ejs","hash":"3e83286f7fdb7c321e17147b11f9cb04dc4f68f9","modified":1704709365332},{"_id":"themes/Hingle/layout/_partial/footer.ejs","hash":"a8c3df304817e18fa91f12654cdab6e088021469","modified":1704709365332},{"_id":"themes/Hingle/layout/_partial/archive-list.ejs","hash":"d0ff1db7c10c68230f4ee8f7052bf68aa1301f13","modified":1704709365332},{"_id":"themes/Hingle/_config.example.yml","hash":"30d71a66ef8d1ea2ee8e531bc9289f73ce899764","modified":1704709365332},{"_id":"themes/Hingle/README.md","hash":"71d1762328de3b6eb7c0536c2d414e8221be0742","modified":1704709365332},{"_id":"themes/Hingle/LICENSE","hash":"4de1840f7346984f481500155ab438f0fdd12634","modified":1704709365332},{"_id":"themes/Hingle/.gitignore","hash":"1e51bee1ec3527ff3e2d6818a5367b5d81c69038","modified":1704709365332},{"_id":"themes/Hingle/layout/post.ejs","hash":"c18ebda83f2df165a306b26d79b2d33d5c2d8e0f","modified":1704795633803},{"_id":"themes/Hingle/source/static/kico.js","hash":"353d3ece9b5020bdac573c35fece1455e72b40ee","modified":1704709365332},{"_id":"themes/Hingle/source/static/kico.css","hash":"5cfb69fc5cb76f93d39a95ee571160262388659f","modified":1704709365332},{"_id":"themes/Hingle/source/static/img/icon.png","hash":"2f02d8ad49d7efee4b49fa6287297dd53a112440","modified":1704709365332},{"_id":"themes/Hingle/source/js/custom/gitalk.min","hash":"dc33563500a897ec06b27bc0982c5b77c7fa5cac","modified":1704786661417},{"_id":"public/sitemap.xml","hash":"d78128a6f2ce1d19f83ae908d78d3034ab439c14","modified":1704796790955},{"_id":"public/sitemap.txt","hash":"45a5b12448c637222e3af417d545836c7e3cecda","modified":1704796790955},{"_id":"public/2024/01/03/0007/index.html","hash":"d67715f2dddcf1354764e9e6321ef00977458812","modified":1704796790955},{"_id":"public/2024/01/03/0008/index.html","hash":"b70b75efa88b57ec53272c88c343b40f7702e7a1","modified":1704796790955},{"_id":"public/2024/01/03/0010/index.html","hash":"67756a2fe0c201a11449b97399b4590f41cdc9ee","modified":1704796790955},{"_id":"public/2023/11/05/0014/index.html","hash":"511b8b8a9d57a429b690cb3b275e4978cebf565c","modified":1704796790955},{"_id":"public/2023/11/05/0015/index.html","hash":"e2a1f4b87f46dbeb9ff8ff6c514a2f5d92cfccbc","modified":1704796790955},{"_id":"public/2023/11/05/0016/index.html","hash":"1c0fbb9ebc90283156ffeca6dbd14f81e10fe32f","modified":1704796790955},{"_id":"public/2023/11/05/0017/index.html","hash":"ad3ad1d05d54fd7bf535d295e79d08abbdd27b34","modified":1704796790955},{"_id":"public/2023/11/05/0018/index.html","hash":"0bde453f526608609dd03351dcc41c4361add99a","modified":1704796790955},{"_id":"public/2023/11/03/0019/index.html","hash":"e541b145e293aaeb3ea8fb490cc4bce6fc191ef9","modified":1704796790955},{"_id":"public/2023/08/23/0009/index.html","hash":"3d90b5804ac4dc0bb6381e2072a937874a1540b6","modified":1704796790955},{"_id":"public/2023/07/28/0002/index.html","hash":"9e1dcce5bef482cc67e8cae6fe368a59e8c43efe","modified":1704796790955},{"_id":"public/2023/07/21/0004/index.html","hash":"c55adce742edfc6e0ea18a4f720f07b8e2be01f7","modified":1704796790955},{"_id":"public/2023/07/20/0020/index.html","hash":"0caf9c43738a45d306c041bdd4e02733c93dbe43","modified":1704796790955},{"_id":"public/2023/07/08/0005/index.html","hash":"ad1890ac670f8564d47a65a218e16b3956c39261","modified":1704796790955},{"_id":"public/2023/05/26/0001/index.html","hash":"16a414149b84cf9d111ff3b33de19edc487f1ac9","modified":1704796790955},{"_id":"public/2023/03/16/0003/index.html","hash":"4e0411d832a14a3adacc97e6d318f2404c0526c0","modified":1704796994040},{"_id":"public/2022/12/19/0011/index.html","hash":"50586a3b087feb489a0adf6724e88431ed23cb1a","modified":1704796790955},{"_id":"public/2022/12/13/0012/index.html","hash":"f15917dd7e1bdb03f0cdfb077a9fdf0974e52c03","modified":1704796790955},{"_id":"public/2022/12/03/0006/index.html","hash":"962fdab70329ba4a564ee0455355cb9db608aa70","modified":1704796790955},{"_id":"public/2022/11/05/0013/index.html","hash":"a7dbc7569b8928b78256da60e0370f34f804677f","modified":1704796790955},{"_id":"public/2022/08/03/0021/index.html","hash":"15d1521649a4971d441c6e29e43e35abf6583d54","modified":1704796790955},{"_id":"public/2022/07/26/0022/index.html","hash":"eaa7e9ff3e6e537845f7ee83faffc5b24070c003","modified":1704796790955},{"_id":"public/2022/07/26/0023/index.html","hash":"c2d08412a3cccbca487bc476289b758df74063e5","modified":1704796790955},{"_id":"public/2022/07/26/0024/index.html","hash":"472ac306bcbb591af5296ef9bf86e2a68d629c4c","modified":1704796790955},{"_id":"public/2022/07/26/0025/index.html","hash":"92173a04edcfdd684bdda273d2271860f013a953","modified":1704796790955},{"_id":"public/archives/index.html","hash":"1c05c90f1de530dad6ec5f4bd24a13f7d8ed9ee7","modified":1704788116138},{"_id":"public/archives/page/2/index.html","hash":"9b3609754864a309ff5fea62efb3efb505225f46","modified":1704788116138},{"_id":"public/archives/page/3/index.html","hash":"1c83198031013e41240b93f6ce2671fb0179e772","modified":1704788116138},{"_id":"public/archives/2022/index.html","hash":"9bfe99cf71611f2c0a3323441c8a7392ae80eb84","modified":1704788116138},{"_id":"public/archives/2022/07/index.html","hash":"b503467006d30d01dc5cc8b17bb6124edfccd432","modified":1704788116138},{"_id":"public/archives/2022/08/index.html","hash":"bbb0eca565a2d07193939fc498f5a6f1c8a0538a","modified":1704788116138},{"_id":"public/archives/2022/11/index.html","hash":"773af62694a208cd4613dab1e36e619bfaad2955","modified":1704788116138},{"_id":"public/archives/2022/12/index.html","hash":"0209e380c78603ad72d867f443f2a70430409e22","modified":1704788116138},{"_id":"public/archives/2023/index.html","hash":"87f0404f1431ae835751f6a1fd32ae9a6c1f8072","modified":1704788116138},{"_id":"public/archives/2023/page/2/index.html","hash":"0bed57b85dc208746219c6c637776b278db4fc45","modified":1704788116138},{"_id":"public/archives/2023/03/index.html","hash":"115968bcf0c0c98084ae180081c6a249074b52ef","modified":1704788116138},{"_id":"public/archives/2023/05/index.html","hash":"5c530f2fa83dfea3582ff78ae3c288217c2adab0","modified":1704788116138},{"_id":"public/archives/2023/07/index.html","hash":"e6807c1d4554cd082b8f12df82976830ad2933af","modified":1704788116138},{"_id":"public/archives/2023/08/index.html","hash":"4f825107c877814ed56535affd44b42534af509d","modified":1704788116138},{"_id":"public/archives/2023/11/index.html","hash":"e1fa6692232f616d966a5e90ad960470ca06c2b3","modified":1704788116138},{"_id":"public/archives/2024/index.html","hash":"57f7e9dd09835dc3c6d1f5a6193d115f880ade49","modified":1704788116138},{"_id":"public/archives/2024/01/index.html","hash":"915e575cadbc2030de82dbf8156053e7210d8a96","modified":1704788116138},{"_id":"public/index.html","hash":"fbdb0708282e207c3bd965e427362a308bb259e9","modified":1704788116138},{"_id":"public/page/2/index.html","hash":"e9d835df809cd1a909765994a1708e87e26abf69","modified":1704788116138},{"_id":"public/page/3/index.html","hash":"5760bb84476c995360eedbbbf8a48664f7529e96","modified":1704788116138},{"_id":"public/tags/数据结构/index.html","hash":"a778f50cae793872e3999620ac1c429fbe40eeca","modified":1704788116138},{"_id":"public/tags/并查集/index.html","hash":"c0e26ac294db46513bba88e65ef024795fd240a9","modified":1704788116138},{"_id":"public/tags/OI/index.html","hash":"9fa6244978bfa2de2d0fd5a49901fa6c6137ad79","modified":1704788116138},{"_id":"public/tags/OI/page/2/index.html","hash":"2ad20967f9917cb9337d038cac6f51eda6527cfe","modified":1704788116138},{"_id":"public/tags/OI/page/3/index.html","hash":"6cd18e415db3153da7b1f671f1e493b0b03e4317","modified":1704788116138},{"_id":"public/tags/树形结构/index.html","hash":"88c09ddacf3060bd2cc548e37ebc6c1a73b590eb","modified":1704788116138},{"_id":"public/tags/分治/index.html","hash":"09711be2bf92d902f725dd977f116e9315ec8fd0","modified":1704788116138},{"_id":"public/tags/多项式/index.html","hash":"2af0dbc9dff8a8d61d2c0ac606f706d5c52fd01e","modified":1704788116138},{"_id":"public/tags/NOI-Linux/index.html","hash":"4e0e4f23003398aaf8f2334502eae4d389cc9e28","modified":1704788116138},{"_id":"public/tags/DP/index.html","hash":"685c6b0e0b798577f1a8d8e706cd4554b93ea4d7","modified":1704788116138},{"_id":"public/tags/斜率优化/index.html","hash":"f501eb881060cd5bbf3de9d3c95c80e16a9df0c1","modified":1704788116138},{"_id":"public/tags/网络流/index.html","hash":"85bfd7367233be763f168cedf552b95eb0995d9c","modified":1704788116138},{"_id":"public/tags/Nvim/index.html","hash":"b31905b8f1203fc291fa35d8108f040d8d6f1cc1","modified":1704788116138},{"_id":"public/tags/IDE/index.html","hash":"f6a6136dd52d0009b94b0a72056b8679bd908477","modified":1704788116138},{"_id":"public/tags/CSP/index.html","hash":"445947c2cbaea57db0d1d4da4274d3eb8d7b22f7","modified":1704788116138},{"_id":"public/static/img/icon.png","hash":"2f02d8ad49d7efee4b49fa6287297dd53a112440","modified":1704788116138},{"_id":"public/static/hingle.css","hash":"714f235e6706d1f085d4f1e2576f9d8c1a79684e","modified":1704788116138},{"_id":"public/static/hingle.js","hash":"cb7c49db65b063d89bca03eee3e2e79af2ada0c1","modified":1704788116138},{"_id":"public/static/kico.css","hash":"5cfb69fc5cb76f93d39a95ee571160262388659f","modified":1704788116138},{"_id":"public/static/kico.js","hash":"353d3ece9b5020bdac573c35fece1455e72b40ee","modified":1704788116138},{"_id":"public/js/custom/gitalk.min","hash":"dc33563500a897ec06b27bc0982c5b77c7fa5cac","modified":1704788116138},{"_id":"themes/Hingle/source/js/custom/gitalk.min.js","hash":"50ceab850b44b227fea4d1f3b3a3900c0875e615","modified":1704795835455},{"_id":"public/js/custom/gitalk.min.js","hash":"50ceab850b44b227fea4d1f3b3a3900c0875e615","modified":1704796790955},{"_id":"themes/Hingle/source/js/custom/md5.min.js","hash":"222c79d6a221eb9a3ada9a75379c9e1d61a52063","modified":1704795588671},{"_id":"public/js/custom/md5.min.js","hash":"222c79d6a221eb9a3ada9a75379c9e1d61a52063","modified":1704796790955}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"并查集总结","date":"2023-05-25T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# 基础\n\n## 思路\n\n并查集需要高效的处理集合的合并和查询。用线性的数据结构比如数组或者链表存储会导致时间复杂度很高，所以用图或树来存储。\n\n<div STYLE=\"page-break-after:always;s\"></div>\n\n考虑把所有的元素都存储在一棵树里面，合并集合只用把两棵树合并在一起，接下来考虑如何查询。\n\n<div STYLE=\"page-break-after:always;s\"></div>\n\n树上每个元素都可以一直向上遍历直到根节点，所以定义一个集合的代表元是这个集合所在的树的根节点，查询两个数是否在一个集合的时候直接比较代表元即可，因为只涉及到找父亲节点的操作，只用记录每个节点的直接父亲。\n\n封装形式：\n\n```cpp\n#define MAXN 100000\nclass node{\n    public:\n        void Union(int x,int y){\n            int fx=getfa(x);\n            int fy=getfa(y);\n            fa[fx]=fy;\n            return ;\n        }\n        bool query(int x,int y){\n            return getfa(x)==getfa(y);\n        }\n        node(int n){\n            for(int i=1;i<=n;i++){\n                fa[i]=i;\n            }\n        }\n    private:\n        int getfa(int x){\n            return x==fa[x]?x:getfa(fa[x]);\n        }\n        int fa[MAXN+5];\n};\n```\n\n上述算法时间复杂度依赖于树高，最坏时间复杂度可能达到 $\\mathcal{O}(n)$，所以要优化。\n\n# 优化\n\n## 启发式合并\n\n其实就是把较小的集合的子树合并到较大的集合的子树中。\n\n## 路径压缩\n\n每次求父亲回溯的时候，把他的直接父亲赋值为代表元，减小树高。\n\n优化后封装代码：\n\n```cpp\n#define MAXN 100000\nclass node{\n    public:\n        void Union(int x,int y){\n            int fx=getfa(x);\n            int fy=getfa(y);\n            if(siz[fx]>siz[fy]){\n                std::swap(fx,fy);\n            }\n            fa[fx]=fy;\n            return ;\n        }\n        bool query(int x,int y){\n            return getfa(x)==getfa(y);\n        }\n        node(int n){\n            for(int i=1;i<=n;i++){\n                fa[i]=i;\n                siz[i]=1;\n            }\n        }\n    private:\n        int getfa(int x){\n            return x==fa[x]?x:fa[x]=getfa(fa[x]);\n        }\n        int fa[MAXN+5];\n        int siz[MAXN+5];\n};\n```\n\n# 扩展\n\n## 敌对并查集\n\n并查集所维护的是朋友的朋友是朋友的一种传递关系。\n\n也可以维护敌人的敌人是朋友的关系。\n\n<div STYLE=\"page-break-after:always;s\"></div>\n\n对于每个要维护的值 $n$，假设两种元素 $A(n)$ ， $B(n)$，\n$A(n)$用来表示元素本身， $B(n)$则用来表示这个元素的敌人。\n\n$n$ 和 $m$ 是敌人的话，直接合并 $A(n)$和 $B(m)$ 以及 $A(m)$和 $B(n)$。 \n\n$n$ 和 $m$ 是朋友的话，直接合并 $A(n)$和 $A(m)$ 以及 $B(m)$和 $B(n)$。 \n\n同样的，也可以维护有三种阵营的情况，每个值三种元素即可，详细略。\n\n## 树边维护信息\n\n并查集的结构是森林，所以树边可以带权值，路径压缩的时候直接根据定义合并边就行了。\n\n","source":"_posts/0001.md","raw":"---\ntitle: 并查集总结\ndate: 2023-05-26\ntags: [数据结构,并查集,OI]\ntoc: true\nmathjax: true\n---\n\n# 基础\n\n## 思路\n\n并查集需要高效的处理集合的合并和查询。用线性的数据结构比如数组或者链表存储会导致时间复杂度很高，所以用图或树来存储。\n\n<div STYLE=\"page-break-after:always;s\"></div>\n\n考虑把所有的元素都存储在一棵树里面，合并集合只用把两棵树合并在一起，接下来考虑如何查询。\n\n<div STYLE=\"page-break-after:always;s\"></div>\n\n树上每个元素都可以一直向上遍历直到根节点，所以定义一个集合的代表元是这个集合所在的树的根节点，查询两个数是否在一个集合的时候直接比较代表元即可，因为只涉及到找父亲节点的操作，只用记录每个节点的直接父亲。\n\n封装形式：\n\n```cpp\n#define MAXN 100000\nclass node{\n    public:\n        void Union(int x,int y){\n            int fx=getfa(x);\n            int fy=getfa(y);\n            fa[fx]=fy;\n            return ;\n        }\n        bool query(int x,int y){\n            return getfa(x)==getfa(y);\n        }\n        node(int n){\n            for(int i=1;i<=n;i++){\n                fa[i]=i;\n            }\n        }\n    private:\n        int getfa(int x){\n            return x==fa[x]?x:getfa(fa[x]);\n        }\n        int fa[MAXN+5];\n};\n```\n\n上述算法时间复杂度依赖于树高，最坏时间复杂度可能达到 $\\mathcal{O}(n)$，所以要优化。\n\n# 优化\n\n## 启发式合并\n\n其实就是把较小的集合的子树合并到较大的集合的子树中。\n\n## 路径压缩\n\n每次求父亲回溯的时候，把他的直接父亲赋值为代表元，减小树高。\n\n优化后封装代码：\n\n```cpp\n#define MAXN 100000\nclass node{\n    public:\n        void Union(int x,int y){\n            int fx=getfa(x);\n            int fy=getfa(y);\n            if(siz[fx]>siz[fy]){\n                std::swap(fx,fy);\n            }\n            fa[fx]=fy;\n            return ;\n        }\n        bool query(int x,int y){\n            return getfa(x)==getfa(y);\n        }\n        node(int n){\n            for(int i=1;i<=n;i++){\n                fa[i]=i;\n                siz[i]=1;\n            }\n        }\n    private:\n        int getfa(int x){\n            return x==fa[x]?x:fa[x]=getfa(fa[x]);\n        }\n        int fa[MAXN+5];\n        int siz[MAXN+5];\n};\n```\n\n# 扩展\n\n## 敌对并查集\n\n并查集所维护的是朋友的朋友是朋友的一种传递关系。\n\n也可以维护敌人的敌人是朋友的关系。\n\n<div STYLE=\"page-break-after:always;s\"></div>\n\n对于每个要维护的值 $n$，假设两种元素 $A(n)$ ， $B(n)$，\n$A(n)$用来表示元素本身， $B(n)$则用来表示这个元素的敌人。\n\n$n$ 和 $m$ 是敌人的话，直接合并 $A(n)$和 $B(m)$ 以及 $A(m)$和 $B(n)$。 \n\n$n$ 和 $m$ 是朋友的话，直接合并 $A(n)$和 $A(m)$ 以及 $B(m)$和 $B(n)$。 \n\n同样的，也可以维护有三种阵营的情况，每个值三种元素即可，详细略。\n\n## 树边维护信息\n\n并查集的结构是森林，所以树边可以带权值，路径压缩的时候直接根据定义合并边就行了。\n\n","slug":"0001","published":1,"updated":"2024-01-08T11:12:37.254Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttiz0000xday7c9hcesr","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>并查集需要高效的处理集合的合并和查询。用线性的数据结构比如数组或者链表存储会导致时间复杂度很高，所以用图或树来存储。</p>\n<div STYLE=\"page-break-after:always;s\"></div>\n\n<p>考虑把所有的元素都存储在一棵树里面，合并集合只用把两棵树合并在一起，接下来考虑如何查询。</p>\n<div STYLE=\"page-break-after:always;s\"></div>\n\n<p>树上每个元素都可以一直向上遍历直到根节点，所以定义一个集合的代表元是这个集合所在的树的根节点，查询两个数是否在一个集合的时候直接比较代表元即可，因为只涉及到找父亲节点的操作，只用记录每个节点的直接父亲。</p>\n<p>封装形式：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100000</span></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> fx<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> fy<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fa<span class=\"token punctuation\">[</span>fx<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fy<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述算法时间复杂度依赖于树高，最坏时间复杂度可能达到 $\\mathcal{O}(n)$，所以要优化。</p>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h2 id=\"启发式合并\"><a href=\"#启发式合并\" class=\"headerlink\" title=\"启发式合并\"></a>启发式合并</h2><p>其实就是把较小的集合的子树合并到较大的集合的子树中。</p>\n<h2 id=\"路径压缩\"><a href=\"#路径压缩\" class=\"headerlink\" title=\"路径压缩\"></a>路径压缩</h2><p>每次求父亲回溯的时候，把他的直接父亲赋值为代表元，减小树高。</p>\n<p>优化后封装代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100000</span></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> fx<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> fy<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>fx<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>siz<span class=\"token punctuation\">[</span>fy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>fx<span class=\"token punctuation\">,</span>fy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            fa<span class=\"token punctuation\">[</span>fx<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fy<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n                siz<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> siz<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"敌对并查集\"><a href=\"#敌对并查集\" class=\"headerlink\" title=\"敌对并查集\"></a>敌对并查集</h2><p>并查集所维护的是朋友的朋友是朋友的一种传递关系。</p>\n<p>也可以维护敌人的敌人是朋友的关系。</p>\n<div STYLE=\"page-break-after:always;s\"></div>\n\n<p>对于每个要维护的值 $n$，假设两种元素 $A(n)$ ， $B(n)$，<br>$A(n)$用来表示元素本身， $B(n)$则用来表示这个元素的敌人。</p>\n<p>$n$ 和 $m$ 是敌人的话，直接合并 $A(n)$和 $B(m)$ 以及 $A(m)$和 $B(n)$。 </p>\n<p>$n$ 和 $m$ 是朋友的话，直接合并 $A(n)$和 $A(m)$ 以及 $B(m)$和 $B(n)$。 </p>\n<p>同样的，也可以维护有三种阵营的情况，每个值三种元素即可，详细略。</p>\n<h2 id=\"树边维护信息\"><a href=\"#树边维护信息\" class=\"headerlink\" title=\"树边维护信息\"></a>树边维护信息</h2><p>并查集的结构是森林，所以树边可以带权值，路径压缩的时候直接根据定义合并边就行了。</p>\n","excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>并查集需要高效的处理集合的合并和查询。用线性的数据结构比如数组或者链表存储会导致时间复杂度很高，所以用图或树来存储。</p>\n<div STYLE=\"page-break-after:always;s\"></div>\n\n<p>考虑把所有的元素都存储在一棵树里面，合并集合只用把两棵树合并在一起，接下来考虑如何查询。</p>\n<div STYLE=\"page-break-after:always;s\"></div>\n\n<p>树上每个元素都可以一直向上遍历直到根节点，所以定义一个集合的代表元是这个集合所在的树的根节点，查询两个数是否在一个集合的时候直接比较代表元即可，因为只涉及到找父亲节点的操作，只用记录每个节点的直接父亲。</p>\n<p>封装形式：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100000</span></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> fx<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> fy<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fa<span class=\"token punctuation\">[</span>fx<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fy<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述算法时间复杂度依赖于树高，最坏时间复杂度可能达到 $\\mathcal{O}(n)$，所以要优化。</p>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h2 id=\"启发式合并\"><a href=\"#启发式合并\" class=\"headerlink\" title=\"启发式合并\"></a>启发式合并</h2><p>其实就是把较小的集合的子树合并到较大的集合的子树中。</p>\n<h2 id=\"路径压缩\"><a href=\"#路径压缩\" class=\"headerlink\" title=\"路径压缩\"></a>路径压缩</h2><p>每次求父亲回溯的时候，把他的直接父亲赋值为代表元，减小树高。</p>\n<p>优化后封装代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100000</span></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> fx<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> fy<span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>fx<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>siz<span class=\"token punctuation\">[</span>fy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>fx<span class=\"token punctuation\">,</span>fy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            fa<span class=\"token punctuation\">[</span>fx<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fy<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n                siz<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> siz<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"敌对并查集\"><a href=\"#敌对并查集\" class=\"headerlink\" title=\"敌对并查集\"></a>敌对并查集</h2><p>并查集所维护的是朋友的朋友是朋友的一种传递关系。</p>\n<p>也可以维护敌人的敌人是朋友的关系。</p>\n<div STYLE=\"page-break-after:always;s\"></div>\n\n<p>对于每个要维护的值 $n$，假设两种元素 $A(n)$ ， $B(n)$，<br>$A(n)$用来表示元素本身， $B(n)$则用来表示这个元素的敌人。</p>\n<p>$n$ 和 $m$ 是敌人的话，直接合并 $A(n)$和 $B(m)$ 以及 $A(m)$和 $B(n)$。 </p>\n<p>$n$ 和 $m$ 是朋友的话，直接合并 $A(n)$和 $A(m)$ 以及 $B(m)$和 $B(n)$。 </p>\n<p>同样的，也可以维护有三种阵营的情况，每个值三种元素即可，详细略。</p>\n<h2 id=\"树边维护信息\"><a href=\"#树边维护信息\" class=\"headerlink\" title=\"树边维护信息\"></a>树边维护信息</h2><p>并查集的结构是森林，所以树边可以带权值，路径压缩的时候直接根据定义合并边就行了。</p>\n"},{"title":"点分治&边分治","date":"2023-07-27T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# 点分治&边分治\n\n## 点分治\n\n### 引入\n\n[P3806](https://www.luogu.com.cn/problem/P3806)\n\n题意：给定一颗具有 $n$ 个节点的树，边上有权值，一共给定 $m$ 次询问，每次询问给定 $k$，要求求出树上距离为 $k$ 的点对是否存在。\n\n树上任意两点的路径是可以分为两条从一个节点到其某个祖先节点的路径。考虑递归到节点 $i$ ，对于此节点，为了进行统计，可以划分为两个部分，一种是经过 $i$ 号节点，另一种是没有经过 $i$ 号节点，很明显没有经过 $i$ 号节点的路径一定在 $i$ 号节点某个儿子的子树内，可以进行递归处理，接下来考虑如何处理，很明显经过 $i$ 号节点的路径一定是经过两个儿子的，定义 $dis_b$ 表示 $b$ 号节点到 $i$ 的距离，很明显这是一条树上从一个节点到其某个祖先节点的路径，我们要找的是二元组 $(a,b)$ ，使得有 $dis_a + dis_b =k $ ，这样直接处理是 $O(n^2)$ ，但是可以开数组 $tf_b$ 表示是否存在 $v$ 使得 $dis_v=b$ 。\n\n### 时间复杂度分析\n\n很明显每一层递归，设以 $i$ 节点为根的子树大小为 $siz_i$ ，很明显每次递归是 $O(siz_i \\times k)$ ，总时间复杂度不难得出，设树深度为 $h$ ，则时间复杂度为 $O(nhk)$ 。\n\n这个时间复杂度依赖于数据，深度最坏可能达到 $n$ ，于是最坏时间复杂度变成了 $O(n^2k)$。\n\n所以是否可以适当变换树的结构使得深度可以减小到 $log_n$ 呢？\n\n### 引入重心\n\n#### 定义\n\n$log$ 的时间复杂度关键在于分成一半，如果可以在递归过程中更换一个根节点，即可，因为这样更改根节点实际上只是更改了一条边，也就是从原来的根节点到他的父亲的边，所以子树内点间距离不会改变，所以怎么选呢？分成一半，在于相等，如果能确保所有儿子的子树大小尽可能相等，即可，换句话说也就是子树大小的最大值最小，注意这里讨论无向边，可以理解为以这个节点作为根节点的时候，求出一个 $W_i$ 是 $\\max(siz_j)~{j\\in son_i}$ ，求出最小的 $W_i$ ，这个点即为重心。\n\n$mss(u)$ 表示 $u$ 的最大子树大小。\n\n形式化的说，找到一个 $u$ 使得 $mss(u)$ 最小。\n\n#### 性质\n\n##### 引理1：\n\n###### 结论：\n\n某个树的重心一定满足他的最大子树大小不大于整棵树的一半，反命题同样成立。\n\n###### 论证：\n\n充分性：\n\n$siz_u(v)$ 表示以 $u$ 为根，$v$ 子树大小。\n\n$mss(u)$ 表示 $u$ 的最大子树大小。\n\n反证法证明，$u$ 为树的重心，假设存在与他相邻的一个节点 $v$ 满足 $siz_u(v)>\\frac n 2$ ，于是有 $siz_v(u)=n-siz_u(v)< \\frac n 2 $ ，于是 $siz_v(u) <siz_u(v) =mss(u)$ ，因为 $siz_u(v)=1+\\sum siz_v(w) ~(w\\in son_v)$，所以有 $siz_v(w)<siz_u(v) ~ (w\\in son_v)$ ,\n\n推出 $mss(v)<siz_u(v)=mss(u)$ ，与重心定义不符。\n\n 必要性：\n\n如果 $mss(u) < \\frac 2 n$ ，则说明对于每个儿子$v$都存在 $siz_u(v) < \\frac 2 n$ ，于是有 $\\sum siz_v(w) < \\frac 2 n ~(w \\in son_v ~\\&~ w \\neq u )$ ，可以推出$siz_v(w) < \\frac 2 n (w \\in son_v ~~\\&~~ w \\neq u)$。\n\n##### 引理2：\n\n###### 结论：\n\n如果一棵树有两个重心，则这两个重心一定相邻，并且树有偶数个节点，可以被划分为两个大小相等的分支，每个分支各自包含一个重心。\n\n###### 论证：\n\n很明显对于两个重心 $u,v$ 有 $mss(u)=mss(v)$，$u$ 的最大子树肯定包含 $v$ ，假设法证明，假设 $w$ 是 $u$ 的最大子树，则有 $mss(u)=siz_u(w)<siz_v(u)$ ，很明显 $siz_v(u) \\leq mss(v) $ ，则有 $mss(u)<mss(v)$，矛盾。\n\n设 $u$ 到 $v$ 经过 $k$ 个中间节点，于是有 $wss(u)=siz_u(v)=k+mss(v)$，明显有 $k=0$。\n\n因为 $siz_u(v)=siz_v(u)$ ，又因为 $siz_u(v)+siz_v(u)=n$ ，所以 $siz_u(v)=siz_v(u)=\\frac 2 n $ ，结论不证自明。\n\n##### 引理3：\n\n###### 结论：\n\n树至少一个重心，至多有两个重心。\n\n###### 论证：\n\n求重心在做求最小值操作，肯定存在最小值。不可能存在三个重心，因为他们两两相邻，会形成环，树怎么可能有环？\n\n##### 引理4：\n\n###### 结论：\n\n假设树上所有边权为 $1$，则记 $dis_i $ 表示所有节点到 $i$ 号节点的距离和，则重心 $u$ 的 $dis_u$ 最小，反命题成立。\n\n###### 论证：\n\n很明显对于非重心点 $u$ ，有 $wss(v) > \\frac 2 n~ (v \\in son_v) $ ，那向 $v$ 移动会使 $dis$ 减少 $siz_u(v)-(n-siz_u(v)=2siz_u(v)-n>0$ ，结论得证。 \n\n##### 求法：\n\n根据定义以及引理1即可\n\n```cpp\n\n```\n","source":"_posts/0002.md","raw":"---\ntitle: 点分治&边分治\ndate: 2023-07-28\ntags: [OI,树形结构,分治]\ntoc: true\nmathjax: true\n---\n\n# 点分治&边分治\n\n## 点分治\n\n### 引入\n\n[P3806](https://www.luogu.com.cn/problem/P3806)\n\n题意：给定一颗具有 $n$ 个节点的树，边上有权值，一共给定 $m$ 次询问，每次询问给定 $k$，要求求出树上距离为 $k$ 的点对是否存在。\n\n树上任意两点的路径是可以分为两条从一个节点到其某个祖先节点的路径。考虑递归到节点 $i$ ，对于此节点，为了进行统计，可以划分为两个部分，一种是经过 $i$ 号节点，另一种是没有经过 $i$ 号节点，很明显没有经过 $i$ 号节点的路径一定在 $i$ 号节点某个儿子的子树内，可以进行递归处理，接下来考虑如何处理，很明显经过 $i$ 号节点的路径一定是经过两个儿子的，定义 $dis_b$ 表示 $b$ 号节点到 $i$ 的距离，很明显这是一条树上从一个节点到其某个祖先节点的路径，我们要找的是二元组 $(a,b)$ ，使得有 $dis_a + dis_b =k $ ，这样直接处理是 $O(n^2)$ ，但是可以开数组 $tf_b$ 表示是否存在 $v$ 使得 $dis_v=b$ 。\n\n### 时间复杂度分析\n\n很明显每一层递归，设以 $i$ 节点为根的子树大小为 $siz_i$ ，很明显每次递归是 $O(siz_i \\times k)$ ，总时间复杂度不难得出，设树深度为 $h$ ，则时间复杂度为 $O(nhk)$ 。\n\n这个时间复杂度依赖于数据，深度最坏可能达到 $n$ ，于是最坏时间复杂度变成了 $O(n^2k)$。\n\n所以是否可以适当变换树的结构使得深度可以减小到 $log_n$ 呢？\n\n### 引入重心\n\n#### 定义\n\n$log$ 的时间复杂度关键在于分成一半，如果可以在递归过程中更换一个根节点，即可，因为这样更改根节点实际上只是更改了一条边，也就是从原来的根节点到他的父亲的边，所以子树内点间距离不会改变，所以怎么选呢？分成一半，在于相等，如果能确保所有儿子的子树大小尽可能相等，即可，换句话说也就是子树大小的最大值最小，注意这里讨论无向边，可以理解为以这个节点作为根节点的时候，求出一个 $W_i$ 是 $\\max(siz_j)~{j\\in son_i}$ ，求出最小的 $W_i$ ，这个点即为重心。\n\n$mss(u)$ 表示 $u$ 的最大子树大小。\n\n形式化的说，找到一个 $u$ 使得 $mss(u)$ 最小。\n\n#### 性质\n\n##### 引理1：\n\n###### 结论：\n\n某个树的重心一定满足他的最大子树大小不大于整棵树的一半，反命题同样成立。\n\n###### 论证：\n\n充分性：\n\n$siz_u(v)$ 表示以 $u$ 为根，$v$ 子树大小。\n\n$mss(u)$ 表示 $u$ 的最大子树大小。\n\n反证法证明，$u$ 为树的重心，假设存在与他相邻的一个节点 $v$ 满足 $siz_u(v)>\\frac n 2$ ，于是有 $siz_v(u)=n-siz_u(v)< \\frac n 2 $ ，于是 $siz_v(u) <siz_u(v) =mss(u)$ ，因为 $siz_u(v)=1+\\sum siz_v(w) ~(w\\in son_v)$，所以有 $siz_v(w)<siz_u(v) ~ (w\\in son_v)$ ,\n\n推出 $mss(v)<siz_u(v)=mss(u)$ ，与重心定义不符。\n\n 必要性：\n\n如果 $mss(u) < \\frac 2 n$ ，则说明对于每个儿子$v$都存在 $siz_u(v) < \\frac 2 n$ ，于是有 $\\sum siz_v(w) < \\frac 2 n ~(w \\in son_v ~\\&~ w \\neq u )$ ，可以推出$siz_v(w) < \\frac 2 n (w \\in son_v ~~\\&~~ w \\neq u)$。\n\n##### 引理2：\n\n###### 结论：\n\n如果一棵树有两个重心，则这两个重心一定相邻，并且树有偶数个节点，可以被划分为两个大小相等的分支，每个分支各自包含一个重心。\n\n###### 论证：\n\n很明显对于两个重心 $u,v$ 有 $mss(u)=mss(v)$，$u$ 的最大子树肯定包含 $v$ ，假设法证明，假设 $w$ 是 $u$ 的最大子树，则有 $mss(u)=siz_u(w)<siz_v(u)$ ，很明显 $siz_v(u) \\leq mss(v) $ ，则有 $mss(u)<mss(v)$，矛盾。\n\n设 $u$ 到 $v$ 经过 $k$ 个中间节点，于是有 $wss(u)=siz_u(v)=k+mss(v)$，明显有 $k=0$。\n\n因为 $siz_u(v)=siz_v(u)$ ，又因为 $siz_u(v)+siz_v(u)=n$ ，所以 $siz_u(v)=siz_v(u)=\\frac 2 n $ ，结论不证自明。\n\n##### 引理3：\n\n###### 结论：\n\n树至少一个重心，至多有两个重心。\n\n###### 论证：\n\n求重心在做求最小值操作，肯定存在最小值。不可能存在三个重心，因为他们两两相邻，会形成环，树怎么可能有环？\n\n##### 引理4：\n\n###### 结论：\n\n假设树上所有边权为 $1$，则记 $dis_i $ 表示所有节点到 $i$ 号节点的距离和，则重心 $u$ 的 $dis_u$ 最小，反命题成立。\n\n###### 论证：\n\n很明显对于非重心点 $u$ ，有 $wss(v) > \\frac 2 n~ (v \\in son_v) $ ，那向 $v$ 移动会使 $dis$ 减少 $siz_u(v)-(n-siz_u(v)=2siz_u(v)-n>0$ ，结论得证。 \n\n##### 求法：\n\n根据定义以及引理1即可\n\n```cpp\n\n```\n","slug":"0002","published":1,"updated":"2024-01-08T11:13:31.260Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttj50001xdaygq6mb52g","content":"<h1 id=\"点分治-amp-边分治\"><a href=\"#点分治-amp-边分治\" class=\"headerlink\" title=\"点分治&amp;边分治\"></a>点分治&amp;边分治</h1><h2 id=\"点分治\"><a href=\"#点分治\" class=\"headerlink\" title=\"点分治\"></a>点分治</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p><a href=\"https://www.luogu.com.cn/problem/P3806\">P3806</a></p>\n<p>题意：给定一颗具有 $n$ 个节点的树，边上有权值，一共给定 $m$ 次询问，每次询问给定 $k$，要求求出树上距离为 $k$ 的点对是否存在。</p>\n<p>树上任意两点的路径是可以分为两条从一个节点到其某个祖先节点的路径。考虑递归到节点 $i$ ，对于此节点，为了进行统计，可以划分为两个部分，一种是经过 $i$ 号节点，另一种是没有经过 $i$ 号节点，很明显没有经过 $i$ 号节点的路径一定在 $i$ 号节点某个儿子的子树内，可以进行递归处理，接下来考虑如何处理，很明显经过 $i$ 号节点的路径一定是经过两个儿子的，定义 $dis_b$ 表示 $b$ 号节点到 $i$ 的距离，很明显这是一条树上从一个节点到其某个祖先节点的路径，我们要找的是二元组 $(a,b)$ ，使得有 $dis_a + dis_b =k $ ，这样直接处理是 $O(n^2)$ ，但是可以开数组 $tf_b$ 表示是否存在 $v$ 使得 $dis_v=b$ 。</p>\n<h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3><p>很明显每一层递归，设以 $i$ 节点为根的子树大小为 $siz_i$ ，很明显每次递归是 $O(siz_i \\times k)$ ，总时间复杂度不难得出，设树深度为 $h$ ，则时间复杂度为 $O(nhk)$ 。</p>\n<p>这个时间复杂度依赖于数据，深度最坏可能达到 $n$ ，于是最坏时间复杂度变成了 $O(n^2k)$。</p>\n<p>所以是否可以适当变换树的结构使得深度可以减小到 $log_n$ 呢？</p>\n<h3 id=\"引入重心\"><a href=\"#引入重心\" class=\"headerlink\" title=\"引入重心\"></a>引入重心</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>$log$ 的时间复杂度关键在于分成一半，如果可以在递归过程中更换一个根节点，即可，因为这样更改根节点实际上只是更改了一条边，也就是从原来的根节点到他的父亲的边，所以子树内点间距离不会改变，所以怎么选呢？分成一半，在于相等，如果能确保所有儿子的子树大小尽可能相等，即可，换句话说也就是子树大小的最大值最小，注意这里讨论无向边，可以理解为以这个节点作为根节点的时候，求出一个 $W_i$ 是 $\\max(siz_j)~{j\\in son_i}$ ，求出最小的 $W_i$ ，这个点即为重心。</p>\n<p>$mss(u)$ 表示 $u$ 的最大子树大小。</p>\n<p>形式化的说，找到一个 $u$ 使得 $mss(u)$ 最小。</p>\n<h4 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h4><h5 id=\"引理1：\"><a href=\"#引理1：\" class=\"headerlink\" title=\"引理1：\"></a>引理1：</h5><h6 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>某个树的重心一定满足他的最大子树大小不大于整棵树的一半，反命题同样成立。</p>\n<h6 id=\"论证：\"><a href=\"#论证：\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>充分性：</p>\n<p>$siz_u(v)$ 表示以 $u$ 为根，$v$ 子树大小。</p>\n<p>$mss(u)$ 表示 $u$ 的最大子树大小。</p>\n<p>反证法证明，$u$ 为树的重心，假设存在与他相邻的一个节点 $v$ 满足 $siz_u(v)&gt;\\frac n 2$ ，于是有 $siz_v(u)=n-siz_u(v)&lt; \\frac n 2 $ ，于是 $siz_v(u) &lt;siz_u(v) =mss(u)$ ，因为 $siz_u(v)=1+\\sum siz_v(w) ~(w\\in son_v)$，所以有 $siz_v(w)&lt;siz_u(v) ~ (w\\in son_v)$ ,</p>\n<p>推出 $mss(v)&lt;siz_u(v)=mss(u)$ ，与重心定义不符。</p>\n<p> 必要性：</p>\n<p>如果 $mss(u) &lt; \\frac 2 n$ ，则说明对于每个儿子$v$都存在 $siz_u(v) &lt; \\frac 2 n$ ，于是有 $\\sum siz_v(w) &lt; \\frac 2 n ~(w \\in son_v ~\\&amp;~ w \\neq u )$ ，可以推出$siz_v(w) &lt; \\frac 2 n (w \\in son_v <del>\\&amp;</del> w \\neq u)$。</p>\n<h5 id=\"引理2：\"><a href=\"#引理2：\" class=\"headerlink\" title=\"引理2：\"></a>引理2：</h5><h6 id=\"结论：-1\"><a href=\"#结论：-1\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>如果一棵树有两个重心，则这两个重心一定相邻，并且树有偶数个节点，可以被划分为两个大小相等的分支，每个分支各自包含一个重心。</p>\n<h6 id=\"论证：-1\"><a href=\"#论证：-1\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>很明显对于两个重心 $u,v$ 有 $mss(u)=mss(v)$，$u$ 的最大子树肯定包含 $v$ ，假设法证明，假设 $w$ 是 $u$ 的最大子树，则有 $mss(u)=siz_u(w)&lt;siz_v(u)$ ，很明显 $siz_v(u) \\leq mss(v) $ ，则有 $mss(u)&lt;mss(v)$，矛盾。</p>\n<p>设 $u$ 到 $v$ 经过 $k$ 个中间节点，于是有 $wss(u)=siz_u(v)=k+mss(v)$，明显有 $k=0$。</p>\n<p>因为 $siz_u(v)=siz_v(u)$ ，又因为 $siz_u(v)+siz_v(u)=n$ ，所以 $siz_u(v)=siz_v(u)=\\frac 2 n $ ，结论不证自明。</p>\n<h5 id=\"引理3：\"><a href=\"#引理3：\" class=\"headerlink\" title=\"引理3：\"></a>引理3：</h5><h6 id=\"结论：-2\"><a href=\"#结论：-2\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>树至少一个重心，至多有两个重心。</p>\n<h6 id=\"论证：-2\"><a href=\"#论证：-2\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>求重心在做求最小值操作，肯定存在最小值。不可能存在三个重心，因为他们两两相邻，会形成环，树怎么可能有环？</p>\n<h5 id=\"引理4：\"><a href=\"#引理4：\" class=\"headerlink\" title=\"引理4：\"></a>引理4：</h5><h6 id=\"结论：-3\"><a href=\"#结论：-3\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>假设树上所有边权为 $1$，则记 $dis_i $ 表示所有节点到 $i$ 号节点的距离和，则重心 $u$ 的 $dis_u$ 最小，反命题成立。</p>\n<h6 id=\"论证：-3\"><a href=\"#论证：-3\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>很明显对于非重心点 $u$ ，有 $wss(v) &gt; \\frac 2 n~ (v \\in son_v) $ ，那向 $v$ 移动会使 $dis$ 减少 $siz_u(v)-(n-siz_u(v)=2siz_u(v)-n&gt;0$ ，结论得证。 </p>\n<h5 id=\"求法：\"><a href=\"#求法：\" class=\"headerlink\" title=\"求法：\"></a>求法：</h5><p>根据定义以及引理1即可</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","excerpt":"","more":"<h1 id=\"点分治-amp-边分治\"><a href=\"#点分治-amp-边分治\" class=\"headerlink\" title=\"点分治&amp;边分治\"></a>点分治&amp;边分治</h1><h2 id=\"点分治\"><a href=\"#点分治\" class=\"headerlink\" title=\"点分治\"></a>点分治</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p><a href=\"https://www.luogu.com.cn/problem/P3806\">P3806</a></p>\n<p>题意：给定一颗具有 $n$ 个节点的树，边上有权值，一共给定 $m$ 次询问，每次询问给定 $k$，要求求出树上距离为 $k$ 的点对是否存在。</p>\n<p>树上任意两点的路径是可以分为两条从一个节点到其某个祖先节点的路径。考虑递归到节点 $i$ ，对于此节点，为了进行统计，可以划分为两个部分，一种是经过 $i$ 号节点，另一种是没有经过 $i$ 号节点，很明显没有经过 $i$ 号节点的路径一定在 $i$ 号节点某个儿子的子树内，可以进行递归处理，接下来考虑如何处理，很明显经过 $i$ 号节点的路径一定是经过两个儿子的，定义 $dis_b$ 表示 $b$ 号节点到 $i$ 的距离，很明显这是一条树上从一个节点到其某个祖先节点的路径，我们要找的是二元组 $(a,b)$ ，使得有 $dis_a + dis_b =k $ ，这样直接处理是 $O(n^2)$ ，但是可以开数组 $tf_b$ 表示是否存在 $v$ 使得 $dis_v=b$ 。</p>\n<h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3><p>很明显每一层递归，设以 $i$ 节点为根的子树大小为 $siz_i$ ，很明显每次递归是 $O(siz_i \\times k)$ ，总时间复杂度不难得出，设树深度为 $h$ ，则时间复杂度为 $O(nhk)$ 。</p>\n<p>这个时间复杂度依赖于数据，深度最坏可能达到 $n$ ，于是最坏时间复杂度变成了 $O(n^2k)$。</p>\n<p>所以是否可以适当变换树的结构使得深度可以减小到 $log_n$ 呢？</p>\n<h3 id=\"引入重心\"><a href=\"#引入重心\" class=\"headerlink\" title=\"引入重心\"></a>引入重心</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>$log$ 的时间复杂度关键在于分成一半，如果可以在递归过程中更换一个根节点，即可，因为这样更改根节点实际上只是更改了一条边，也就是从原来的根节点到他的父亲的边，所以子树内点间距离不会改变，所以怎么选呢？分成一半，在于相等，如果能确保所有儿子的子树大小尽可能相等，即可，换句话说也就是子树大小的最大值最小，注意这里讨论无向边，可以理解为以这个节点作为根节点的时候，求出一个 $W_i$ 是 $\\max(siz_j)~{j\\in son_i}$ ，求出最小的 $W_i$ ，这个点即为重心。</p>\n<p>$mss(u)$ 表示 $u$ 的最大子树大小。</p>\n<p>形式化的说，找到一个 $u$ 使得 $mss(u)$ 最小。</p>\n<h4 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h4><h5 id=\"引理1：\"><a href=\"#引理1：\" class=\"headerlink\" title=\"引理1：\"></a>引理1：</h5><h6 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>某个树的重心一定满足他的最大子树大小不大于整棵树的一半，反命题同样成立。</p>\n<h6 id=\"论证：\"><a href=\"#论证：\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>充分性：</p>\n<p>$siz_u(v)$ 表示以 $u$ 为根，$v$ 子树大小。</p>\n<p>$mss(u)$ 表示 $u$ 的最大子树大小。</p>\n<p>反证法证明，$u$ 为树的重心，假设存在与他相邻的一个节点 $v$ 满足 $siz_u(v)&gt;\\frac n 2$ ，于是有 $siz_v(u)=n-siz_u(v)&lt; \\frac n 2 $ ，于是 $siz_v(u) &lt;siz_u(v) =mss(u)$ ，因为 $siz_u(v)=1+\\sum siz_v(w) ~(w\\in son_v)$，所以有 $siz_v(w)&lt;siz_u(v) ~ (w\\in son_v)$ ,</p>\n<p>推出 $mss(v)&lt;siz_u(v)=mss(u)$ ，与重心定义不符。</p>\n<p> 必要性：</p>\n<p>如果 $mss(u) &lt; \\frac 2 n$ ，则说明对于每个儿子$v$都存在 $siz_u(v) &lt; \\frac 2 n$ ，于是有 $\\sum siz_v(w) &lt; \\frac 2 n ~(w \\in son_v ~\\&amp;~ w \\neq u )$ ，可以推出$siz_v(w) &lt; \\frac 2 n (w \\in son_v <del>\\&amp;</del> w \\neq u)$。</p>\n<h5 id=\"引理2：\"><a href=\"#引理2：\" class=\"headerlink\" title=\"引理2：\"></a>引理2：</h5><h6 id=\"结论：-1\"><a href=\"#结论：-1\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>如果一棵树有两个重心，则这两个重心一定相邻，并且树有偶数个节点，可以被划分为两个大小相等的分支，每个分支各自包含一个重心。</p>\n<h6 id=\"论证：-1\"><a href=\"#论证：-1\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>很明显对于两个重心 $u,v$ 有 $mss(u)=mss(v)$，$u$ 的最大子树肯定包含 $v$ ，假设法证明，假设 $w$ 是 $u$ 的最大子树，则有 $mss(u)=siz_u(w)&lt;siz_v(u)$ ，很明显 $siz_v(u) \\leq mss(v) $ ，则有 $mss(u)&lt;mss(v)$，矛盾。</p>\n<p>设 $u$ 到 $v$ 经过 $k$ 个中间节点，于是有 $wss(u)=siz_u(v)=k+mss(v)$，明显有 $k=0$。</p>\n<p>因为 $siz_u(v)=siz_v(u)$ ，又因为 $siz_u(v)+siz_v(u)=n$ ，所以 $siz_u(v)=siz_v(u)=\\frac 2 n $ ，结论不证自明。</p>\n<h5 id=\"引理3：\"><a href=\"#引理3：\" class=\"headerlink\" title=\"引理3：\"></a>引理3：</h5><h6 id=\"结论：-2\"><a href=\"#结论：-2\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>树至少一个重心，至多有两个重心。</p>\n<h6 id=\"论证：-2\"><a href=\"#论证：-2\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>求重心在做求最小值操作，肯定存在最小值。不可能存在三个重心，因为他们两两相邻，会形成环，树怎么可能有环？</p>\n<h5 id=\"引理4：\"><a href=\"#引理4：\" class=\"headerlink\" title=\"引理4：\"></a>引理4：</h5><h6 id=\"结论：-3\"><a href=\"#结论：-3\" class=\"headerlink\" title=\"结论：\"></a>结论：</h6><p>假设树上所有边权为 $1$，则记 $dis_i $ 表示所有节点到 $i$ 号节点的距离和，则重心 $u$ 的 $dis_u$ 最小，反命题成立。</p>\n<h6 id=\"论证：-3\"><a href=\"#论证：-3\" class=\"headerlink\" title=\"论证：\"></a>论证：</h6><p>很明显对于非重心点 $u$ ，有 $wss(v) &gt; \\frac 2 n~ (v \\in son_v) $ ，那向 $v$ 移动会使 $dis$ 减少 $siz_u(v)-(n-siz_u(v)=2siz_u(v)-n&gt;0$ ，结论得证。 </p>\n<h5 id=\"求法：\"><a href=\"#求法：\" class=\"headerlink\" title=\"求法：\"></a>求法：</h5><p>根据定义以及引理1即可</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"多项式傅里叶变换全家桶","date":"2023-03-15T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n卷积：$h_i=\\sum _{j=0}^{i}f_j \\times g_{i-j}$，其中 $h_i$ 是多项式 $H$ 的 $i$ 次项系数。其实就是多项式乘法。\n\n# FFT（快速傅里叶变换）\n\n## 思想\n\n直接朴素乘会导致太慢了，时间复杂度直逼 $\\mathcal{O}(n^2)$，仍然停留在多项式的系数表达式太浅薄了，可以尝试一下点值表达式。\n\n对于一个有 $n$ 项的多项式，只要取不同的 $n$ 个值即可确定这个多项式，如果直接把两个多项式同时取 $n$ 个值，再把相同 $x$ 值得到的结果相乘，最后转换为系数表达，时间复杂度不会有任何改进，所以可以从取值的方面来下功夫。\n\n## 前置知识\n\n##### 1. 虚数：定义虚数单位 $i$ ，保证 $i^2=-1$，则可以把一个虚数定义为 $a+bi$，其中 $a,b$ 是实数。\n\n##### 2. 数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\n\n##### 3. 模长、幅角：接下来以 $(x,y)$ 代表从 $(0,0)$ 到 $(x,y)$ 的向量，模长记为 $|(x,y)|$ 为 $(x,y)$ 到 $(0,0)$ 的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\n\n![](E:\\1.PNG)\n\n##### 3. 虚数的运算：\n\n&emsp;&emsp; 加减法直接把实部和虚部分别相加即可。\n\n\n\n\n&emsp;&emsp; 乘法在代数意义上的运算：$(a+bi)\\times(c+di)$=$ac+adi+bci-bd$=$(ac-bd)+(ad+bc)i$\n\n\n\n\n&emsp;&emsp; 几何意义：幅角相加，模长相乘。\n\n##### 4.单位根\n\n&emsp;&emsp; 定义 $\\omega_n$ 为 $\\omega_n^n=1$，很容易推出其中一个单位根为模长为1，幅角为$360/n$，很容易想到这个数自乘 $n$ 次，旋转 $360$度，与正实轴重合，模长为1，$\\omega_n^k$也满足${(\\omega_n^k)}^n=1$，证明同理。\n\n##### 5.单位根性质\n\n&emsp;&emsp; $\\omega_n^k=\\omega_{n/2}^{k/2}$ ，证明：$\\omega_n^k$为模长为1，幅角为$\\frac{360k}{n}$度，$\\omega_{n/2}^{k/2}$也是一样的。\n\n&emsp;&emsp; $\\omega_n^{k}=-\\omega_n^{k+n/2}$, 证明：多转了180度，所以就是相反数。\n\n&emsp;&emsp; $\\omega_n^0=\\omega_n^n=1$，由定义得。\n\n&emsp;&emsp; $\\omega_n^{k}=\\omega_n^{n+k}$，证明：转360度转回来了。\n\n## 正向FFT（系数到点值）\n\n可以代入所有的单位根，为了统一计算，把所有的多项式补全到 $2^k$，其中k是满足 $2^k \\leq n+m+1$的最小值。高次项全部补0即可。\n\n$A(x)=(a_0+a_1x+a_2x^2+...+a_{n-1}x^{n-1})$\n\n按照次数奇偶性分组，$A(x)=(a_0+a_2x^2+...+a_{n-2}x^{n-2})+(a_1x+a_3x^3+...+a_{n-1}x^{n-1})$\n\n继续定义 B(x)=a_0+a_2x+a_4x^2+...+a_{n-2}x^{(n-2)/2}$\n\n$C(x)=a_1+a_3x+a_5x^2+...+a_{n-1}x^{(n-2)/2}$\n\n则 $A(x)=B(x^2)+xC(x^2)$\n\n将 $\\omega_n^k$ 代入原式得 $A(\\omega_n^k)=B(\\omega_n^{2k})+\\omega_n^kC(\\omega_n^{2k})$，因为相比原式项数减半所以把 $\\omega_n^{2k}$ 化为 $\\omega_{n/2}^k$得 $A(\\omega_n^k)=B(\\omega_{n/2}^k)+\\omega_n^kC(\\omega_{n/2}^k)$\n\n$B,C$递归处理即可。\n\n## IFFT（逆变换）\n\n上面算出来了点值表示法，如何转成系数表达式捏。\n\n设原多项式的点值表达式在 $\\omega_n^k(0 \\leq k<n)$ 得到 $y_0,y_1,...,y_{n-1}$\n\n设多项式 $D(x)=y_0+y_1x+y_2x^2+y_3x^3+...y_{n-1}x^{n-1}$。\n\n设在 $\\omega_n^{-k}(0 \\leq k<n)$的 点值表达式是 $z_0,z_1,...,z_{n-1}$。\n\n可证得$c_k=\\sum_{i=0}^{n-1}a_j(\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i)$\n\n核心的就是$\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i$，设$S(x)=\\sum^{n-1}_{i=0}x^i$\n\n易证 $S(x)=\\frac {1-1}{w_n^k-1}$\n\n当$w_n^k!=1$时，$S(x)=0$\n\n当$w_n^k=1$时，$S(x)=n$\n\n代入得$c_k=na_k$\n\n所以 $a_k=c_k/n$\n\n## 优化\n\n递归实现容易爆栈，而且极其慢，考虑优化为迭代实现。\n\n优化为迭代实现的瓶颈在于如何划分系数，不过可以非常简单的把需要合并在一起的项放在一起。\n\n只有一项的多项式，点值表达式和系数表达式是一样的。\n\n因为上述按奇偶性分开，其实是按照下标二进制表达从后往前来比较的来划分的，相同的会放在一起，所以可以直接按照下表二进制反转的顺序来依次合并。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <complex>\n#include <cmath>\n#define int long long\ninline int read();\nconst double Pi=acos(-1.0);\nstd::complex <double> f[8000005],g[8000005],ans[8000005];\nint r[8000005];\nvoid fft(std::complex <double> *f,int limit,int type);\nsigned main(){\n    int n=read(),m;\n\n    std::complex <double> temp=f[0];\n    m=read();\n    int limit=1,k=0;\n    while(limit<(n+m+2)){\n        limit=(limit)<<1;\n        k++;\n    }\n    for(int i=0;i<=n;i++){\n        f[i]=read();\n    }\n    for(int i=0;i<=m;i++){\n        g[i]=read();\n    }\n    for(int i=0;i<=limit;i++){\n        r[i]=(r[i>>1]>>1)|((i&1)<<(k-1));\n    }\n    fft(f,limit,1);\n    fft(g,limit,1);\n    for(int i=0;i<=limit;i++){\n        f[i]*=g[i];\n    }\n    fft(f,limit,-1);\n    for(int i=0;i<=n+m;i++){\n        printf(\"%lld \",(int)(f[i].real()/(limit)+0.5));\n    }\n    return 0;\n}\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        c=='-'?f=-1:1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+(c^48);\n        c=getchar();\n    }\n    return f*x;\n}\nvoid fft(std::complex <double> *f,int limit,int type){\n    for(int i=0;i<=limit;i++){\n        if(i<r[i]){\n            swap(f[i],f[r[i]]);\n        }\n    }\n    for(int length=2;length<=limit;length=(length<<1)){\n        std::complex <double> Wn (std::cos(Pi*2/length),std::sin(type*Pi*2/length));\n        for(int i=0;i<=limit;i+=length){\n            std::complex <double> wn1(1,0);\n            for(int k=i;k<length/2+i;k++,wn1=wn1*Wn){\n                std::complex <double> x=f[k],y=f[k+length/2]*wn1;\n                f[k]=x+y;\n                f[k+length/2]=x-y;\n            }\n        }\n    }\n    return ;\n}\n```\n\n# NTT (快速数论变换)\n\n## 思想\n\n因为FFT涉及到复杂的复数运算，不仅很慢，不能取模，甚至有精度问题。\n\n所有如果在取模意义下，也可以用与FFT所利用的的单位根相似的原根。\n\n## 数学知识\n\n原根的定义理所当然，定义一个数 $n$ 的原根为 $g$ ，是满足$g^n \\equiv 1(mod~p)$的最小整数。\n\n原根满足 $g^i(1 \\leq i \\leq n)$ 模 $p$ 两两不同。\n\n一般取模数为 $998244353$ ，其原根是 $3$。\n\n对于代值的数的表示仍然是$\\omega_n$：\n\n$w_n \\equiv g^{\\frac{p-1}{n}} (mod~p)$\n\n$\\omega_n^k=\\omega_{n/2}^{k/2}$ 。\n\n$\\omega_n^{k}=-\\omega_n^{k+n/2}$。\n\n$\\omega_n^0=\\omega_n^n=1$。\n\n$\\omega_n^{k}=\\omega_n^{n+k}$。\n\n## 直接把FFT的代值改成NTT\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#define int long long\ninline int read();\nint a[8000005],b[8000005];\nint li=1,k=0;\nint r[8000005];\nconst int mod=998244353;\nconst int g=3;\nconst int g2=332748118;\nvoid print(int x){\n    register char s[20];\n    register int i=0;\n    if(x<0){\n        x=-x;\n        putchar('-');\n    }\n    if(x==0){\n        putchar('0');\n        return;\n    }\n    while(x){\n        s[i++]=x%10;\n        x/=10;\n    }\n    while(i){\n        putchar(s[--i]+'0');\n    }\n    return;\n}\ninline int fast_power(int a, int k) //快速幂，a为底数，k为指数\n{\n    register int res = 1;\n    while (k)\n    {\n        if (k & 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        k >>= 1;\n    }\n    return res;\n}\ninline void ntt(int *a,int type){\n    for(register int i=0;i<=li;i++){\n        if(i<r[i]){\n            std::swap(a[i],a[r[i]]);\n        }\n    }\n    int gn;\n    for(register int i=1;i<li;i<<=1){\n        gn=fast_power(type?g:g2,(mod-1)/(i<<1));\n        for(register int j=0;j<li;j+=(i<<1)){\n            int g0=1;\n            for(int k=0;k<i;k++,g0=(g0*gn)%mod){\n                int x=a[j+k];\n                int y=(a[i+j+k]*g0)%mod;\n                a[j+k]=(x+y)%mod;\n                a[i+j+k]=(x-y+mod)%mod;\n            }\n        }\n    }\n    return ;\n}\nsigned main(){\n    #ifdef ONLINE_JUDGE\n    #else\n    // freopen(\".in\",\"r\",stdin);\n    // freopen(\".out\",\"w\",stdout);\n    #endif\n    int n=read(),m=read();\n    for(register int i=0;i<=n;i++){\n        a[i]=read();\n    }\n    for(register int i=0;i<=m;i++){\n        b[i]=read();\n    }\n    while(li<(n+m+2)){\n        li=(li)<<1;\n        k++;\n    }\n    for(register int i=0;i<=li;i++){\n        r[i]=(r[i>>1]>>1)|((i&1)<<(k-1));\n    }\n    ntt(a,1);\n    ntt(b,1);\n    for(register int i=0;i<=li;i++){\n        a[i]*=b[i];\n        a[i]%=mod;\n    }\n    ntt(a,0);\n    long long inv=fast_power(li,mod-2);\n    for(register int i=0;i<=n+m;i++){\n        print((a[i]*inv)%mod);\n        putchar(' ');\n    }\n    return 0;\n}\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        c=='-'?f=-1:1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+(c^48);\n        c=getchar();\n    }\n    return f*x;\n}\n/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n    1:\n        In:\n\n        Out:\nMore:\n\n*/\n```\n\n# 扩展题目\n","source":"_posts/0003.md","raw":"---\ntitle: 多项式傅里叶变换全家桶\ndate: 2023-03-16\ntags: [OI,多项式]\ntoc: true\nmathjax: true\n---\n\n卷积：$h_i=\\sum _{j=0}^{i}f_j \\times g_{i-j}$，其中 $h_i$ 是多项式 $H$ 的 $i$ 次项系数。其实就是多项式乘法。\n\n# FFT（快速傅里叶变换）\n\n## 思想\n\n直接朴素乘会导致太慢了，时间复杂度直逼 $\\mathcal{O}(n^2)$，仍然停留在多项式的系数表达式太浅薄了，可以尝试一下点值表达式。\n\n对于一个有 $n$ 项的多项式，只要取不同的 $n$ 个值即可确定这个多项式，如果直接把两个多项式同时取 $n$ 个值，再把相同 $x$ 值得到的结果相乘，最后转换为系数表达，时间复杂度不会有任何改进，所以可以从取值的方面来下功夫。\n\n## 前置知识\n\n##### 1. 虚数：定义虚数单位 $i$ ，保证 $i^2=-1$，则可以把一个虚数定义为 $a+bi$，其中 $a,b$ 是实数。\n\n##### 2. 数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\n\n##### 3. 模长、幅角：接下来以 $(x,y)$ 代表从 $(0,0)$ 到 $(x,y)$ 的向量，模长记为 $|(x,y)|$ 为 $(x,y)$ 到 $(0,0)$ 的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\n\n![](E:\\1.PNG)\n\n##### 3. 虚数的运算：\n\n&emsp;&emsp; 加减法直接把实部和虚部分别相加即可。\n\n\n\n\n&emsp;&emsp; 乘法在代数意义上的运算：$(a+bi)\\times(c+di)$=$ac+adi+bci-bd$=$(ac-bd)+(ad+bc)i$\n\n\n\n\n&emsp;&emsp; 几何意义：幅角相加，模长相乘。\n\n##### 4.单位根\n\n&emsp;&emsp; 定义 $\\omega_n$ 为 $\\omega_n^n=1$，很容易推出其中一个单位根为模长为1，幅角为$360/n$，很容易想到这个数自乘 $n$ 次，旋转 $360$度，与正实轴重合，模长为1，$\\omega_n^k$也满足${(\\omega_n^k)}^n=1$，证明同理。\n\n##### 5.单位根性质\n\n&emsp;&emsp; $\\omega_n^k=\\omega_{n/2}^{k/2}$ ，证明：$\\omega_n^k$为模长为1，幅角为$\\frac{360k}{n}$度，$\\omega_{n/2}^{k/2}$也是一样的。\n\n&emsp;&emsp; $\\omega_n^{k}=-\\omega_n^{k+n/2}$, 证明：多转了180度，所以就是相反数。\n\n&emsp;&emsp; $\\omega_n^0=\\omega_n^n=1$，由定义得。\n\n&emsp;&emsp; $\\omega_n^{k}=\\omega_n^{n+k}$，证明：转360度转回来了。\n\n## 正向FFT（系数到点值）\n\n可以代入所有的单位根，为了统一计算，把所有的多项式补全到 $2^k$，其中k是满足 $2^k \\leq n+m+1$的最小值。高次项全部补0即可。\n\n$A(x)=(a_0+a_1x+a_2x^2+...+a_{n-1}x^{n-1})$\n\n按照次数奇偶性分组，$A(x)=(a_0+a_2x^2+...+a_{n-2}x^{n-2})+(a_1x+a_3x^3+...+a_{n-1}x^{n-1})$\n\n继续定义 B(x)=a_0+a_2x+a_4x^2+...+a_{n-2}x^{(n-2)/2}$\n\n$C(x)=a_1+a_3x+a_5x^2+...+a_{n-1}x^{(n-2)/2}$\n\n则 $A(x)=B(x^2)+xC(x^2)$\n\n将 $\\omega_n^k$ 代入原式得 $A(\\omega_n^k)=B(\\omega_n^{2k})+\\omega_n^kC(\\omega_n^{2k})$，因为相比原式项数减半所以把 $\\omega_n^{2k}$ 化为 $\\omega_{n/2}^k$得 $A(\\omega_n^k)=B(\\omega_{n/2}^k)+\\omega_n^kC(\\omega_{n/2}^k)$\n\n$B,C$递归处理即可。\n\n## IFFT（逆变换）\n\n上面算出来了点值表示法，如何转成系数表达式捏。\n\n设原多项式的点值表达式在 $\\omega_n^k(0 \\leq k<n)$ 得到 $y_0,y_1,...,y_{n-1}$\n\n设多项式 $D(x)=y_0+y_1x+y_2x^2+y_3x^3+...y_{n-1}x^{n-1}$。\n\n设在 $\\omega_n^{-k}(0 \\leq k<n)$的 点值表达式是 $z_0,z_1,...,z_{n-1}$。\n\n可证得$c_k=\\sum_{i=0}^{n-1}a_j(\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i)$\n\n核心的就是$\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i$，设$S(x)=\\sum^{n-1}_{i=0}x^i$\n\n易证 $S(x)=\\frac {1-1}{w_n^k-1}$\n\n当$w_n^k!=1$时，$S(x)=0$\n\n当$w_n^k=1$时，$S(x)=n$\n\n代入得$c_k=na_k$\n\n所以 $a_k=c_k/n$\n\n## 优化\n\n递归实现容易爆栈，而且极其慢，考虑优化为迭代实现。\n\n优化为迭代实现的瓶颈在于如何划分系数，不过可以非常简单的把需要合并在一起的项放在一起。\n\n只有一项的多项式，点值表达式和系数表达式是一样的。\n\n因为上述按奇偶性分开，其实是按照下标二进制表达从后往前来比较的来划分的，相同的会放在一起，所以可以直接按照下表二进制反转的顺序来依次合并。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <complex>\n#include <cmath>\n#define int long long\ninline int read();\nconst double Pi=acos(-1.0);\nstd::complex <double> f[8000005],g[8000005],ans[8000005];\nint r[8000005];\nvoid fft(std::complex <double> *f,int limit,int type);\nsigned main(){\n    int n=read(),m;\n\n    std::complex <double> temp=f[0];\n    m=read();\n    int limit=1,k=0;\n    while(limit<(n+m+2)){\n        limit=(limit)<<1;\n        k++;\n    }\n    for(int i=0;i<=n;i++){\n        f[i]=read();\n    }\n    for(int i=0;i<=m;i++){\n        g[i]=read();\n    }\n    for(int i=0;i<=limit;i++){\n        r[i]=(r[i>>1]>>1)|((i&1)<<(k-1));\n    }\n    fft(f,limit,1);\n    fft(g,limit,1);\n    for(int i=0;i<=limit;i++){\n        f[i]*=g[i];\n    }\n    fft(f,limit,-1);\n    for(int i=0;i<=n+m;i++){\n        printf(\"%lld \",(int)(f[i].real()/(limit)+0.5));\n    }\n    return 0;\n}\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        c=='-'?f=-1:1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+(c^48);\n        c=getchar();\n    }\n    return f*x;\n}\nvoid fft(std::complex <double> *f,int limit,int type){\n    for(int i=0;i<=limit;i++){\n        if(i<r[i]){\n            swap(f[i],f[r[i]]);\n        }\n    }\n    for(int length=2;length<=limit;length=(length<<1)){\n        std::complex <double> Wn (std::cos(Pi*2/length),std::sin(type*Pi*2/length));\n        for(int i=0;i<=limit;i+=length){\n            std::complex <double> wn1(1,0);\n            for(int k=i;k<length/2+i;k++,wn1=wn1*Wn){\n                std::complex <double> x=f[k],y=f[k+length/2]*wn1;\n                f[k]=x+y;\n                f[k+length/2]=x-y;\n            }\n        }\n    }\n    return ;\n}\n```\n\n# NTT (快速数论变换)\n\n## 思想\n\n因为FFT涉及到复杂的复数运算，不仅很慢，不能取模，甚至有精度问题。\n\n所有如果在取模意义下，也可以用与FFT所利用的的单位根相似的原根。\n\n## 数学知识\n\n原根的定义理所当然，定义一个数 $n$ 的原根为 $g$ ，是满足$g^n \\equiv 1(mod~p)$的最小整数。\n\n原根满足 $g^i(1 \\leq i \\leq n)$ 模 $p$ 两两不同。\n\n一般取模数为 $998244353$ ，其原根是 $3$。\n\n对于代值的数的表示仍然是$\\omega_n$：\n\n$w_n \\equiv g^{\\frac{p-1}{n}} (mod~p)$\n\n$\\omega_n^k=\\omega_{n/2}^{k/2}$ 。\n\n$\\omega_n^{k}=-\\omega_n^{k+n/2}$。\n\n$\\omega_n^0=\\omega_n^n=1$。\n\n$\\omega_n^{k}=\\omega_n^{n+k}$。\n\n## 直接把FFT的代值改成NTT\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#define int long long\ninline int read();\nint a[8000005],b[8000005];\nint li=1,k=0;\nint r[8000005];\nconst int mod=998244353;\nconst int g=3;\nconst int g2=332748118;\nvoid print(int x){\n    register char s[20];\n    register int i=0;\n    if(x<0){\n        x=-x;\n        putchar('-');\n    }\n    if(x==0){\n        putchar('0');\n        return;\n    }\n    while(x){\n        s[i++]=x%10;\n        x/=10;\n    }\n    while(i){\n        putchar(s[--i]+'0');\n    }\n    return;\n}\ninline int fast_power(int a, int k) //快速幂，a为底数，k为指数\n{\n    register int res = 1;\n    while (k)\n    {\n        if (k & 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        k >>= 1;\n    }\n    return res;\n}\ninline void ntt(int *a,int type){\n    for(register int i=0;i<=li;i++){\n        if(i<r[i]){\n            std::swap(a[i],a[r[i]]);\n        }\n    }\n    int gn;\n    for(register int i=1;i<li;i<<=1){\n        gn=fast_power(type?g:g2,(mod-1)/(i<<1));\n        for(register int j=0;j<li;j+=(i<<1)){\n            int g0=1;\n            for(int k=0;k<i;k++,g0=(g0*gn)%mod){\n                int x=a[j+k];\n                int y=(a[i+j+k]*g0)%mod;\n                a[j+k]=(x+y)%mod;\n                a[i+j+k]=(x-y+mod)%mod;\n            }\n        }\n    }\n    return ;\n}\nsigned main(){\n    #ifdef ONLINE_JUDGE\n    #else\n    // freopen(\".in\",\"r\",stdin);\n    // freopen(\".out\",\"w\",stdout);\n    #endif\n    int n=read(),m=read();\n    for(register int i=0;i<=n;i++){\n        a[i]=read();\n    }\n    for(register int i=0;i<=m;i++){\n        b[i]=read();\n    }\n    while(li<(n+m+2)){\n        li=(li)<<1;\n        k++;\n    }\n    for(register int i=0;i<=li;i++){\n        r[i]=(r[i>>1]>>1)|((i&1)<<(k-1));\n    }\n    ntt(a,1);\n    ntt(b,1);\n    for(register int i=0;i<=li;i++){\n        a[i]*=b[i];\n        a[i]%=mod;\n    }\n    ntt(a,0);\n    long long inv=fast_power(li,mod-2);\n    for(register int i=0;i<=n+m;i++){\n        print((a[i]*inv)%mod);\n        putchar(' ');\n    }\n    return 0;\n}\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        c=='-'?f=-1:1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+(c^48);\n        c=getchar();\n    }\n    return f*x;\n}\n/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n    1:\n        In:\n\n        Out:\nMore:\n\n*/\n```\n\n# 扩展题目\n","slug":"0003","published":1,"updated":"2024-01-09T10:43:08.366Z","_id":"clr62ttja0003xdaybz9746ng","comments":1,"layout":"post","photos":[],"content":"<p>卷积：$h_i=\\sum _{j=0}^{i}f_j \\times g_{i-j}$，其中 $h_i$ 是多项式 $H$ 的 $i$ 次项系数。其实就是多项式乘法。</p>\n<h1 id=\"FFT（快速傅里叶变换）\"><a href=\"#FFT（快速傅里叶变换）\" class=\"headerlink\" title=\"FFT（快速傅里叶变换）\"></a>FFT（快速傅里叶变换）</h1><h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>直接朴素乘会导致太慢了，时间复杂度直逼 $\\mathcal{O}(n^2)$，仍然停留在多项式的系数表达式太浅薄了，可以尝试一下点值表达式。</p>\n<p>对于一个有 $n$ 项的多项式，只要取不同的 $n$ 个值即可确定这个多项式，如果直接把两个多项式同时取 $n$ 个值，再把相同 $x$ 值得到的结果相乘，最后转换为系数表达，时间复杂度不会有任何改进，所以可以从取值的方面来下功夫。</p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h5 id=\"1-虚数：定义虚数单位-i-，保证-i-2-1-，则可以把一个虚数定义为-a-bi-，其中-a-b-是实数。\"><a href=\"#1-虚数：定义虚数单位-i-，保证-i-2-1-，则可以把一个虚数定义为-a-bi-，其中-a-b-是实数。\" class=\"headerlink\" title=\"1. 虚数：定义虚数单位 $i$ ，保证 $i^2=-1$，则可以把一个虚数定义为 $a+bi$，其中 $a,b$ 是实数。\"></a>1. 虚数：定义虚数单位 $i$ ，保证 $i^2=-1$，则可以把一个虚数定义为 $a+bi$，其中 $a,b$ 是实数。</h5><h5 id=\"2-数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\"><a href=\"#2-数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\" class=\"headerlink\" title=\"2. 数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\"></a>2. 数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。</h5><h5 id=\"3-模长、幅角：接下来以-x-y-代表从-0-0-到-x-y-的向量，模长记为-x-y-为-x-y-到-0-0-的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\"><a href=\"#3-模长、幅角：接下来以-x-y-代表从-0-0-到-x-y-的向量，模长记为-x-y-为-x-y-到-0-0-的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\" class=\"headerlink\" title=\"3. 模长、幅角：接下来以 $(x,y)$ 代表从 $(0,0)$ 到 $(x,y)$ 的向量，模长记为 $|(x,y)|$ 为 $(x,y)$ 到 $(0,0)$ 的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\"></a>3. 模长、幅角：接下来以 $(x,y)$ 代表从 $(0,0)$ 到 $(x,y)$ 的向量，模长记为 $|(x,y)|$ 为 $(x,y)$ 到 $(0,0)$ 的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。</h5><p><img src=\"E:\\1.PNG\" alt=\"\"></p>\n<h5 id=\"3-虚数的运算：\"><a href=\"#3-虚数的运算：\" class=\"headerlink\" title=\"3. 虚数的运算：\"></a>3. 虚数的运算：</h5><p>&emsp;&emsp; 加减法直接把实部和虚部分别相加即可。</p>\n<p>&emsp;&emsp; 乘法在代数意义上的运算：$(a+bi)\\times(c+di)$=$ac+adi+bci-bd$=$(ac-bd)+(ad+bc)i$</p>\n<p>&emsp;&emsp; 几何意义：幅角相加，模长相乘。</p>\n<h5 id=\"4-单位根\"><a href=\"#4-单位根\" class=\"headerlink\" title=\"4.单位根\"></a>4.单位根</h5><p>&emsp;&emsp; 定义 $\\omega_n$ 为 $\\omega_n^n=1$，很容易推出其中一个单位根为模长为1，幅角为$360/n$，很容易想到这个数自乘 $n$ 次，旋转 $360$度，与正实轴重合，模长为1，$\\omega_n^k$也满足${(\\omega_n^k)}^n=1$，证明同理。</p>\n<h5 id=\"5-单位根性质\"><a href=\"#5-单位根性质\" class=\"headerlink\" title=\"5.单位根性质\"></a>5.单位根性质</h5><p>&emsp;&emsp; $\\omega_n^k=\\omega_{n/2}^{k/2}$ ，证明：$\\omega_n^k$为模长为1，幅角为$\\frac{360k}{n}$度，$\\omega_{n/2}^{k/2}$也是一样的。</p>\n<p>&emsp;&emsp; $\\omega_n^{k}=-\\omega_n^{k+n/2}$, 证明：多转了180度，所以就是相反数。</p>\n<p>&emsp;&emsp; $\\omega_n^0=\\omega_n^n=1$，由定义得。</p>\n<p>&emsp;&emsp; $\\omega_n^{k}=\\omega_n^{n+k}$，证明：转360度转回来了。</p>\n<h2 id=\"正向FFT（系数到点值）\"><a href=\"#正向FFT（系数到点值）\" class=\"headerlink\" title=\"正向FFT（系数到点值）\"></a>正向FFT（系数到点值）</h2><p>可以代入所有的单位根，为了统一计算，把所有的多项式补全到 $2^k$，其中k是满足 $2^k \\leq n+m+1$的最小值。高次项全部补0即可。</p>\n<p>$A(x)=(a_0+a_1x+a_2x^2+…+a_{n-1}x^{n-1})$</p>\n<p>按照次数奇偶性分组，$A(x)=(a_0+a_2x^2+…+a_{n-2}x^{n-2})+(a_1x+a_3x^3+…+a_{n-1}x^{n-1})$</p>\n<p>继续定义 B(x)=a_0+a_2x+a_4x^2+…+a_{n-2}x^{(n-2)/2}$</p>\n<p>$C(x)=a_1+a_3x+a_5x^2+…+a_{n-1}x^{(n-2)/2}$</p>\n<p>则 $A(x)=B(x^2)+xC(x^2)$</p>\n<p>将 $\\omega_n^k$ 代入原式得 $A(\\omega_n^k)=B(\\omega_n^{2k})+\\omega_n^kC(\\omega_n^{2k})$，因为相比原式项数减半所以把 $\\omega_n^{2k}$ 化为 $\\omega_{n/2}^k$得 $A(\\omega_n^k)=B(\\omega_{n/2}^k)+\\omega_n^kC(\\omega_{n/2}^k)$</p>\n<p>$B,C$递归处理即可。</p>\n<h2 id=\"IFFT（逆变换）\"><a href=\"#IFFT（逆变换）\" class=\"headerlink\" title=\"IFFT（逆变换）\"></a>IFFT（逆变换）</h2><p>上面算出来了点值表示法，如何转成系数表达式捏。</p>\n<p>设原多项式的点值表达式在 $\\omega_n^k(0 \\leq k&lt;n)$ 得到 $y_0,y_1,…,y_{n-1}$</p>\n<p>设多项式 $D(x)=y_0+y_1x+y_2x^2+y_3x^3+…y_{n-1}x^{n-1}$。</p>\n<p>设在 $\\omega_n^{-k}(0 \\leq k&lt;n)$的 点值表达式是 $z_0,z_1,…,z_{n-1}$。</p>\n<p>可证得$c_k=\\sum_{i=0}^{n-1}a_j(\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i)$</p>\n<p>核心的就是$\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i$，设$S(x)=\\sum^{n-1}_{i=0}x^i$</p>\n<p>易证 $S(x)=\\frac {1-1}{w_n^k-1}$</p>\n<p>当$w_n^k!=1$时，$S(x)=0$</p>\n<p>当$w_n^k=1$时，$S(x)=n$</p>\n<p>代入得$c_k=na_k$</p>\n<p>所以 $a_k=c_k/n$</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>递归实现容易爆栈，而且极其慢，考虑优化为迭代实现。</p>\n<p>优化为迭代实现的瓶颈在于如何划分系数，不过可以非常简单的把需要合并在一起的项放在一起。</p>\n<p>只有一项的多项式，点值表达式和系数表达式是一样的。</p>\n<p>因为上述按奇偶性分开，其实是按照下标二进制表达从后往前来比较的来划分的，相同的会放在一起，所以可以直接按照下表二进制反转的顺序来依次合并。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;complex></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> Pi<span class=\"token operator\">=</span><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> temp<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> limit<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>limit<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span>m<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        limit<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">+</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld \"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>length<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>length<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">Wn</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>Pi<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">*</span>Pi<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">wn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>wn1<span class=\"token operator\">=</span>wn1<span class=\"token operator\">*</span>Wn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> x<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>wn1<span class=\"token punctuation\">;</span>\n                f<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n                f<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"NTT-快速数论变换\"><a href=\"#NTT-快速数论变换\" class=\"headerlink\" title=\"NTT (快速数论变换)\"></a>NTT (快速数论变换)</h1><h2 id=\"思想-1\"><a href=\"#思想-1\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>因为FFT涉及到复杂的复数运算，不仅很慢，不能取模，甚至有精度问题。</p>\n<p>所有如果在取模意义下，也可以用与FFT所利用的的单位根相似的原根。</p>\n<h2 id=\"数学知识\"><a href=\"#数学知识\" class=\"headerlink\" title=\"数学知识\"></a>数学知识</h2><p>原根的定义理所当然，定义一个数 $n$ 的原根为 $g$ ，是满足$g^n \\equiv 1(mod~p)$的最小整数。</p>\n<p>原根满足 $g^i(1 \\leq i \\leq n)$ 模 $p$ 两两不同。</p>\n<p>一般取模数为 $998244353$ ，其原根是 $3$。</p>\n<p>对于代值的数的表示仍然是$\\omega_n$：</p>\n<p>$w_n \\equiv g^{\\frac{p-1}{n}} (mod~p)$</p>\n<p>$\\omega_n^k=\\omega_{n/2}^{k/2}$ 。</p>\n<p>$\\omega_n^{k}=-\\omega_n^{k+n/2}$。</p>\n<p>$\\omega_n^0=\\omega_n^n=1$。</p>\n<p>$\\omega_n^{k}=\\omega_n^{n+k}$。</p>\n<h2 id=\"直接把FFT的代值改成NTT\"><a href=\"#直接把FFT的代值改成NTT\" class=\"headerlink\" title=\"直接把FFT的代值改成NTT\"></a>直接把FFT的代值改成NTT</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> li<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">=</span><span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> g<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> g2<span class=\"token operator\">=</span><span class=\"token number\">332748118</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">/=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fast_power</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\">//快速幂，a为底数，k为指数</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> gn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        gn<span class=\"token operator\">=</span><span class=\"token function\">fast_power</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">?</span>g<span class=\"token operator\">:</span>g2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>li<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> g0<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>g0<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>g0<span class=\"token operator\">*</span>gn<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>g0<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>y<span class=\"token operator\">+</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">ONLINE_JUDGE</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n    <span class=\"token comment\">// freopen(\".in\",\"r\",stdin);</span>\n    <span class=\"token comment\">// freopen(\".out\",\"w\",stdout);</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>li<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span>m<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        li<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> inv<span class=\"token operator\">=</span><span class=\"token function\">fast_power</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">+</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n    1:\n        In:\n\n        Out:\nMore:\n\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"扩展题目\"><a href=\"#扩展题目\" class=\"headerlink\" title=\"扩展题目\"></a>扩展题目</h1>","excerpt":"","more":"<p>卷积：$h_i=\\sum _{j=0}^{i}f_j \\times g_{i-j}$，其中 $h_i$ 是多项式 $H$ 的 $i$ 次项系数。其实就是多项式乘法。</p>\n<h1 id=\"FFT（快速傅里叶变换）\"><a href=\"#FFT（快速傅里叶变换）\" class=\"headerlink\" title=\"FFT（快速傅里叶变换）\"></a>FFT（快速傅里叶变换）</h1><h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>直接朴素乘会导致太慢了，时间复杂度直逼 $\\mathcal{O}(n^2)$，仍然停留在多项式的系数表达式太浅薄了，可以尝试一下点值表达式。</p>\n<p>对于一个有 $n$ 项的多项式，只要取不同的 $n$ 个值即可确定这个多项式，如果直接把两个多项式同时取 $n$ 个值，再把相同 $x$ 值得到的结果相乘，最后转换为系数表达，时间复杂度不会有任何改进，所以可以从取值的方面来下功夫。</p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h5 id=\"1-虚数：定义虚数单位-i-，保证-i-2-1-，则可以把一个虚数定义为-a-bi-，其中-a-b-是实数。\"><a href=\"#1-虚数：定义虚数单位-i-，保证-i-2-1-，则可以把一个虚数定义为-a-bi-，其中-a-b-是实数。\" class=\"headerlink\" title=\"1. 虚数：定义虚数单位 $i$ ，保证 $i^2=-1$，则可以把一个虚数定义为 $a+bi$，其中 $a,b$ 是实数。\"></a>1. 虚数：定义虚数单位 $i$ ，保证 $i^2=-1$，则可以把一个虚数定义为 $a+bi$，其中 $a,b$ 是实数。</h5><h5 id=\"2-数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\"><a href=\"#2-数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\" class=\"headerlink\" title=\"2. 数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。\"></a>2. 数轴：定义一个平面直角坐标系，横轴为实轴，纵轴为虚轴，这个坐标系定义是复数平面，任意一个点都代表一个实数或虚数，横坐标为其实部，纵坐标为其虚部。</h5><h5 id=\"3-模长、幅角：接下来以-x-y-代表从-0-0-到-x-y-的向量，模长记为-x-y-为-x-y-到-0-0-的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\"><a href=\"#3-模长、幅角：接下来以-x-y-代表从-0-0-到-x-y-的向量，模长记为-x-y-为-x-y-到-0-0-的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\" class=\"headerlink\" title=\"3. 模长、幅角：接下来以 $(x,y)$ 代表从 $(0,0)$ 到 $(x,y)$ 的向量，模长记为 $|(x,y)|$ 为 $(x,y)$ 到 $(0,0)$ 的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。\"></a>3. 模长、幅角：接下来以 $(x,y)$ 代表从 $(0,0)$ 到 $(x,y)$ 的向量，模长记为 $|(x,y)|$ 为 $(x,y)$ 到 $(0,0)$ 的欧几里得距离，幅角定义为正实部逆时针旋转一个幅角即可与向量重合。</h5><p><img src=\"E:\\1.PNG\" alt=\"\"></p>\n<h5 id=\"3-虚数的运算：\"><a href=\"#3-虚数的运算：\" class=\"headerlink\" title=\"3. 虚数的运算：\"></a>3. 虚数的运算：</h5><p>&emsp;&emsp; 加减法直接把实部和虚部分别相加即可。</p>\n<p>&emsp;&emsp; 乘法在代数意义上的运算：$(a+bi)\\times(c+di)$=$ac+adi+bci-bd$=$(ac-bd)+(ad+bc)i$</p>\n<p>&emsp;&emsp; 几何意义：幅角相加，模长相乘。</p>\n<h5 id=\"4-单位根\"><a href=\"#4-单位根\" class=\"headerlink\" title=\"4.单位根\"></a>4.单位根</h5><p>&emsp;&emsp; 定义 $\\omega_n$ 为 $\\omega_n^n=1$，很容易推出其中一个单位根为模长为1，幅角为$360/n$，很容易想到这个数自乘 $n$ 次，旋转 $360$度，与正实轴重合，模长为1，$\\omega_n^k$也满足${(\\omega_n^k)}^n=1$，证明同理。</p>\n<h5 id=\"5-单位根性质\"><a href=\"#5-单位根性质\" class=\"headerlink\" title=\"5.单位根性质\"></a>5.单位根性质</h5><p>&emsp;&emsp; $\\omega_n^k=\\omega_{n/2}^{k/2}$ ，证明：$\\omega_n^k$为模长为1，幅角为$\\frac{360k}{n}$度，$\\omega_{n/2}^{k/2}$也是一样的。</p>\n<p>&emsp;&emsp; $\\omega_n^{k}=-\\omega_n^{k+n/2}$, 证明：多转了180度，所以就是相反数。</p>\n<p>&emsp;&emsp; $\\omega_n^0=\\omega_n^n=1$，由定义得。</p>\n<p>&emsp;&emsp; $\\omega_n^{k}=\\omega_n^{n+k}$，证明：转360度转回来了。</p>\n<h2 id=\"正向FFT（系数到点值）\"><a href=\"#正向FFT（系数到点值）\" class=\"headerlink\" title=\"正向FFT（系数到点值）\"></a>正向FFT（系数到点值）</h2><p>可以代入所有的单位根，为了统一计算，把所有的多项式补全到 $2^k$，其中k是满足 $2^k \\leq n+m+1$的最小值。高次项全部补0即可。</p>\n<p>$A(x)=(a_0+a_1x+a_2x^2+…+a_{n-1}x^{n-1})$</p>\n<p>按照次数奇偶性分组，$A(x)=(a_0+a_2x^2+…+a_{n-2}x^{n-2})+(a_1x+a_3x^3+…+a_{n-1}x^{n-1})$</p>\n<p>继续定义 B(x)=a_0+a_2x+a_4x^2+…+a_{n-2}x^{(n-2)/2}$</p>\n<p>$C(x)=a_1+a_3x+a_5x^2+…+a_{n-1}x^{(n-2)/2}$</p>\n<p>则 $A(x)=B(x^2)+xC(x^2)$</p>\n<p>将 $\\omega_n^k$ 代入原式得 $A(\\omega_n^k)=B(\\omega_n^{2k})+\\omega_n^kC(\\omega_n^{2k})$，因为相比原式项数减半所以把 $\\omega_n^{2k}$ 化为 $\\omega_{n/2}^k$得 $A(\\omega_n^k)=B(\\omega_{n/2}^k)+\\omega_n^kC(\\omega_{n/2}^k)$</p>\n<p>$B,C$递归处理即可。</p>\n<h2 id=\"IFFT（逆变换）\"><a href=\"#IFFT（逆变换）\" class=\"headerlink\" title=\"IFFT（逆变换）\"></a>IFFT（逆变换）</h2><p>上面算出来了点值表示法，如何转成系数表达式捏。</p>\n<p>设原多项式的点值表达式在 $\\omega_n^k(0 \\leq k&lt;n)$ 得到 $y_0,y_1,…,y_{n-1}$</p>\n<p>设多项式 $D(x)=y_0+y_1x+y_2x^2+y_3x^3+…y_{n-1}x^{n-1}$。</p>\n<p>设在 $\\omega_n^{-k}(0 \\leq k&lt;n)$的 点值表达式是 $z_0,z_1,…,z_{n-1}$。</p>\n<p>可证得$c_k=\\sum_{i=0}^{n-1}a_j(\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i)$</p>\n<p>核心的就是$\\sum^{n-1}_{i=0}(\\omega_n^{j-k})^i$，设$S(x)=\\sum^{n-1}_{i=0}x^i$</p>\n<p>易证 $S(x)=\\frac {1-1}{w_n^k-1}$</p>\n<p>当$w_n^k!=1$时，$S(x)=0$</p>\n<p>当$w_n^k=1$时，$S(x)=n$</p>\n<p>代入得$c_k=na_k$</p>\n<p>所以 $a_k=c_k/n$</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>递归实现容易爆栈，而且极其慢，考虑优化为迭代实现。</p>\n<p>优化为迭代实现的瓶颈在于如何划分系数，不过可以非常简单的把需要合并在一起的项放在一起。</p>\n<p>只有一项的多项式，点值表达式和系数表达式是一样的。</p>\n<p>因为上述按奇偶性分开，其实是按照下标二进制表达从后往前来比较的来划分的，相同的会放在一起，所以可以直接按照下表二进制反转的顺序来依次合并。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;complex></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> Pi<span class=\"token operator\">=</span><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> temp<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> limit<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>limit<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span>m<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        limit<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">+</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld \"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fft</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>length<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>length<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">Wn</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>Pi<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">*</span>Pi<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">wn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>wn1<span class=\"token operator\">=</span>wn1<span class=\"token operator\">*</span>Wn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                std<span class=\"token double-colon punctuation\">::</span>complex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> x<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>wn1<span class=\"token punctuation\">;</span>\n                f<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n                f<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"NTT-快速数论变换\"><a href=\"#NTT-快速数论变换\" class=\"headerlink\" title=\"NTT (快速数论变换)\"></a>NTT (快速数论变换)</h1><h2 id=\"思想-1\"><a href=\"#思想-1\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>因为FFT涉及到复杂的复数运算，不仅很慢，不能取模，甚至有精度问题。</p>\n<p>所有如果在取模意义下，也可以用与FFT所利用的的单位根相似的原根。</p>\n<h2 id=\"数学知识\"><a href=\"#数学知识\" class=\"headerlink\" title=\"数学知识\"></a>数学知识</h2><p>原根的定义理所当然，定义一个数 $n$ 的原根为 $g$ ，是满足$g^n \\equiv 1(mod~p)$的最小整数。</p>\n<p>原根满足 $g^i(1 \\leq i \\leq n)$ 模 $p$ 两两不同。</p>\n<p>一般取模数为 $998244353$ ，其原根是 $3$。</p>\n<p>对于代值的数的表示仍然是$\\omega_n$：</p>\n<p>$w_n \\equiv g^{\\frac{p-1}{n}} (mod~p)$</p>\n<p>$\\omega_n^k=\\omega_{n/2}^{k/2}$ 。</p>\n<p>$\\omega_n^{k}=-\\omega_n^{k+n/2}$。</p>\n<p>$\\omega_n^0=\\omega_n^n=1$。</p>\n<p>$\\omega_n^{k}=\\omega_n^{n+k}$。</p>\n<h2 id=\"直接把FFT的代值改成NTT\"><a href=\"#直接把FFT的代值改成NTT\" class=\"headerlink\" title=\"直接把FFT的代值改成NTT\"></a>直接把FFT的代值改成NTT</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> li<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">8000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">=</span><span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> g<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> g2<span class=\"token operator\">=</span><span class=\"token number\">332748118</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">/=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fast_power</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\">//快速幂，a为底数，k为指数</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> gn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        gn<span class=\"token operator\">=</span><span class=\"token function\">fast_power</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">?</span>g<span class=\"token operator\">:</span>g2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>li<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> g0<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>g0<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>g0<span class=\"token operator\">*</span>gn<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>g0<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>y<span class=\"token operator\">+</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">ONLINE_JUDGE</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n    <span class=\"token comment\">// freopen(\".in\",\"r\",stdin);</span>\n    <span class=\"token comment\">// freopen(\".out\",\"w\",stdout);</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>li<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span>m<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        li<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>li<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">ntt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> inv<span class=\"token operator\">=</span><span class=\"token function\">fast_power</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">+</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n    1:\n        In:\n\n        Out:\nMore:\n\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"扩展题目\"><a href=\"#扩展题目\" class=\"headerlink\" title=\"扩展题目\"></a>扩展题目</h1>"},{"title":"CSP2023-S模拟赛（五）赛后总结","date":"2023-07-20T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# CSP2023-S模拟赛（五）赛后总结\n\n## 生成树\n\n### 简要题解\n\n最小生成树依次连接 $i$ 和 $i+1$ ，最小为 $n-1$ 。\n\n最大生成树从大到小枚举边权，然后这个边权的倍数都可以连接，因为这些点的最大公因数一定是当前枚举的边权的整倍数，一定在枚举这个边权之前枚举了，并查集判断是否已连接即可。\n\n时间复杂度比较难说，但是很容易看到随着 $n$ 增大，时间复杂度肯定越大，经测试最大的 $n$ 能够跑过，所以没问题。\n\n## 总结\n\n考虑最小/大生成树的经典算法，是每次找剩余的边权中最大的，所以考虑从大到小枚举，同时推出正确性，其实是不难想到的。\n\n## 序列\n\n### 简要题解\n\n考虑DP，式子推出后用矩阵乘法改写，然后优化。\n\n### 总结\n\nDP推出后，可从DP式本身出发，也可以考虑改写为矩阵乘法甚至是广义矩阵乘法，在发现DP状态数较多的情况下，可以考虑DP转移本身需要哪些信息，哪些信息可以合并，从而降低时间复杂度和空间时间度。\n\n## 魔力\n\n### 简要题解\n\n计算移动每个点会造成的差值，会发现他们互相不影响，排序即可。\n\n### 总结\n\n对于计数问题，可以考虑每种操作对最终答案的影响，根据题目中信息将在线问题转换为离线问题。\n\n## 时空结构\n\n### 简要题解\n\n访问过程中，考虑祖先节点对儿子的影响，然后将式子化简得出结论。\n\n### 总结\n\n对于每个节点可以拆开计算的问题，可以考虑分别拆开然后处理出每个值然后合并。\n\n树上问题可以考虑拆成一条条链来处理。\n","source":"_posts/0004.md","raw":"---\ntitle: CSP2023-S模拟赛（五）赛后总结\ndate: 2023-07-21\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n# CSP2023-S模拟赛（五）赛后总结\n\n## 生成树\n\n### 简要题解\n\n最小生成树依次连接 $i$ 和 $i+1$ ，最小为 $n-1$ 。\n\n最大生成树从大到小枚举边权，然后这个边权的倍数都可以连接，因为这些点的最大公因数一定是当前枚举的边权的整倍数，一定在枚举这个边权之前枚举了，并查集判断是否已连接即可。\n\n时间复杂度比较难说，但是很容易看到随着 $n$ 增大，时间复杂度肯定越大，经测试最大的 $n$ 能够跑过，所以没问题。\n\n## 总结\n\n考虑最小/大生成树的经典算法，是每次找剩余的边权中最大的，所以考虑从大到小枚举，同时推出正确性，其实是不难想到的。\n\n## 序列\n\n### 简要题解\n\n考虑DP，式子推出后用矩阵乘法改写，然后优化。\n\n### 总结\n\nDP推出后，可从DP式本身出发，也可以考虑改写为矩阵乘法甚至是广义矩阵乘法，在发现DP状态数较多的情况下，可以考虑DP转移本身需要哪些信息，哪些信息可以合并，从而降低时间复杂度和空间时间度。\n\n## 魔力\n\n### 简要题解\n\n计算移动每个点会造成的差值，会发现他们互相不影响，排序即可。\n\n### 总结\n\n对于计数问题，可以考虑每种操作对最终答案的影响，根据题目中信息将在线问题转换为离线问题。\n\n## 时空结构\n\n### 简要题解\n\n访问过程中，考虑祖先节点对儿子的影响，然后将式子化简得出结论。\n\n### 总结\n\n对于每个节点可以拆开计算的问题，可以考虑分别拆开然后处理出每个值然后合并。\n\n树上问题可以考虑拆成一条条链来处理。\n","slug":"0004","published":1,"updated":"2024-01-08T11:15:06.847Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjc0004xday0669905s","content":"<h1 id=\"CSP2023-S模拟赛（五）赛后总结\"><a href=\"#CSP2023-S模拟赛（五）赛后总结\" class=\"headerlink\" title=\"CSP2023-S模拟赛（五）赛后总结\"></a>CSP2023-S模拟赛（五）赛后总结</h1><h2 id=\"生成树\"><a href=\"#生成树\" class=\"headerlink\" title=\"生成树\"></a>生成树</h2><h3 id=\"简要题解\"><a href=\"#简要题解\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>最小生成树依次连接 $i$ 和 $i+1$ ，最小为 $n-1$ 。</p>\n<p>最大生成树从大到小枚举边权，然后这个边权的倍数都可以连接，因为这些点的最大公因数一定是当前枚举的边权的整倍数，一定在枚举这个边权之前枚举了，并查集判断是否已连接即可。</p>\n<p>时间复杂度比较难说，但是很容易看到随着 $n$ 增大，时间复杂度肯定越大，经测试最大的 $n$ 能够跑过，所以没问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>考虑最小/大生成树的经典算法，是每次找剩余的边权中最大的，所以考虑从大到小枚举，同时推出正确性，其实是不难想到的。</p>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h2><h3 id=\"简要题解-1\"><a href=\"#简要题解-1\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>考虑DP，式子推出后用矩阵乘法改写，然后优化。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>DP推出后，可从DP式本身出发，也可以考虑改写为矩阵乘法甚至是广义矩阵乘法，在发现DP状态数较多的情况下，可以考虑DP转移本身需要哪些信息，哪些信息可以合并，从而降低时间复杂度和空间时间度。</p>\n<h2 id=\"魔力\"><a href=\"#魔力\" class=\"headerlink\" title=\"魔力\"></a>魔力</h2><h3 id=\"简要题解-2\"><a href=\"#简要题解-2\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>计算移动每个点会造成的差值，会发现他们互相不影响，排序即可。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>对于计数问题，可以考虑每种操作对最终答案的影响，根据题目中信息将在线问题转换为离线问题。</p>\n<h2 id=\"时空结构\"><a href=\"#时空结构\" class=\"headerlink\" title=\"时空结构\"></a>时空结构</h2><h3 id=\"简要题解-3\"><a href=\"#简要题解-3\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>访问过程中，考虑祖先节点对儿子的影响，然后将式子化简得出结论。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>对于每个节点可以拆开计算的问题，可以考虑分别拆开然后处理出每个值然后合并。</p>\n<p>树上问题可以考虑拆成一条条链来处理。</p>\n","excerpt":"","more":"<h1 id=\"CSP2023-S模拟赛（五）赛后总结\"><a href=\"#CSP2023-S模拟赛（五）赛后总结\" class=\"headerlink\" title=\"CSP2023-S模拟赛（五）赛后总结\"></a>CSP2023-S模拟赛（五）赛后总结</h1><h2 id=\"生成树\"><a href=\"#生成树\" class=\"headerlink\" title=\"生成树\"></a>生成树</h2><h3 id=\"简要题解\"><a href=\"#简要题解\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>最小生成树依次连接 $i$ 和 $i+1$ ，最小为 $n-1$ 。</p>\n<p>最大生成树从大到小枚举边权，然后这个边权的倍数都可以连接，因为这些点的最大公因数一定是当前枚举的边权的整倍数，一定在枚举这个边权之前枚举了，并查集判断是否已连接即可。</p>\n<p>时间复杂度比较难说，但是很容易看到随着 $n$ 增大，时间复杂度肯定越大，经测试最大的 $n$ 能够跑过，所以没问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>考虑最小/大生成树的经典算法，是每次找剩余的边权中最大的，所以考虑从大到小枚举，同时推出正确性，其实是不难想到的。</p>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h2><h3 id=\"简要题解-1\"><a href=\"#简要题解-1\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>考虑DP，式子推出后用矩阵乘法改写，然后优化。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>DP推出后，可从DP式本身出发，也可以考虑改写为矩阵乘法甚至是广义矩阵乘法，在发现DP状态数较多的情况下，可以考虑DP转移本身需要哪些信息，哪些信息可以合并，从而降低时间复杂度和空间时间度。</p>\n<h2 id=\"魔力\"><a href=\"#魔力\" class=\"headerlink\" title=\"魔力\"></a>魔力</h2><h3 id=\"简要题解-2\"><a href=\"#简要题解-2\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>计算移动每个点会造成的差值，会发现他们互相不影响，排序即可。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>对于计数问题，可以考虑每种操作对最终答案的影响，根据题目中信息将在线问题转换为离线问题。</p>\n<h2 id=\"时空结构\"><a href=\"#时空结构\" class=\"headerlink\" title=\"时空结构\"></a>时空结构</h2><h3 id=\"简要题解-3\"><a href=\"#简要题解-3\" class=\"headerlink\" title=\"简要题解\"></a>简要题解</h3><p>访问过程中，考虑祖先节点对儿子的影响，然后将式子化简得出结论。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>对于每个节点可以拆开计算的问题，可以考虑分别拆开然后处理出每个值然后合并。</p>\n<p>树上问题可以考虑拆成一条条链来处理。</p>\n"},{"title":"NOI Linux2.0考场环境使用指南","date":"2023-07-07T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# NOI Linux2.0考场环境使用指南\n\n## 编写代码\n\n### Code::Blocks\n\n![1.png](1.png)\n\nCode::Blocks是考场唯一一个可以图形化调试的IDE，但是极为难用。\n\n#### 创建项目\n\n![2.PNG](D:\\OI\\2.PNG)\n\n![3.PNG](D:\\OI\\3.PNG)\n\n![4.PNG](D:\\OI\\4.PNG)\n\n![5.PNG](D:\\OI\\5.PNG)\n\n#### 更改终端\n\n![6.PNG](D:\\OI\\6.PNG)\n\n![7.PNG](D:\\OI\\7.PNG)\n\n\n\n然后就可以编代码啦，编译选项我也没找到在哪里改，反正不建议使用\n\n### 优雅折中的Geany\n\nGeany非常简单，打开后和Dev-C++非常相像，只可惜不能调试，只能单开终端调试，可以更改编译选项。\n\n![8.PNG](D:\\OI\\8.PNG)\n\n更改Build的编译选项即可，可以参照这个来写:\n\n```\ng++ \"%f\" -o \"%e\" -g -Wall -std=c++14 -fsanitize=address,undefined\n```\n\n后面一个神奇的编译选项将在后面提到。调试请参考VSCode的调试部分。\n\n### VSCode\n\n听说你想用机房很火的VSCode？哈哈，CCF提供的C/C++插件处于半残废状态，要想编译和调试只能手写JSON，反正我不会。\n\n但是VSCode的代码高亮等等等很好用，只是要手敲命令行，我认为还好。\n\n#### 打开工作区\n\n建议直接打开要求的代码保存目录。\n\n![9.PNG](D:\\OI\\9.PNG)\n\n#### 编译及运行\n\n在bash终端里面输入\n\n```bash\ng++  *.cpp -o * -g -Wall -std=c++14 -fsanitize=address,undefined\n```\n\n后面的很复杂的编译选项可以不管，这个是新版本g++加入的新功能，可以一定程度上避免程序的UB行为避免大部分RE。\n\n运行\n\n```bash\n./*\n```\n\n就可以像在Windows下一样输入了，Ctrl+C强制结束。\n\n#### 调试\n\n调试功能依赖于gdb。\n\n##### 注意事项：\n\n如果此行没有输入命令，按下回车，会自动执行上一行的内容，容易导致翻车\n\n##### 使用指南：\n\n进入gdb：\n\n```bash\ngdb *\n```\n\n查看源代码：\n\n```bash\nlist\n```\n\n就会列出代码，每次列出 $20$ 行，如果列出，说明可以开始调试，否则编译过程中可能没有加入 -g 选项。\n\n加入断点：\n\n```bash\nbreak xxx(行号)\n```\n\n运行：\n\n```bash\nrun\n```\n\n下一步：\n\n```bash\nnext\n```\n\n单步进入：\n\n```bash\nstep\n```\n\n跳过：\n\n```bash\ncontinue\n```\n\n查看变量值：\n\n```bash\nprint xxx(变量名)\n```\n\n应该只会用这些，多余的可以自行了解。\n\n[扩展](https://blog.csdn.net/qq_28351609/article/details/114855630)\n\n### NOI Linux的其他翻车细节\n\n#### Arbiter\n\narbiter别乱用，特别容易崩溃。\n\n#### 喜闻乐见.jpg\n\nscp?\n\nsshd被删了，别想着偷别人代码。\n\n#### 中文目录\n\n哪个zz想的Linux目录是中文啊啊啊，不要把代码复制到桌面，不要给文件名加上中文，否则编译错误满天飞。\n\n#### 编辑器崩溃\n\n不建议用编写代码的IDE来看样例，建议单独开一个，大样例会把编辑器搞崩溃，代码就没了。\n\n\n\n","source":"_posts/0005.md","raw":"---\ntitle: NOI Linux2.0考场环境使用指南\ndate: 2023-07-08\ntags: [OI,NOI_Linux]\ntoc: true\nmathjax: true\n---\n\n# NOI Linux2.0考场环境使用指南\n\n## 编写代码\n\n### Code::Blocks\n\n![1.png](1.png)\n\nCode::Blocks是考场唯一一个可以图形化调试的IDE，但是极为难用。\n\n#### 创建项目\n\n![2.PNG](D:\\OI\\2.PNG)\n\n![3.PNG](D:\\OI\\3.PNG)\n\n![4.PNG](D:\\OI\\4.PNG)\n\n![5.PNG](D:\\OI\\5.PNG)\n\n#### 更改终端\n\n![6.PNG](D:\\OI\\6.PNG)\n\n![7.PNG](D:\\OI\\7.PNG)\n\n\n\n然后就可以编代码啦，编译选项我也没找到在哪里改，反正不建议使用\n\n### 优雅折中的Geany\n\nGeany非常简单，打开后和Dev-C++非常相像，只可惜不能调试，只能单开终端调试，可以更改编译选项。\n\n![8.PNG](D:\\OI\\8.PNG)\n\n更改Build的编译选项即可，可以参照这个来写:\n\n```\ng++ \"%f\" -o \"%e\" -g -Wall -std=c++14 -fsanitize=address,undefined\n```\n\n后面一个神奇的编译选项将在后面提到。调试请参考VSCode的调试部分。\n\n### VSCode\n\n听说你想用机房很火的VSCode？哈哈，CCF提供的C/C++插件处于半残废状态，要想编译和调试只能手写JSON，反正我不会。\n\n但是VSCode的代码高亮等等等很好用，只是要手敲命令行，我认为还好。\n\n#### 打开工作区\n\n建议直接打开要求的代码保存目录。\n\n![9.PNG](D:\\OI\\9.PNG)\n\n#### 编译及运行\n\n在bash终端里面输入\n\n```bash\ng++  *.cpp -o * -g -Wall -std=c++14 -fsanitize=address,undefined\n```\n\n后面的很复杂的编译选项可以不管，这个是新版本g++加入的新功能，可以一定程度上避免程序的UB行为避免大部分RE。\n\n运行\n\n```bash\n./*\n```\n\n就可以像在Windows下一样输入了，Ctrl+C强制结束。\n\n#### 调试\n\n调试功能依赖于gdb。\n\n##### 注意事项：\n\n如果此行没有输入命令，按下回车，会自动执行上一行的内容，容易导致翻车\n\n##### 使用指南：\n\n进入gdb：\n\n```bash\ngdb *\n```\n\n查看源代码：\n\n```bash\nlist\n```\n\n就会列出代码，每次列出 $20$ 行，如果列出，说明可以开始调试，否则编译过程中可能没有加入 -g 选项。\n\n加入断点：\n\n```bash\nbreak xxx(行号)\n```\n\n运行：\n\n```bash\nrun\n```\n\n下一步：\n\n```bash\nnext\n```\n\n单步进入：\n\n```bash\nstep\n```\n\n跳过：\n\n```bash\ncontinue\n```\n\n查看变量值：\n\n```bash\nprint xxx(变量名)\n```\n\n应该只会用这些，多余的可以自行了解。\n\n[扩展](https://blog.csdn.net/qq_28351609/article/details/114855630)\n\n### NOI Linux的其他翻车细节\n\n#### Arbiter\n\narbiter别乱用，特别容易崩溃。\n\n#### 喜闻乐见.jpg\n\nscp?\n\nsshd被删了，别想着偷别人代码。\n\n#### 中文目录\n\n哪个zz想的Linux目录是中文啊啊啊，不要把代码复制到桌面，不要给文件名加上中文，否则编译错误满天飞。\n\n#### 编辑器崩溃\n\n不建议用编写代码的IDE来看样例，建议单独开一个，大样例会把编辑器搞崩溃，代码就没了。\n\n\n\n","slug":"0005","published":1,"updated":"2024-01-08T11:15:50.579Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjd0005xdayfigo4j13","content":"<h1 id=\"NOI-Linux2-0考场环境使用指南\"><a href=\"#NOI-Linux2-0考场环境使用指南\" class=\"headerlink\" title=\"NOI Linux2.0考场环境使用指南\"></a>NOI Linux2.0考场环境使用指南</h1><h2 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h2><h3 id=\"Code-Blocks\"><a href=\"#Code-Blocks\" class=\"headerlink\" title=\"Code::Blocks\"></a>Code::Blocks</h3><p><img src=\"1.png\" alt=\"1.png\"></p>\n<p>Code::Blocks是考场唯一一个可以图形化调试的IDE，但是极为难用。</p>\n<h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><p><img src=\"D:\\OI\\2.PNG\" alt=\"2.PNG\"></p>\n<p><img src=\"D:\\OI\\3.PNG\" alt=\"3.PNG\"></p>\n<p><img src=\"D:\\OI\\4.PNG\" alt=\"4.PNG\"></p>\n<p><img src=\"D:\\OI\\5.PNG\" alt=\"5.PNG\"></p>\n<h4 id=\"更改终端\"><a href=\"#更改终端\" class=\"headerlink\" title=\"更改终端\"></a>更改终端</h4><p><img src=\"D:\\OI\\6.PNG\" alt=\"6.PNG\"></p>\n<p><img src=\"D:\\OI\\7.PNG\" alt=\"7.PNG\"></p>\n<p>然后就可以编代码啦，编译选项我也没找到在哪里改，反正不建议使用</p>\n<h3 id=\"优雅折中的Geany\"><a href=\"#优雅折中的Geany\" class=\"headerlink\" title=\"优雅折中的Geany\"></a>优雅折中的Geany</h3><p>Geany非常简单，打开后和Dev-C++非常相像，只可惜不能调试，只能单开终端调试，可以更改编译选项。</p>\n<p><img src=\"D:\\OI\\8.PNG\" alt=\"8.PNG\"></p>\n<p>更改Build的编译选项即可，可以参照这个来写:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">g++ &quot;%f&quot; -o &quot;%e&quot; -g -Wall -std&#x3D;c++14 -fsanitize&#x3D;address,undefined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后面一个神奇的编译选项将在后面提到。调试请参考VSCode的调试部分。</p>\n<h3 id=\"VSCode\"><a href=\"#VSCode\" class=\"headerlink\" title=\"VSCode\"></a>VSCode</h3><p>听说你想用机房很火的VSCode？哈哈，CCF提供的C/C++插件处于半残废状态，要想编译和调试只能手写JSON，反正我不会。</p>\n<p>但是VSCode的代码高亮等等等很好用，只是要手敲命令行，我认为还好。</p>\n<h4 id=\"打开工作区\"><a href=\"#打开工作区\" class=\"headerlink\" title=\"打开工作区\"></a>打开工作区</h4><p>建议直接打开要求的代码保存目录。</p>\n<p><img src=\"D:\\OI\\9.PNG\" alt=\"9.PNG\"></p>\n<h4 id=\"编译及运行\"><a href=\"#编译及运行\" class=\"headerlink\" title=\"编译及运行\"></a>编译及运行</h4><p>在bash终端里面输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">g++  *.cpp <span class=\"token parameter variable\">-o</span> * <span class=\"token parameter variable\">-g</span> <span class=\"token parameter variable\">-Wall</span> <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++14 <span class=\"token parameter variable\">-fsanitize</span><span class=\"token operator\">=</span>address,undefined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后面的很复杂的编译选项可以不管，这个是新版本g++加入的新功能，可以一定程度上避免程序的UB行为避免大部分RE。</p>\n<p>运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就可以像在Windows下一样输入了，Ctrl+C强制结束。</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>调试功能依赖于gdb。</p>\n<h5 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h5><p>如果此行没有输入命令，按下回车，会自动执行上一行的内容，容易导致翻车</p>\n<h5 id=\"使用指南：\"><a href=\"#使用指南：\" class=\"headerlink\" title=\"使用指南：\"></a>使用指南：</h5><p>进入gdb：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gdb *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看源代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就会列出代码，每次列出 $20$ 行，如果列出，说明可以开始调试，否则编译过程中可能没有加入 -g 选项。</p>\n<p>加入断点：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">break</span> xxx<span class=\"token punctuation\">(</span>行号<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>下一步：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">next<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>单步进入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">step<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>跳过：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看变量值：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">print xxx<span class=\"token punctuation\">(</span>变量名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>应该只会用这些，多余的可以自行了解。</p>\n<p><a href=\"https://blog.csdn.net/qq_28351609/article/details/114855630\">扩展</a></p>\n<h3 id=\"NOI-Linux的其他翻车细节\"><a href=\"#NOI-Linux的其他翻车细节\" class=\"headerlink\" title=\"NOI Linux的其他翻车细节\"></a>NOI Linux的其他翻车细节</h3><h4 id=\"Arbiter\"><a href=\"#Arbiter\" class=\"headerlink\" title=\"Arbiter\"></a>Arbiter</h4><p>arbiter别乱用，特别容易崩溃。</p>\n<h4 id=\"喜闻乐见-jpg\"><a href=\"#喜闻乐见-jpg\" class=\"headerlink\" title=\"喜闻乐见.jpg\"></a>喜闻乐见.jpg</h4><p>scp?</p>\n<p>sshd被删了，别想着偷别人代码。</p>\n<h4 id=\"中文目录\"><a href=\"#中文目录\" class=\"headerlink\" title=\"中文目录\"></a>中文目录</h4><p>哪个zz想的Linux目录是中文啊啊啊，不要把代码复制到桌面，不要给文件名加上中文，否则编译错误满天飞。</p>\n<h4 id=\"编辑器崩溃\"><a href=\"#编辑器崩溃\" class=\"headerlink\" title=\"编辑器崩溃\"></a>编辑器崩溃</h4><p>不建议用编写代码的IDE来看样例，建议单独开一个，大样例会把编辑器搞崩溃，代码就没了。</p>\n","excerpt":"","more":"<h1 id=\"NOI-Linux2-0考场环境使用指南\"><a href=\"#NOI-Linux2-0考场环境使用指南\" class=\"headerlink\" title=\"NOI Linux2.0考场环境使用指南\"></a>NOI Linux2.0考场环境使用指南</h1><h2 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h2><h3 id=\"Code-Blocks\"><a href=\"#Code-Blocks\" class=\"headerlink\" title=\"Code::Blocks\"></a>Code::Blocks</h3><p><img src=\"1.png\" alt=\"1.png\"></p>\n<p>Code::Blocks是考场唯一一个可以图形化调试的IDE，但是极为难用。</p>\n<h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><p><img src=\"D:\\OI\\2.PNG\" alt=\"2.PNG\"></p>\n<p><img src=\"D:\\OI\\3.PNG\" alt=\"3.PNG\"></p>\n<p><img src=\"D:\\OI\\4.PNG\" alt=\"4.PNG\"></p>\n<p><img src=\"D:\\OI\\5.PNG\" alt=\"5.PNG\"></p>\n<h4 id=\"更改终端\"><a href=\"#更改终端\" class=\"headerlink\" title=\"更改终端\"></a>更改终端</h4><p><img src=\"D:\\OI\\6.PNG\" alt=\"6.PNG\"></p>\n<p><img src=\"D:\\OI\\7.PNG\" alt=\"7.PNG\"></p>\n<p>然后就可以编代码啦，编译选项我也没找到在哪里改，反正不建议使用</p>\n<h3 id=\"优雅折中的Geany\"><a href=\"#优雅折中的Geany\" class=\"headerlink\" title=\"优雅折中的Geany\"></a>优雅折中的Geany</h3><p>Geany非常简单，打开后和Dev-C++非常相像，只可惜不能调试，只能单开终端调试，可以更改编译选项。</p>\n<p><img src=\"D:\\OI\\8.PNG\" alt=\"8.PNG\"></p>\n<p>更改Build的编译选项即可，可以参照这个来写:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">g++ &quot;%f&quot; -o &quot;%e&quot; -g -Wall -std&#x3D;c++14 -fsanitize&#x3D;address,undefined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后面一个神奇的编译选项将在后面提到。调试请参考VSCode的调试部分。</p>\n<h3 id=\"VSCode\"><a href=\"#VSCode\" class=\"headerlink\" title=\"VSCode\"></a>VSCode</h3><p>听说你想用机房很火的VSCode？哈哈，CCF提供的C/C++插件处于半残废状态，要想编译和调试只能手写JSON，反正我不会。</p>\n<p>但是VSCode的代码高亮等等等很好用，只是要手敲命令行，我认为还好。</p>\n<h4 id=\"打开工作区\"><a href=\"#打开工作区\" class=\"headerlink\" title=\"打开工作区\"></a>打开工作区</h4><p>建议直接打开要求的代码保存目录。</p>\n<p><img src=\"D:\\OI\\9.PNG\" alt=\"9.PNG\"></p>\n<h4 id=\"编译及运行\"><a href=\"#编译及运行\" class=\"headerlink\" title=\"编译及运行\"></a>编译及运行</h4><p>在bash终端里面输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">g++  *.cpp <span class=\"token parameter variable\">-o</span> * <span class=\"token parameter variable\">-g</span> <span class=\"token parameter variable\">-Wall</span> <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++14 <span class=\"token parameter variable\">-fsanitize</span><span class=\"token operator\">=</span>address,undefined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后面的很复杂的编译选项可以不管，这个是新版本g++加入的新功能，可以一定程度上避免程序的UB行为避免大部分RE。</p>\n<p>运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就可以像在Windows下一样输入了，Ctrl+C强制结束。</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>调试功能依赖于gdb。</p>\n<h5 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h5><p>如果此行没有输入命令，按下回车，会自动执行上一行的内容，容易导致翻车</p>\n<h5 id=\"使用指南：\"><a href=\"#使用指南：\" class=\"headerlink\" title=\"使用指南：\"></a>使用指南：</h5><p>进入gdb：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gdb *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看源代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就会列出代码，每次列出 $20$ 行，如果列出，说明可以开始调试，否则编译过程中可能没有加入 -g 选项。</p>\n<p>加入断点：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">break</span> xxx<span class=\"token punctuation\">(</span>行号<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>下一步：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">next<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>单步进入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">step<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>跳过：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看变量值：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">print xxx<span class=\"token punctuation\">(</span>变量名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>应该只会用这些，多余的可以自行了解。</p>\n<p><a href=\"https://blog.csdn.net/qq_28351609/article/details/114855630\">扩展</a></p>\n<h3 id=\"NOI-Linux的其他翻车细节\"><a href=\"#NOI-Linux的其他翻车细节\" class=\"headerlink\" title=\"NOI Linux的其他翻车细节\"></a>NOI Linux的其他翻车细节</h3><h4 id=\"Arbiter\"><a href=\"#Arbiter\" class=\"headerlink\" title=\"Arbiter\"></a>Arbiter</h4><p>arbiter别乱用，特别容易崩溃。</p>\n<h4 id=\"喜闻乐见-jpg\"><a href=\"#喜闻乐见-jpg\" class=\"headerlink\" title=\"喜闻乐见.jpg\"></a>喜闻乐见.jpg</h4><p>scp?</p>\n<p>sshd被删了，别想着偷别人代码。</p>\n<h4 id=\"中文目录\"><a href=\"#中文目录\" class=\"headerlink\" title=\"中文目录\"></a>中文目录</h4><p>哪个zz想的Linux目录是中文啊啊啊，不要把代码复制到桌面，不要给文件名加上中文，否则编译错误满天飞。</p>\n<h4 id=\"编辑器崩溃\"><a href=\"#编辑器崩溃\" class=\"headerlink\" title=\"编辑器崩溃\"></a>编辑器崩溃</h4><p>不建议用编写代码的IDE来看样例，建议单独开一个，大样例会把编辑器搞崩溃，代码就没了。</p>\n"},{"title":"斜率优化","date":"2022-12-02T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n\n# 序列解题报告\n\n建议到我的博客里食用\n\n### 题意：\n首先定义一个目标序列，称为 $k-$ 序列：对于序列中的每一项 $s$，序\n列中至少有 $k-1$ 个其他项都等于 $s$。每次操作可以使序列中的任何一项的值减小 $1$。现在给定一个长度为 $n$ 的升序序列和 $k$，你的任务是帮OIER们计算出转化为 $k-$ 序列需要的最少步数\n\n换句话来说这个序列中的任意一个数必须有至少 $k$ 个与他相同的数。\n\n## 苦苦挣扎第一步：\n\n瞄了一眼数据范围,$2 \\leq k \\leq n \\leq 5*10^5$，应该只能是 $O(n)$ 或者 $O(nlogn)$ 之类的时间复杂度乱搞一下，反过来看一下题序列是已经排好序的，会不会有什么蹊跷呢？贪心？吧每$ k$ 个数字分到一组，通过减把他们全部变成一样的，不幸的是，这样的算法虽然优美，但是是不正确的。只能无奈放弃。\n\n## 苦苦挣扎第二步：\n关于处理序列上的算法无非几个，好像都不能用，只好乱搞一下DP了，因为数据范围巨大，只能开一维dp或者最多加一个 $log(n)$ ，这道题好像也没有要倍增之类的东西，先开成一维，最好想的应该就是前 $k$ 个数是 $k-$ 序列的，根据之前贪心的想法肯定是把数组弄成很多个长度大于等于 $k$ 的连续区间，dp就以当前这个点为后面这个区间的右端点，枚举左端点，动规方程显而易见：\n\n$dp_i=dp_j+sum_i-sum_j-(i-j)*a_{j+1}$ $(k \\leq i)$\n\n$dp_i=inf$ $(i<k)$\n\n## 苦苦挣扎第三步：\n可惜这么好的DP却太慢的，时间复杂度直逼 $O(n^2)$，虽然常数较小，但是抵不住 $2 \\leq k \\leq n \\leq 5*10^5$ , 优化！！！\n\n之前的把 $O(n^2)$ DP优化成 $O(n)$ 需要使用单调队列，要求dp数组有单调性，这道题没有，不行，难道要放弃了吗，还有斜率优化！！！\n\n拆拆大法好!!!：$dp_i=dp_j+sum_i-sum_j-i*a_{j+1}+j*a_{j+1}$\n\n拆完之后再移一下项：$dp_i-sum_i+i*a_{j+1}=dp_j-sum_j+j*a_{j+1}$ $(k \\leq i)$\n\n成功地把与 $i$ 相关的，与 $j$ 相关的，与 $i,j$ 都相关的，分别移到一起，肯定有人问了：这么做干嘛呢，没关系只要这样看这个方程：\n\n$(dp_i-sum_i)+(i)*(a_{j+1})=(dp_j-sum_j+j*a_{j+1})$ $(i>=k)$\n\n$~~~~~~~~~~b~~~~~~~~~~~~~~~~k~~~~~~~~~~x~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~y$\n\n一次函数！！！，平面直角坐标系中有很多与$j$相关的点，相当于过这些点做斜率为 $k$ 的直线交 $y$ 轴于一个点，这个点的纵坐标就是 $y$ ,而 $y$ 就相当于 $dp_j$ 加上很多与 $i$ 相关的常数，因为我们在枚举 $i$ ，所以这些常数是可以确定的，不与 $j$ 相关，接下来就是要求这些交点的纵坐标的最小值。可是怎么优化到 $O(1)$ 求呢，不要慌，慢慢来。\n\n再套一层单调队列，在理解为什么是这样之前先来看看这些点：\n\n样例太小了换一个：\n```\n9 2\n1 2 8 9 15 16 16 16 20\n```\n\n结合样例来看当 $i=9$ 是，应该有决策点 $7,6,5,4,3,2,1,0$ ，画上坐标轴。（下面有图）\n\n$0,1$ 是 $inf$ , 所以没画\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/35xbg4jy.png)\n\n维护一个有序点集，使得这个点集相邻的两个点相连所得的直线斜率单调递增，这个就是用单调队列优化\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hxq5tonp.png)\n\n数据没出好，按理说是 $n$ 条线段头尾相接。\n显然的，我们会让相连斜率小于上面 $(dp_i-sum_i)+(i)*(a[j+1])=(dp_j-sum_j+j*a_{j+1})$ $(i>=k)$ 方程中的 $k$ 也就是 $i$ 弹出，因为 $i$ 单调递增，所以后面也不会考虑他，因为 $b=y-kx$ ，斜率太小的话, $x$ 肯定会很小, $b$ 就更大了，很显然把这些点去掉之后，\n就选的是最下面那个点，再往上走斜率越大，$y$ 增长得很快，也不满足最小。\n\n仍然有个小问题，在计算斜率的时候，double不靠谱，根据等式的性质2，转换乘为除：\n\n$(y_1-y_2)/(x_1-x_2)<(y_3-y_4)/(x_3-x_4)$\n等同于\n$(y_1-y_2)*(x_3-x_4)<(y_3-y_4)*(x_1-x_2)$\n\n代码就很好写了，注意一个 $x$ 对应多个 $y$ 的情况，这种情况斜率处理成无限大。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define int long long\ninline int read();\nint a[500005];\nint l,r;\nint sum[500005];\nint que[500005];\nint dp[500005];\ndouble y(int r){\n    return dp[r]-sum[r]+r*a[r+1];\n}\ndouble x(int r){\n    return a[r+1];\n}\nsigned main(){\n\t#ifdef ONLINE_JUDGE=LUOGU\n\t#else\n\tfreopen(\"sequence.in\",\"r\",stdin);\n\tfreopen(\"sequence.out\",\"w\",stdout);\n\t#endif\n    memset(a,0,sizeof(a));\n    memset(sum,0,sizeof(sum));\n    memset(dp,0,sizeof(dp));\n    memset(que,0,sizeof(que));\n    l=r=0;\n    int n=read(),k=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n        sum[i]=a[i]+sum[i-1];\n    }\n    // que[0]=-1;  \n    for(int i=1;i<=n;i++){\n        if(i-k>=k){\n            while(l<r&&(y(que[r])-y(que[r-1]))*(x(i-k)-x(que[r]))>=(y(i-k)-y(que[r]))*(x(que[r])-x(que[r-1]))){\n                r--;\n            }\n            que[++r]=i-k;\n        }\n        while(l<r&&y(que[l+1])-y(que[l])<=(i)*(((x(que[l+1])-x(que[l]))))){\n            l++;\n        }\n        int j=que[l];\n        if(i-k<0){\n            dp[i]=0x3f3f3f3f3f3f3f3f;\n        }else if(j!=-1){\n            dp[i]=dp[j]+(sum[i]-sum[j])-(i-j)*a[j+1];\n        }else\n            dp[i]=(sum[i])-(i-j)*a[j+1];\n    }\n    printf(\"%lld\\n\",dp[n]);\n\n\treturn 0;\n}\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/\n\n\n\n\n```\n\n作者懒癌晚期，前两个非正解不想写代码了，希望各位理解\n\n[POJ3709](https://vjudge.net/problem/POJ-3709)是这道题的加强版，多了个多组数据，可以去A一下\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e4wfvahj.png)\n","source":"_posts/0006.md","raw":"---\ntitle: 斜率优化\ndate: 2022-12-03\ntags: [OI,DP,斜率优化]\ntoc: true\nmathjax: true\n---\n\n\n# 序列解题报告\n\n建议到我的博客里食用\n\n### 题意：\n首先定义一个目标序列，称为 $k-$ 序列：对于序列中的每一项 $s$，序\n列中至少有 $k-1$ 个其他项都等于 $s$。每次操作可以使序列中的任何一项的值减小 $1$。现在给定一个长度为 $n$ 的升序序列和 $k$，你的任务是帮OIER们计算出转化为 $k-$ 序列需要的最少步数\n\n换句话来说这个序列中的任意一个数必须有至少 $k$ 个与他相同的数。\n\n## 苦苦挣扎第一步：\n\n瞄了一眼数据范围,$2 \\leq k \\leq n \\leq 5*10^5$，应该只能是 $O(n)$ 或者 $O(nlogn)$ 之类的时间复杂度乱搞一下，反过来看一下题序列是已经排好序的，会不会有什么蹊跷呢？贪心？吧每$ k$ 个数字分到一组，通过减把他们全部变成一样的，不幸的是，这样的算法虽然优美，但是是不正确的。只能无奈放弃。\n\n## 苦苦挣扎第二步：\n关于处理序列上的算法无非几个，好像都不能用，只好乱搞一下DP了，因为数据范围巨大，只能开一维dp或者最多加一个 $log(n)$ ，这道题好像也没有要倍增之类的东西，先开成一维，最好想的应该就是前 $k$ 个数是 $k-$ 序列的，根据之前贪心的想法肯定是把数组弄成很多个长度大于等于 $k$ 的连续区间，dp就以当前这个点为后面这个区间的右端点，枚举左端点，动规方程显而易见：\n\n$dp_i=dp_j+sum_i-sum_j-(i-j)*a_{j+1}$ $(k \\leq i)$\n\n$dp_i=inf$ $(i<k)$\n\n## 苦苦挣扎第三步：\n可惜这么好的DP却太慢的，时间复杂度直逼 $O(n^2)$，虽然常数较小，但是抵不住 $2 \\leq k \\leq n \\leq 5*10^5$ , 优化！！！\n\n之前的把 $O(n^2)$ DP优化成 $O(n)$ 需要使用单调队列，要求dp数组有单调性，这道题没有，不行，难道要放弃了吗，还有斜率优化！！！\n\n拆拆大法好!!!：$dp_i=dp_j+sum_i-sum_j-i*a_{j+1}+j*a_{j+1}$\n\n拆完之后再移一下项：$dp_i-sum_i+i*a_{j+1}=dp_j-sum_j+j*a_{j+1}$ $(k \\leq i)$\n\n成功地把与 $i$ 相关的，与 $j$ 相关的，与 $i,j$ 都相关的，分别移到一起，肯定有人问了：这么做干嘛呢，没关系只要这样看这个方程：\n\n$(dp_i-sum_i)+(i)*(a_{j+1})=(dp_j-sum_j+j*a_{j+1})$ $(i>=k)$\n\n$~~~~~~~~~~b~~~~~~~~~~~~~~~~k~~~~~~~~~~x~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~y$\n\n一次函数！！！，平面直角坐标系中有很多与$j$相关的点，相当于过这些点做斜率为 $k$ 的直线交 $y$ 轴于一个点，这个点的纵坐标就是 $y$ ,而 $y$ 就相当于 $dp_j$ 加上很多与 $i$ 相关的常数，因为我们在枚举 $i$ ，所以这些常数是可以确定的，不与 $j$ 相关，接下来就是要求这些交点的纵坐标的最小值。可是怎么优化到 $O(1)$ 求呢，不要慌，慢慢来。\n\n再套一层单调队列，在理解为什么是这样之前先来看看这些点：\n\n样例太小了换一个：\n```\n9 2\n1 2 8 9 15 16 16 16 20\n```\n\n结合样例来看当 $i=9$ 是，应该有决策点 $7,6,5,4,3,2,1,0$ ，画上坐标轴。（下面有图）\n\n$0,1$ 是 $inf$ , 所以没画\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/35xbg4jy.png)\n\n维护一个有序点集，使得这个点集相邻的两个点相连所得的直线斜率单调递增，这个就是用单调队列优化\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hxq5tonp.png)\n\n数据没出好，按理说是 $n$ 条线段头尾相接。\n显然的，我们会让相连斜率小于上面 $(dp_i-sum_i)+(i)*(a[j+1])=(dp_j-sum_j+j*a_{j+1})$ $(i>=k)$ 方程中的 $k$ 也就是 $i$ 弹出，因为 $i$ 单调递增，所以后面也不会考虑他，因为 $b=y-kx$ ，斜率太小的话, $x$ 肯定会很小, $b$ 就更大了，很显然把这些点去掉之后，\n就选的是最下面那个点，再往上走斜率越大，$y$ 增长得很快，也不满足最小。\n\n仍然有个小问题，在计算斜率的时候，double不靠谱，根据等式的性质2，转换乘为除：\n\n$(y_1-y_2)/(x_1-x_2)<(y_3-y_4)/(x_3-x_4)$\n等同于\n$(y_1-y_2)*(x_3-x_4)<(y_3-y_4)*(x_1-x_2)$\n\n代码就很好写了，注意一个 $x$ 对应多个 $y$ 的情况，这种情况斜率处理成无限大。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define int long long\ninline int read();\nint a[500005];\nint l,r;\nint sum[500005];\nint que[500005];\nint dp[500005];\ndouble y(int r){\n    return dp[r]-sum[r]+r*a[r+1];\n}\ndouble x(int r){\n    return a[r+1];\n}\nsigned main(){\n\t#ifdef ONLINE_JUDGE=LUOGU\n\t#else\n\tfreopen(\"sequence.in\",\"r\",stdin);\n\tfreopen(\"sequence.out\",\"w\",stdout);\n\t#endif\n    memset(a,0,sizeof(a));\n    memset(sum,0,sizeof(sum));\n    memset(dp,0,sizeof(dp));\n    memset(que,0,sizeof(que));\n    l=r=0;\n    int n=read(),k=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n        sum[i]=a[i]+sum[i-1];\n    }\n    // que[0]=-1;  \n    for(int i=1;i<=n;i++){\n        if(i-k>=k){\n            while(l<r&&(y(que[r])-y(que[r-1]))*(x(i-k)-x(que[r]))>=(y(i-k)-y(que[r]))*(x(que[r])-x(que[r-1]))){\n                r--;\n            }\n            que[++r]=i-k;\n        }\n        while(l<r&&y(que[l+1])-y(que[l])<=(i)*(((x(que[l+1])-x(que[l]))))){\n            l++;\n        }\n        int j=que[l];\n        if(i-k<0){\n            dp[i]=0x3f3f3f3f3f3f3f3f;\n        }else if(j!=-1){\n            dp[i]=dp[j]+(sum[i]-sum[j])-(i-j)*a[j+1];\n        }else\n            dp[i]=(sum[i])-(i-j)*a[j+1];\n    }\n    printf(\"%lld\\n\",dp[n]);\n\n\treturn 0;\n}\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/\n\n\n\n\n```\n\n作者懒癌晚期，前两个非正解不想写代码了，希望各位理解\n\n[POJ3709](https://vjudge.net/problem/POJ-3709)是这道题的加强版，多了个多组数据，可以去A一下\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e4wfvahj.png)\n","slug":"0006","published":1,"updated":"2024-01-08T12:24:59.114Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjf0007xdaya3yc4xco","content":"<h1 id=\"序列解题报告\"><a href=\"#序列解题报告\" class=\"headerlink\" title=\"序列解题报告\"></a>序列解题报告</h1><p>建议到我的博客里食用</p>\n<h3 id=\"题意：\"><a href=\"#题意：\" class=\"headerlink\" title=\"题意：\"></a>题意：</h3><p>首先定义一个目标序列，称为 $k-$ 序列：对于序列中的每一项 $s$，序<br>列中至少有 $k-1$ 个其他项都等于 $s$。每次操作可以使序列中的任何一项的值减小 $1$。现在给定一个长度为 $n$ 的升序序列和 $k$，你的任务是帮OIER们计算出转化为 $k-$ 序列需要的最少步数</p>\n<p>换句话来说这个序列中的任意一个数必须有至少 $k$ 个与他相同的数。</p>\n<h2 id=\"苦苦挣扎第一步：\"><a href=\"#苦苦挣扎第一步：\" class=\"headerlink\" title=\"苦苦挣扎第一步：\"></a>苦苦挣扎第一步：</h2><p>瞄了一眼数据范围,$2 \\leq k \\leq n \\leq 5*10^5$，应该只能是 $O(n)$ 或者 $O(nlogn)$ 之类的时间复杂度乱搞一下，反过来看一下题序列是已经排好序的，会不会有什么蹊跷呢？贪心？吧每$ k$ 个数字分到一组，通过减把他们全部变成一样的，不幸的是，这样的算法虽然优美，但是是不正确的。只能无奈放弃。</p>\n<h2 id=\"苦苦挣扎第二步：\"><a href=\"#苦苦挣扎第二步：\" class=\"headerlink\" title=\"苦苦挣扎第二步：\"></a>苦苦挣扎第二步：</h2><p>关于处理序列上的算法无非几个，好像都不能用，只好乱搞一下DP了，因为数据范围巨大，只能开一维dp或者最多加一个 $log(n)$ ，这道题好像也没有要倍增之类的东西，先开成一维，最好想的应该就是前 $k$ 个数是 $k-$ 序列的，根据之前贪心的想法肯定是把数组弄成很多个长度大于等于 $k$ 的连续区间，dp就以当前这个点为后面这个区间的右端点，枚举左端点，动规方程显而易见：</p>\n<p>$dp_i=dp_j+sum_i-sum_j-(i-j)*a_{j+1}$ $(k \\leq i)$</p>\n<p>$dp_i=inf$ $(i&lt;k)$</p>\n<h2 id=\"苦苦挣扎第三步：\"><a href=\"#苦苦挣扎第三步：\" class=\"headerlink\" title=\"苦苦挣扎第三步：\"></a>苦苦挣扎第三步：</h2><p>可惜这么好的DP却太慢的，时间复杂度直逼 $O(n^2)$，虽然常数较小，但是抵不住 $2 \\leq k \\leq n \\leq 5*10^5$ , 优化！！！</p>\n<p>之前的把 $O(n^2)$ DP优化成 $O(n)$ 需要使用单调队列，要求dp数组有单调性，这道题没有，不行，难道要放弃了吗，还有斜率优化！！！</p>\n<p>拆拆大法好!!!：$dp_i=dp_j+sum_i-sum_j-i<em>a_{j+1}+j</em>a_{j+1}$</p>\n<p>拆完之后再移一下项：$dp_i-sum_i+i<em>a_{j+1}=dp_j-sum_j+j</em>a_{j+1}$ $(k \\leq i)$</p>\n<p>成功地把与 $i$ 相关的，与 $j$ 相关的，与 $i,j$ 都相关的，分别移到一起，肯定有人问了：这么做干嘛呢，没关系只要这样看这个方程：</p>\n<p>$(dp_i-sum_i)+(i)<em>(a_{j+1})=(dp_j-sum_j+j</em>a_{j+1})$ $(i&gt;=k)$</p>\n<p>$<del>~</del><del>~</del>b<del>~</del><del>~</del><del>~</del>~k<del>~</del><del>~</del>x<del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del>~y$</p>\n<p>一次函数！！！，平面直角坐标系中有很多与$j$相关的点，相当于过这些点做斜率为 $k$ 的直线交 $y$ 轴于一个点，这个点的纵坐标就是 $y$ ,而 $y$ 就相当于 $dp_j$ 加上很多与 $i$ 相关的常数，因为我们在枚举 $i$ ，所以这些常数是可以确定的，不与 $j$ 相关，接下来就是要求这些交点的纵坐标的最小值。可是怎么优化到 $O(1)$ 求呢，不要慌，慢慢来。</p>\n<p>再套一层单调队列，在理解为什么是这样之前先来看看这些点：</p>\n<p>样例太小了换一个：<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">9 2\n1 2 8 9 15 16 16 16 20<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>结合样例来看当 $i=9$ 是，应该有决策点 $7,6,5,4,3,2,1,0$ ，画上坐标轴。（下面有图）</p>\n<p>$0,1$ 是 $inf$ , 所以没画</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/35xbg4jy.png\" alt=\"\"></p>\n<p>维护一个有序点集，使得这个点集相邻的两个点相连所得的直线斜率单调递增，这个就是用单调队列优化</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hxq5tonp.png\" alt=\"\"></p>\n<p>数据没出好，按理说是 $n$ 条线段头尾相接。<br>显然的，我们会让相连斜率小于上面 $(dp_i-sum_i)+(i)<em>(a[j+1])=(dp_j-sum_j+j</em>a_{j+1})$ $(i&gt;=k)$ 方程中的 $k$ 也就是 $i$ 弹出，因为 $i$ 单调递增，所以后面也不会考虑他，因为 $b=y-kx$ ，斜率太小的话, $x$ 肯定会很小, $b$ 就更大了，很显然把这些点去掉之后，<br>就选的是最下面那个点，再往上走斜率越大，$y$ 增长得很快，也不满足最小。</p>\n<p>仍然有个小问题，在计算斜率的时候，double不靠谱，根据等式的性质2，转换乘为除：</p>\n<p>$(y_1-y_2)/(x_1-x_2)&lt;(y_3-y_4)/(x_3-x_4)$<br>等同于<br>$(y_1-y_2)<em>(x_3-x_4)&lt;(y_3-y_4)</em>(x_1-x_2)$</p>\n<p>代码就很好写了，注意一个 $x$ 对应多个 $y$ 的情况，这种情况斜率处理成无限大。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> que<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>r<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">ONLINE_JUDGE<span class=\"token operator\">=</span>LUOGU</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sequence.in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sequence.out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    l<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// que[0]=-1;  </span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token operator\">>=</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>que<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f3f3f3f3f3f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/</span>\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>作者懒癌晚期，前两个非正解不想写代码了，希望各位理解</p>\n<p><a href=\"https://vjudge.net/problem/POJ-3709\">POJ3709</a>是这道题的加强版，多了个多组数据，可以去A一下</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/e4wfvahj.png\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"序列解题报告\"><a href=\"#序列解题报告\" class=\"headerlink\" title=\"序列解题报告\"></a>序列解题报告</h1><p>建议到我的博客里食用</p>\n<h3 id=\"题意：\"><a href=\"#题意：\" class=\"headerlink\" title=\"题意：\"></a>题意：</h3><p>首先定义一个目标序列，称为 $k-$ 序列：对于序列中的每一项 $s$，序<br>列中至少有 $k-1$ 个其他项都等于 $s$。每次操作可以使序列中的任何一项的值减小 $1$。现在给定一个长度为 $n$ 的升序序列和 $k$，你的任务是帮OIER们计算出转化为 $k-$ 序列需要的最少步数</p>\n<p>换句话来说这个序列中的任意一个数必须有至少 $k$ 个与他相同的数。</p>\n<h2 id=\"苦苦挣扎第一步：\"><a href=\"#苦苦挣扎第一步：\" class=\"headerlink\" title=\"苦苦挣扎第一步：\"></a>苦苦挣扎第一步：</h2><p>瞄了一眼数据范围,$2 \\leq k \\leq n \\leq 5*10^5$，应该只能是 $O(n)$ 或者 $O(nlogn)$ 之类的时间复杂度乱搞一下，反过来看一下题序列是已经排好序的，会不会有什么蹊跷呢？贪心？吧每$ k$ 个数字分到一组，通过减把他们全部变成一样的，不幸的是，这样的算法虽然优美，但是是不正确的。只能无奈放弃。</p>\n<h2 id=\"苦苦挣扎第二步：\"><a href=\"#苦苦挣扎第二步：\" class=\"headerlink\" title=\"苦苦挣扎第二步：\"></a>苦苦挣扎第二步：</h2><p>关于处理序列上的算法无非几个，好像都不能用，只好乱搞一下DP了，因为数据范围巨大，只能开一维dp或者最多加一个 $log(n)$ ，这道题好像也没有要倍增之类的东西，先开成一维，最好想的应该就是前 $k$ 个数是 $k-$ 序列的，根据之前贪心的想法肯定是把数组弄成很多个长度大于等于 $k$ 的连续区间，dp就以当前这个点为后面这个区间的右端点，枚举左端点，动规方程显而易见：</p>\n<p>$dp_i=dp_j+sum_i-sum_j-(i-j)*a_{j+1}$ $(k \\leq i)$</p>\n<p>$dp_i=inf$ $(i&lt;k)$</p>\n<h2 id=\"苦苦挣扎第三步：\"><a href=\"#苦苦挣扎第三步：\" class=\"headerlink\" title=\"苦苦挣扎第三步：\"></a>苦苦挣扎第三步：</h2><p>可惜这么好的DP却太慢的，时间复杂度直逼 $O(n^2)$，虽然常数较小，但是抵不住 $2 \\leq k \\leq n \\leq 5*10^5$ , 优化！！！</p>\n<p>之前的把 $O(n^2)$ DP优化成 $O(n)$ 需要使用单调队列，要求dp数组有单调性，这道题没有，不行，难道要放弃了吗，还有斜率优化！！！</p>\n<p>拆拆大法好!!!：$dp_i=dp_j+sum_i-sum_j-i<em>a_{j+1}+j</em>a_{j+1}$</p>\n<p>拆完之后再移一下项：$dp_i-sum_i+i<em>a_{j+1}=dp_j-sum_j+j</em>a_{j+1}$ $(k \\leq i)$</p>\n<p>成功地把与 $i$ 相关的，与 $j$ 相关的，与 $i,j$ 都相关的，分别移到一起，肯定有人问了：这么做干嘛呢，没关系只要这样看这个方程：</p>\n<p>$(dp_i-sum_i)+(i)<em>(a_{j+1})=(dp_j-sum_j+j</em>a_{j+1})$ $(i&gt;=k)$</p>\n<p>$<del>~</del><del>~</del>b<del>~</del><del>~</del><del>~</del>~k<del>~</del><del>~</del>x<del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del>~y$</p>\n<p>一次函数！！！，平面直角坐标系中有很多与$j$相关的点，相当于过这些点做斜率为 $k$ 的直线交 $y$ 轴于一个点，这个点的纵坐标就是 $y$ ,而 $y$ 就相当于 $dp_j$ 加上很多与 $i$ 相关的常数，因为我们在枚举 $i$ ，所以这些常数是可以确定的，不与 $j$ 相关，接下来就是要求这些交点的纵坐标的最小值。可是怎么优化到 $O(1)$ 求呢，不要慌，慢慢来。</p>\n<p>再套一层单调队列，在理解为什么是这样之前先来看看这些点：</p>\n<p>样例太小了换一个：<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">9 2\n1 2 8 9 15 16 16 16 20<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>结合样例来看当 $i=9$ 是，应该有决策点 $7,6,5,4,3,2,1,0$ ，画上坐标轴。（下面有图）</p>\n<p>$0,1$ 是 $inf$ , 所以没画</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/35xbg4jy.png\" alt=\"\"></p>\n<p>维护一个有序点集，使得这个点集相邻的两个点相连所得的直线斜率单调递增，这个就是用单调队列优化</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hxq5tonp.png\" alt=\"\"></p>\n<p>数据没出好，按理说是 $n$ 条线段头尾相接。<br>显然的，我们会让相连斜率小于上面 $(dp_i-sum_i)+(i)<em>(a[j+1])=(dp_j-sum_j+j</em>a_{j+1})$ $(i&gt;=k)$ 方程中的 $k$ 也就是 $i$ 弹出，因为 $i$ 单调递增，所以后面也不会考虑他，因为 $b=y-kx$ ，斜率太小的话, $x$ 肯定会很小, $b$ 就更大了，很显然把这些点去掉之后，<br>就选的是最下面那个点，再往上走斜率越大，$y$ 增长得很快，也不满足最小。</p>\n<p>仍然有个小问题，在计算斜率的时候，double不靠谱，根据等式的性质2，转换乘为除：</p>\n<p>$(y_1-y_2)/(x_1-x_2)&lt;(y_3-y_4)/(x_3-x_4)$<br>等同于<br>$(y_1-y_2)<em>(x_3-x_4)&lt;(y_3-y_4)</em>(x_1-x_2)$</p>\n<p>代码就很好写了，注意一个 $x$ 对应多个 $y$ 的情况，这种情况斜率处理成无限大。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> que<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">500005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>r<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">ONLINE_JUDGE<span class=\"token operator\">=</span>LUOGU</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sequence.in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sequence.out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    l<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// que[0]=-1;  </span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token operator\">>=</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>que<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f3f3f3f3f3f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/</span>\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>作者懒癌晚期，前两个非正解不想写代码了，希望各位理解</p>\n<p><a href=\"https://vjudge.net/problem/POJ-3709\">POJ3709</a>是这道题的加强版，多了个多组数据，可以去A一下</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/e4wfvahj.png\" alt=\"\"></p>\n"},{"title":"网络流随笔","date":"2024-01-02T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n最大流：\n\n常用于有奇奇怪怪约束条件的最大值问题，可输出方案。\n\n最小割：\n\n约束条件为满足 A 则不能满足 B 此类的最小值问题。\n\n也可以解决图论上与割有关的问题。\n\n具有阶段的问题可以分层。\n\n删边的操作一般对应满足某条件。\n\n费用流：\n\n在满足所有奇奇怪怪的约束条件下，代价最小\n","source":"_posts/0007.md","raw":"---\ntitle: 网络流随笔\ndate: 2024-01-03\ntags: [OI,网络流]\ntoc: true\nmathjax: true\n---\n\n最大流：\n\n常用于有奇奇怪怪约束条件的最大值问题，可输出方案。\n\n最小割：\n\n约束条件为满足 A 则不能满足 B 此类的最小值问题。\n\n也可以解决图论上与割有关的问题。\n\n具有阶段的问题可以分层。\n\n删边的操作一般对应满足某条件。\n\n费用流：\n\n在满足所有奇奇怪怪的约束条件下，代价最小\n","slug":"0007","published":1,"updated":"2024-01-08T11:18:19.806Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjg0008xday6mqgf9eq","content":"<p>最大流：</p>\n<p>常用于有奇奇怪怪约束条件的最大值问题，可输出方案。</p>\n<p>最小割：</p>\n<p>约束条件为满足 A 则不能满足 B 此类的最小值问题。</p>\n<p>也可以解决图论上与割有关的问题。</p>\n<p>具有阶段的问题可以分层。</p>\n<p>删边的操作一般对应满足某条件。</p>\n<p>费用流：</p>\n<p>在满足所有奇奇怪怪的约束条件下，代价最小</p>\n","excerpt":"","more":"<p>最大流：</p>\n<p>常用于有奇奇怪怪约束条件的最大值问题，可输出方案。</p>\n<p>最小割：</p>\n<p>约束条件为满足 A 则不能满足 B 此类的最小值问题。</p>\n<p>也可以解决图论上与割有关的问题。</p>\n<p>具有阶段的问题可以分层。</p>\n<p>删边的操作一般对应满足某条件。</p>\n<p>费用流：</p>\n<p>在满足所有奇奇怪怪的约束条件下，代价最小</p>\n"},{"title":"摸鱼记录","date":"2024-01-02T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n\n# 12.29\n## 上午\n模拟赛，切了T1，T2，感觉是简单题，不过做题策略（手推样例）对分数及时间起了很大作用。\n\nT3看题解也有点抽象，算了，摆。\n\nT4人类智慧出现了，希望有人给出严谨证明。\n\n## 下午\n\n14:00-15:00 看邮件\n\n15:00-17:00 写题，只写了一道，低级错误太多了。\n\n## 晚上\n\n吃火锅去了\n\n# 12.30\n\n## 上午\n\n写了2道题，一堆人跑去班上玩去了，看了看github\n\n# 1.2\n\n## 上午\n\n模拟赛，T3文件名 `ex_grand2.in`\n\n## 下午\n\n补模拟赛\n\n# 1.3\n\n费用流\n\n#1.4\n\n## 上午\n\n模拟赛\n\n## 下午\n\n看了2h+,看不懂题解，最后看了看实现又看懂了，不想写。费用流去了。\n\n","source":"_posts/0008.md","raw":"---\ntitle: 摸鱼记录\ndate: 2024-01-03\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n\n# 12.29\n## 上午\n模拟赛，切了T1，T2，感觉是简单题，不过做题策略（手推样例）对分数及时间起了很大作用。\n\nT3看题解也有点抽象，算了，摆。\n\nT4人类智慧出现了，希望有人给出严谨证明。\n\n## 下午\n\n14:00-15:00 看邮件\n\n15:00-17:00 写题，只写了一道，低级错误太多了。\n\n## 晚上\n\n吃火锅去了\n\n# 12.30\n\n## 上午\n\n写了2道题，一堆人跑去班上玩去了，看了看github\n\n# 1.2\n\n## 上午\n\n模拟赛，T3文件名 `ex_grand2.in`\n\n## 下午\n\n补模拟赛\n\n# 1.3\n\n费用流\n\n#1.4\n\n## 上午\n\n模拟赛\n\n## 下午\n\n看了2h+,看不懂题解，最后看了看实现又看懂了，不想写。费用流去了。\n\n","slug":"0008","published":1,"updated":"2024-01-08T11:19:37.080Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjj000axday90y8gnn2","content":"<h1 id=\"12-29\"><a href=\"#12-29\" class=\"headerlink\" title=\"12.29\"></a>12.29</h1><h2 id=\"上午\"><a href=\"#上午\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>模拟赛，切了T1，T2，感觉是简单题，不过做题策略（手推样例）对分数及时间起了很大作用。</p>\n<p>T3看题解也有点抽象，算了，摆。</p>\n<p>T4人类智慧出现了，希望有人给出严谨证明。</p>\n<h2 id=\"下午\"><a href=\"#下午\" class=\"headerlink\" title=\"下午\"></a>下午</h2><p>14:00-15:00 看邮件</p>\n<p>15:00-17:00 写题，只写了一道，低级错误太多了。</p>\n<h2 id=\"晚上\"><a href=\"#晚上\" class=\"headerlink\" title=\"晚上\"></a>晚上</h2><p>吃火锅去了</p>\n<h1 id=\"12-30\"><a href=\"#12-30\" class=\"headerlink\" title=\"12.30\"></a>12.30</h1><h2 id=\"上午-1\"><a href=\"#上午-1\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>写了2道题，一堆人跑去班上玩去了，看了看github</p>\n<h1 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2\"></a>1.2</h1><h2 id=\"上午-2\"><a href=\"#上午-2\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>模拟赛，T3文件名 <code>ex_grand2.in</code></p>\n<h2 id=\"下午-1\"><a href=\"#下午-1\" class=\"headerlink\" title=\"下午\"></a>下午</h2><p>补模拟赛</p>\n<h1 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3\"></a>1.3</h1><p>费用流</p>\n<h1 id=\"1-4\"><a href=\"#1-4\" class=\"headerlink\" title=\"1.4\"></a>1.4</h1><h2 id=\"上午-3\"><a href=\"#上午-3\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>模拟赛</p>\n<h2 id=\"下午-2\"><a href=\"#下午-2\" class=\"headerlink\" title=\"下午\"></a>下午</h2><p>看了2h+,看不懂题解，最后看了看实现又看懂了，不想写。费用流去了。</p>\n","excerpt":"","more":"<h1 id=\"12-29\"><a href=\"#12-29\" class=\"headerlink\" title=\"12.29\"></a>12.29</h1><h2 id=\"上午\"><a href=\"#上午\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>模拟赛，切了T1，T2，感觉是简单题，不过做题策略（手推样例）对分数及时间起了很大作用。</p>\n<p>T3看题解也有点抽象，算了，摆。</p>\n<p>T4人类智慧出现了，希望有人给出严谨证明。</p>\n<h2 id=\"下午\"><a href=\"#下午\" class=\"headerlink\" title=\"下午\"></a>下午</h2><p>14:00-15:00 看邮件</p>\n<p>15:00-17:00 写题，只写了一道，低级错误太多了。</p>\n<h2 id=\"晚上\"><a href=\"#晚上\" class=\"headerlink\" title=\"晚上\"></a>晚上</h2><p>吃火锅去了</p>\n<h1 id=\"12-30\"><a href=\"#12-30\" class=\"headerlink\" title=\"12.30\"></a>12.30</h1><h2 id=\"上午-1\"><a href=\"#上午-1\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>写了2道题，一堆人跑去班上玩去了，看了看github</p>\n<h1 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2\"></a>1.2</h1><h2 id=\"上午-2\"><a href=\"#上午-2\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>模拟赛，T3文件名 <code>ex_grand2.in</code></p>\n<h2 id=\"下午-1\"><a href=\"#下午-1\" class=\"headerlink\" title=\"下午\"></a>下午</h2><p>补模拟赛</p>\n<h1 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3\"></a>1.3</h1><p>费用流</p>\n<h1 id=\"1-4\"><a href=\"#1-4\" class=\"headerlink\" title=\"1.4\"></a>1.4</h1><h2 id=\"上午-3\"><a href=\"#上午-3\" class=\"headerlink\" title=\"上午\"></a>上午</h2><p>模拟赛</p>\n<h2 id=\"下午-2\"><a href=\"#下午-2\" class=\"headerlink\" title=\"下午\"></a>下午</h2><p>看了2h+,看不懂题解，最后看了看实现又看懂了，不想写。费用流去了。</p>\n"},{"title":"浅谈OIer的NVIM配置","date":"2023-08-22T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# 浅谈OIer的NVIM配置\n\n\n本文因跨平台、软件版本更新等不可控因素，部分内容可能失效，请联系我修改！\n\n## 懒者专用\n\n不建议直接使用！因为路径产生的 BUG 可能很多！\n\n我的配置文件仓库：[wxt1221-NvChad](https://github.com/wxt1221/wxt1221-NvChad)\n\n\n## 前言\n\n某某人在机房配好 Vscode 之后发现卡死了，所以准备用 vim 写代码！\n\n但是网上资料太少了，特别是针对 OIer 刷题的配置，所以我就来了。\n\n上效果图：\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fd9wcynp.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z81xs7cv.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hymt7myx.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gsvsinza.png)\n\n## 软件选择\n\n原版 Vim 其实并不好，主要有几点。\n\n- 众所周知开屏有些敏感话题\n  \n- 不好配\n  \n\n不过，Vim 的分支多得很，看了一圈决定是 Nvim！\n\n## 安装\n\nLinux 下的话到你自己发行版的库里面找找就是了。\n\nWindows的话有 qnvim，也就是基于 Qt 的。\n\n## 配置\n\nNvim 打开还是和 Vim 差不多，但是真正好用的是网上打包好的配置文件！\n\n隆重推荐 NvChad！（在 github 上有超 1w 的 star）\n\n[NvChad/NvChad](https://github.com/NvChad/NvChad)\n\n安装很简单，在本项目的官网上有详细介绍不同平台的方法\n\n[Link](https://nvchad.com/docs/quickstart/install)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hjq5ehv8.png)\n\n另外还有字体的问题，建议使用带 Nerd 字样的字体，~~我用的是 JetBrains Mono Nerd Font ，应该是没有问题的~~，~~不要用这个字体，Nerd Font 不全，FiraCode 和 JetBrains Mono 风格差不多~~，都有bug！烦死了！，可以先安装 JetBrains Mono 字体，再安装这个：[Link](https://github.com/wangrunlin/nerd-font-JetBrains-windows)，至于怎么换，这个在各个平台上不同，大概率都是你的终端的配置文件里面可以改。\n\n## Vim相关\n\nVim 和普通的文本编辑器有很大不同，Vim 的宗旨之一就是能在不碰鼠标的情况下实现很多功能，为了能够容下更多操作，所以 Vim 其实是有模式区分的。\n\n最常用的是普通模式，在这个模式下可以通过输入冒号进入命令模式。\n\n还有编辑模式，这个模式顾名思义就是可以编辑文件，按 esc 退出到普通模式。\n\n命令模式就是输入命令的，这个是 Vim 单独的一套命令，不是 bash，同样是按 esc 退出到普通模式。\n\n## 常用快捷键\n\n[Neovim的常见快捷键和命令 - 掘金](https://juejin.cn/post/7084462939595341831)\n\n可以参考这篇。\n\n主要是要记住窗口相关的和 tree 相关的。\n\n## 继续配置\n\n然而你发现 NvChad 不能编译运行调试，好难受，~~马上回到 Vscode~~。\n\n其实是可以的，运行和调试是一个东西，所以先说。\n\n调试依赖于 DAP。\n\nNvim 上最好用的 DAP 就是 nvim-dap ，经过了很久的折腾后，终于找到了方法！\n\n要装一堆插件，进入配置文件夹，Linux在`~/.config/nvim` ，Windows在`$HOME\\AppData\\Local\\nvim` ，里面有一个 `lua` 文件夹打开，进入 `plugins` 文件夹 ，打开 `init.lua` 开始编辑。\n\n这个文件是 Nvim 的包管理器，注意到定义了一个 `default_plugins` 直接在这里面改就行了，加入这些插件：\n\n```\n  {\"nvim-telescope/telescope.nvim\",lazy=false},\n  {\"ravenxrz/DAPInstall.nvim\",lazy=false},\n  {\"mfussenegger/nvim-dap\",lazy=false},\n  {\"rcarriga/nvim-dap-ui\",lazy=false},\n  {\"theHamsta/nvim-dap-virtual-text\",lazy=false},\n```\n\n然后退出重进，不出意外就开始下包了。\n\n这里有一个非常 NTR 的事情，就是我们又要用 Vscode 的东西了，这次使用 Vscode 的调试工具！\n\n按冒号进入命令行模式开始安装\n\n```\n:DIInstall ccppr_vsc\n```\n\n就开始跑命令安装了，等到出现了类似于`Process exited` 的字样就说明成功了。\n\n还没结束，接下来才是真正的极客！\n\n在之前打开过的 `plugins` 文件夹里面有一个 `configs`文件夹，建立新文件夹 `dap` 用于写配置文件\n\n`dap/icon.lua`\n\n```lua\nlocal M={}\nfunction M.setup()\n\tlocal dap_breakpoint = {\n\t\tbreakpoint = {\n\t\t\ttext = \"\",\n\t\t\ttexthl = \"LspDiagnosticsSignError\",\n\t\t\tlinehl = \"\",\n\t\t\tnumhl = \"\",\n\t\t},\n\t\trejected = {\n\t\t\ttext = \"\",\n\t\t\ttexthl = \"LspDiagnosticsSignHint\",\n\t\t\tlinehl = \"\",\n\t\t\tnumhl = \"\",\n\t\t},\n\t\tstopped = {\n\t\t\ttext = \"\",\n\t\t\ttexthl = \"LspDiagnosticsSignInformation\",\n\t\t\tlinehl = \"DiagnosticUnderlineInfo\",\n\t\t\tnumhl = \"LspDiagnosticsSignInformation\",\n\t\t},\n\t}\n\n\tvim.fn.sign_define(\"DapBreakpoint\", dap_breakpoint.breakpoint)\n\tvim.fn.sign_define(\"DapStopped\", dap_breakpoint.stopped)\n\tvim.fn.sign_define(\"DapBreakpointRejected\", dap_breakpoint.rejected)\nend\nreturn M\n```\n\ndap/init.lua\n\n```lua\nlocal M = {}\n\nlocal function configure()\nend\n\nlocal function configure_exts()\nend\n\nlocal function configure_debuggers()\nend\n\nfunction M.setup()\n\tconfigure() -- Configuration\n\tconfigure_exts() -- Extensions\n\tconfigure_debuggers() -- Debugger\n  require(\"plugins.configs.dap.keymap\").setup()\n  require(\"plugins.configs.dap.ui\").setup()\n  require(\"plugins.configs.dap.icon\").setup()\n  require(\"dap.ext.vscode\").load_launchjs(nil, { cppdbg = { \"c\", \"cpp\", \"rust\" } })\n  local dap = require('dap')\n  dap.adapters.cppdbg = {\n    id = 'cppdbg',\n    type = 'executable',\n    command = '/home/wxt/.local/share/nvim/dapinstall/ccppr_vsc/extension/debugAdapters/bin/OpenDebugAD7',\n  }\nend\n\nconfigure_debuggers()\n\nreturn M\n```\n\ndap/keymap.lua\n\n```lua\nlocal M = {}\n\nlocal whichkey = require \"which-key\"\n-- local legendary = require \"legendary\"\n\n-- local function keymap(lhs, rhs, desc)\n--   vim.keymap.set(\"n\", lhs, rhs, { silent = true, desc = desc })\n-- end\n\nfunction M.setup()\n  local keymap = {\n    l = {\n      name = \"DAP\",\n      R = { \"<cmd>lua require'dap'.run_to_cursor()<cr>\", \"Run to Cursor\" },\n      E = { \"<cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')<cr>\", \"Evaluate Input\" },\n      C = { \"<cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')<cr>\", \"Conditional Breakpoint\" },\n      U = { \"<cmd>lua require'dapui'.toggle()<cr>\", \"Toggle UI\" },\n      b = { \"<cmd>lua require'dap'.step_back()<cr>\", \"Step Back\" },\n      c = { \"<cmd>lua require'dap'.continue()<cr>\", \"Continue\" },\n      d = { \"<cmd>lua require'dap'.disconnect()<cr>\", \"Disconnect\" },\n      e = { \"<cmd>lua require'dapui'.eval()<cr>\", \"Evaluate\" },\n      g = { \"<cmd>lua require'dap'.session()<cr>\", \"Get Session\" },\n      h = { \"<cmd>lua require'dap.ui.widgets'.hover()<cr>\", \"Hover Variables\" },\n      S = { \"<cmd>lua require'dap.ui.widgets'.scopes()<cr>\", \"Scopes\" },\n      i = { \"<cmd>lua require'dap'.step_into()<cr>\", \"Step Into\" },\n      o = { \"<cmd>lua require'dap'.step_over()<cr>\", \"Step Over\" },\n      p = { \"<cmd>lua require'dap'.pause.toggle()<cr>\", \"Pause\" },\n      q = { \"<cmd>lua require'dap'.close()<cr>\", \"Quit\" },\n      r = { \"<cmd>lua require'dap'.repl.toggle()<cr>\", \"Toggle Repl\" },\n      s = { \"<cmd>lua require'dap'.continue()<cr>\", \"Start\" },\n      t = { \"<cmd>lua require'dap'.toggle_breakpoint()<cr>\", \"Toggle Breakpoint\" },\n      x = { \"<cmd>lua require'dap'.terminate()<cr>\", \"Terminate\" },\n      u = { \"<cmd>lua require'dap'.step_out()<cr>\", \"Step Out\" },\n    },\n  }\n  local opts = {\n    mode = \"n\",\n    prefix = \"<leader>\",\n    buffer = nil,\n    silent = true,\n    noremap = true,\n    nowait = false,\n  }\n  whichkey.register(keymap, opts)\n  --- require(\"legendary.integrations.which-key\").bind_whichkey(keymap, opts, false)\n  vim.api.nvim_create_autocmd(\"FileType\", {\n        pattern = \"cpp\",\n        callback = function()\n            vim.api.nvim_buf_set_keymap(\n                0,\n                \"n\",\n                \"<F5>\",\n                \":w<CR>:split<CR>:te g++ % -g -DONLINE_JUDGE -std=c++14 -O2 -o %:t:r -fsanitize=address -fsanitize=undefined<CR>i\",\n                { silent = true, noremap = true }\n            )\n        end,\n    })\n  \n  local keymap_v = {\n    l = {\n      name = \"Debug\",\n      e = { \"<cmd>lua require'dapui'.eval()<cr>\", \"Evaluate\" },\n    },\n  }\n  opts = {\n    mode = \"v\",\n    prefix = \"<leader>\",\n    buffer = nil,\n    silent = true,\n    noremap = true,\n    nowait = false,\n  }\n  whichkey.register(keymap_v, opts)\n  --- require(\"legendary.integrations.which-key\").bind_whichkey(keymap_v, opts, false)\nend\n\nreturn M\n```\n\ndap/ui.lua\n\n```lua\nlocal M={}\nfunction M.setup()\n\trequire(\"nvim-dap-virtual-text\").setup({\n\t\tcommented = true,\n\t})\n\n\tlocal dap, dapui = require(\"dap\"), require(\"dapui\")\n\tdapui.setup({\n\t\texpand_lines = true,\n\t\ticons = { expanded = \"\", collapsed = \"\", circular = \"\" },\n\t\tmappings = {\n\t\t\t-- Use a table to apply multiple mappings\n\t\t\texpand = { \"<CR>\", \"<2-LeftMouse>\" },\n\t\t\topen = \"o\",\n\t\t\tremove = \"d\",\n\t\t\tedit = \"e\",\n\t\t\trepl = \"r\",\n\t\t\ttoggle = \"t\",\n\t\t},\n\t\tlayouts = {\n\t\t\t{\n\t\t\t\telements = {\n\t\t\t\t\t{ id = \"scopes\", size = 0.33 },\n\t\t\t\t\t{ id = \"breakpoints\", size = 0.17 },\n\t\t\t\t\t{ id = \"stacks\", size = 0.25 },\n\t\t\t\t\t{ id = \"watches\", size = 0.25 },\n\t\t\t\t},\n\t\t\t\tsize = 0.33,\n\t\t\t\tposition = \"right\",\n\t\t\t},\n\t\t\t{\n\t\t\t\telements = {\n\t\t\t\t\t{ id = \"repl\", size = 0.45 },\n\t\t\t\t\t{ id = \"console\", size = 0.55 },\n\t\t\t\t},\n\t\t\t\tsize = 0.27,\n\t\t\t\tposition = \"bottom\",\n\t\t\t},\n\t\t},\n\t\tfloating = {\n\t\t\tmax_height = 0.9,\n\t\t\tmax_width = 0.5, -- Floats will be treated as percentage of your screen.\n\t\t\tborder = vim.g.border_chars, -- Border style. Can be 'single', 'double' or 'rounded'\n\t\t\tmappings = {\n\t\t\t\tclose = { \"q\", \"<Esc>\" },\n\t\t\t},\n\t\t},\n\t}) -- use default\n\tdap.listeners.after.event_initialized[\"dapui_config\"] = function()\n\t\tdapui.open({})\n\tend\n\tdap.listeners.before.event_terminated[\"dapui_config\"] = function()\n\t\tdapui.close({})\n\tend\n\tdap.listeners.before.event_exited[\"dapui_config\"] = function()\n\t\tdapui.close({})\n\tend\nend\nreturn M\n```\n\n看得懂的可以自行修改其他地方，\n\n但是你们都要改一个地方就是 `dap/init.lua` 里面那个路径，改成 `OpenDebugAD7` 的位置。\n\n另外 `keymap`里面 有一个 `F5` 的地方，下面是编译命令，可以自行修改。\n\n再回到`configs` 下的那个 `init.lua` 就是加了一堆插件的那个，最下面加上\n\n```lua\nrequire(\"plugins.configs.dap.init\").setup()\n```\n\n## 使用简介\n\n还是建议和 Vscode 一样用一个文件夹，因为我们的 NTR 设置，所以需要和 Vscode 一样建立 `.vscode` 文件夹，里面之用 `launch.json` 即可，里面的 `launch.json` 不能用中文注释，`preTasks` 那项要删掉，然后就可以开用了。\n\n提供一个 `launch.json` 模板，直接就能用：[Link](https://www.luogu.com.cn/paste/teshpofs)\n\n打开一个 C++ 文件，普通模式下按下 `F5` 就可以编译，`Space+l` 可以查看调试可以用的命令，`Space+l+c` 开始调试。看得出来和 Vscode 的调试比较像。\n","source":"_posts/0009.md","raw":"---\ntitle: 浅谈OIer的NVIM配置\ndate: 2023-08-23\ntags: [OI,Nvim,IDE]\ntoc: true\nmathjax: true\n---\n\n# 浅谈OIer的NVIM配置\n\n\n本文因跨平台、软件版本更新等不可控因素，部分内容可能失效，请联系我修改！\n\n## 懒者专用\n\n不建议直接使用！因为路径产生的 BUG 可能很多！\n\n我的配置文件仓库：[wxt1221-NvChad](https://github.com/wxt1221/wxt1221-NvChad)\n\n\n## 前言\n\n某某人在机房配好 Vscode 之后发现卡死了，所以准备用 vim 写代码！\n\n但是网上资料太少了，特别是针对 OIer 刷题的配置，所以我就来了。\n\n上效果图：\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fd9wcynp.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z81xs7cv.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hymt7myx.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gsvsinza.png)\n\n## 软件选择\n\n原版 Vim 其实并不好，主要有几点。\n\n- 众所周知开屏有些敏感话题\n  \n- 不好配\n  \n\n不过，Vim 的分支多得很，看了一圈决定是 Nvim！\n\n## 安装\n\nLinux 下的话到你自己发行版的库里面找找就是了。\n\nWindows的话有 qnvim，也就是基于 Qt 的。\n\n## 配置\n\nNvim 打开还是和 Vim 差不多，但是真正好用的是网上打包好的配置文件！\n\n隆重推荐 NvChad！（在 github 上有超 1w 的 star）\n\n[NvChad/NvChad](https://github.com/NvChad/NvChad)\n\n安装很简单，在本项目的官网上有详细介绍不同平台的方法\n\n[Link](https://nvchad.com/docs/quickstart/install)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hjq5ehv8.png)\n\n另外还有字体的问题，建议使用带 Nerd 字样的字体，~~我用的是 JetBrains Mono Nerd Font ，应该是没有问题的~~，~~不要用这个字体，Nerd Font 不全，FiraCode 和 JetBrains Mono 风格差不多~~，都有bug！烦死了！，可以先安装 JetBrains Mono 字体，再安装这个：[Link](https://github.com/wangrunlin/nerd-font-JetBrains-windows)，至于怎么换，这个在各个平台上不同，大概率都是你的终端的配置文件里面可以改。\n\n## Vim相关\n\nVim 和普通的文本编辑器有很大不同，Vim 的宗旨之一就是能在不碰鼠标的情况下实现很多功能，为了能够容下更多操作，所以 Vim 其实是有模式区分的。\n\n最常用的是普通模式，在这个模式下可以通过输入冒号进入命令模式。\n\n还有编辑模式，这个模式顾名思义就是可以编辑文件，按 esc 退出到普通模式。\n\n命令模式就是输入命令的，这个是 Vim 单独的一套命令，不是 bash，同样是按 esc 退出到普通模式。\n\n## 常用快捷键\n\n[Neovim的常见快捷键和命令 - 掘金](https://juejin.cn/post/7084462939595341831)\n\n可以参考这篇。\n\n主要是要记住窗口相关的和 tree 相关的。\n\n## 继续配置\n\n然而你发现 NvChad 不能编译运行调试，好难受，~~马上回到 Vscode~~。\n\n其实是可以的，运行和调试是一个东西，所以先说。\n\n调试依赖于 DAP。\n\nNvim 上最好用的 DAP 就是 nvim-dap ，经过了很久的折腾后，终于找到了方法！\n\n要装一堆插件，进入配置文件夹，Linux在`~/.config/nvim` ，Windows在`$HOME\\AppData\\Local\\nvim` ，里面有一个 `lua` 文件夹打开，进入 `plugins` 文件夹 ，打开 `init.lua` 开始编辑。\n\n这个文件是 Nvim 的包管理器，注意到定义了一个 `default_plugins` 直接在这里面改就行了，加入这些插件：\n\n```\n  {\"nvim-telescope/telescope.nvim\",lazy=false},\n  {\"ravenxrz/DAPInstall.nvim\",lazy=false},\n  {\"mfussenegger/nvim-dap\",lazy=false},\n  {\"rcarriga/nvim-dap-ui\",lazy=false},\n  {\"theHamsta/nvim-dap-virtual-text\",lazy=false},\n```\n\n然后退出重进，不出意外就开始下包了。\n\n这里有一个非常 NTR 的事情，就是我们又要用 Vscode 的东西了，这次使用 Vscode 的调试工具！\n\n按冒号进入命令行模式开始安装\n\n```\n:DIInstall ccppr_vsc\n```\n\n就开始跑命令安装了，等到出现了类似于`Process exited` 的字样就说明成功了。\n\n还没结束，接下来才是真正的极客！\n\n在之前打开过的 `plugins` 文件夹里面有一个 `configs`文件夹，建立新文件夹 `dap` 用于写配置文件\n\n`dap/icon.lua`\n\n```lua\nlocal M={}\nfunction M.setup()\n\tlocal dap_breakpoint = {\n\t\tbreakpoint = {\n\t\t\ttext = \"\",\n\t\t\ttexthl = \"LspDiagnosticsSignError\",\n\t\t\tlinehl = \"\",\n\t\t\tnumhl = \"\",\n\t\t},\n\t\trejected = {\n\t\t\ttext = \"\",\n\t\t\ttexthl = \"LspDiagnosticsSignHint\",\n\t\t\tlinehl = \"\",\n\t\t\tnumhl = \"\",\n\t\t},\n\t\tstopped = {\n\t\t\ttext = \"\",\n\t\t\ttexthl = \"LspDiagnosticsSignInformation\",\n\t\t\tlinehl = \"DiagnosticUnderlineInfo\",\n\t\t\tnumhl = \"LspDiagnosticsSignInformation\",\n\t\t},\n\t}\n\n\tvim.fn.sign_define(\"DapBreakpoint\", dap_breakpoint.breakpoint)\n\tvim.fn.sign_define(\"DapStopped\", dap_breakpoint.stopped)\n\tvim.fn.sign_define(\"DapBreakpointRejected\", dap_breakpoint.rejected)\nend\nreturn M\n```\n\ndap/init.lua\n\n```lua\nlocal M = {}\n\nlocal function configure()\nend\n\nlocal function configure_exts()\nend\n\nlocal function configure_debuggers()\nend\n\nfunction M.setup()\n\tconfigure() -- Configuration\n\tconfigure_exts() -- Extensions\n\tconfigure_debuggers() -- Debugger\n  require(\"plugins.configs.dap.keymap\").setup()\n  require(\"plugins.configs.dap.ui\").setup()\n  require(\"plugins.configs.dap.icon\").setup()\n  require(\"dap.ext.vscode\").load_launchjs(nil, { cppdbg = { \"c\", \"cpp\", \"rust\" } })\n  local dap = require('dap')\n  dap.adapters.cppdbg = {\n    id = 'cppdbg',\n    type = 'executable',\n    command = '/home/wxt/.local/share/nvim/dapinstall/ccppr_vsc/extension/debugAdapters/bin/OpenDebugAD7',\n  }\nend\n\nconfigure_debuggers()\n\nreturn M\n```\n\ndap/keymap.lua\n\n```lua\nlocal M = {}\n\nlocal whichkey = require \"which-key\"\n-- local legendary = require \"legendary\"\n\n-- local function keymap(lhs, rhs, desc)\n--   vim.keymap.set(\"n\", lhs, rhs, { silent = true, desc = desc })\n-- end\n\nfunction M.setup()\n  local keymap = {\n    l = {\n      name = \"DAP\",\n      R = { \"<cmd>lua require'dap'.run_to_cursor()<cr>\", \"Run to Cursor\" },\n      E = { \"<cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')<cr>\", \"Evaluate Input\" },\n      C = { \"<cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')<cr>\", \"Conditional Breakpoint\" },\n      U = { \"<cmd>lua require'dapui'.toggle()<cr>\", \"Toggle UI\" },\n      b = { \"<cmd>lua require'dap'.step_back()<cr>\", \"Step Back\" },\n      c = { \"<cmd>lua require'dap'.continue()<cr>\", \"Continue\" },\n      d = { \"<cmd>lua require'dap'.disconnect()<cr>\", \"Disconnect\" },\n      e = { \"<cmd>lua require'dapui'.eval()<cr>\", \"Evaluate\" },\n      g = { \"<cmd>lua require'dap'.session()<cr>\", \"Get Session\" },\n      h = { \"<cmd>lua require'dap.ui.widgets'.hover()<cr>\", \"Hover Variables\" },\n      S = { \"<cmd>lua require'dap.ui.widgets'.scopes()<cr>\", \"Scopes\" },\n      i = { \"<cmd>lua require'dap'.step_into()<cr>\", \"Step Into\" },\n      o = { \"<cmd>lua require'dap'.step_over()<cr>\", \"Step Over\" },\n      p = { \"<cmd>lua require'dap'.pause.toggle()<cr>\", \"Pause\" },\n      q = { \"<cmd>lua require'dap'.close()<cr>\", \"Quit\" },\n      r = { \"<cmd>lua require'dap'.repl.toggle()<cr>\", \"Toggle Repl\" },\n      s = { \"<cmd>lua require'dap'.continue()<cr>\", \"Start\" },\n      t = { \"<cmd>lua require'dap'.toggle_breakpoint()<cr>\", \"Toggle Breakpoint\" },\n      x = { \"<cmd>lua require'dap'.terminate()<cr>\", \"Terminate\" },\n      u = { \"<cmd>lua require'dap'.step_out()<cr>\", \"Step Out\" },\n    },\n  }\n  local opts = {\n    mode = \"n\",\n    prefix = \"<leader>\",\n    buffer = nil,\n    silent = true,\n    noremap = true,\n    nowait = false,\n  }\n  whichkey.register(keymap, opts)\n  --- require(\"legendary.integrations.which-key\").bind_whichkey(keymap, opts, false)\n  vim.api.nvim_create_autocmd(\"FileType\", {\n        pattern = \"cpp\",\n        callback = function()\n            vim.api.nvim_buf_set_keymap(\n                0,\n                \"n\",\n                \"<F5>\",\n                \":w<CR>:split<CR>:te g++ % -g -DONLINE_JUDGE -std=c++14 -O2 -o %:t:r -fsanitize=address -fsanitize=undefined<CR>i\",\n                { silent = true, noremap = true }\n            )\n        end,\n    })\n  \n  local keymap_v = {\n    l = {\n      name = \"Debug\",\n      e = { \"<cmd>lua require'dapui'.eval()<cr>\", \"Evaluate\" },\n    },\n  }\n  opts = {\n    mode = \"v\",\n    prefix = \"<leader>\",\n    buffer = nil,\n    silent = true,\n    noremap = true,\n    nowait = false,\n  }\n  whichkey.register(keymap_v, opts)\n  --- require(\"legendary.integrations.which-key\").bind_whichkey(keymap_v, opts, false)\nend\n\nreturn M\n```\n\ndap/ui.lua\n\n```lua\nlocal M={}\nfunction M.setup()\n\trequire(\"nvim-dap-virtual-text\").setup({\n\t\tcommented = true,\n\t})\n\n\tlocal dap, dapui = require(\"dap\"), require(\"dapui\")\n\tdapui.setup({\n\t\texpand_lines = true,\n\t\ticons = { expanded = \"\", collapsed = \"\", circular = \"\" },\n\t\tmappings = {\n\t\t\t-- Use a table to apply multiple mappings\n\t\t\texpand = { \"<CR>\", \"<2-LeftMouse>\" },\n\t\t\topen = \"o\",\n\t\t\tremove = \"d\",\n\t\t\tedit = \"e\",\n\t\t\trepl = \"r\",\n\t\t\ttoggle = \"t\",\n\t\t},\n\t\tlayouts = {\n\t\t\t{\n\t\t\t\telements = {\n\t\t\t\t\t{ id = \"scopes\", size = 0.33 },\n\t\t\t\t\t{ id = \"breakpoints\", size = 0.17 },\n\t\t\t\t\t{ id = \"stacks\", size = 0.25 },\n\t\t\t\t\t{ id = \"watches\", size = 0.25 },\n\t\t\t\t},\n\t\t\t\tsize = 0.33,\n\t\t\t\tposition = \"right\",\n\t\t\t},\n\t\t\t{\n\t\t\t\telements = {\n\t\t\t\t\t{ id = \"repl\", size = 0.45 },\n\t\t\t\t\t{ id = \"console\", size = 0.55 },\n\t\t\t\t},\n\t\t\t\tsize = 0.27,\n\t\t\t\tposition = \"bottom\",\n\t\t\t},\n\t\t},\n\t\tfloating = {\n\t\t\tmax_height = 0.9,\n\t\t\tmax_width = 0.5, -- Floats will be treated as percentage of your screen.\n\t\t\tborder = vim.g.border_chars, -- Border style. Can be 'single', 'double' or 'rounded'\n\t\t\tmappings = {\n\t\t\t\tclose = { \"q\", \"<Esc>\" },\n\t\t\t},\n\t\t},\n\t}) -- use default\n\tdap.listeners.after.event_initialized[\"dapui_config\"] = function()\n\t\tdapui.open({})\n\tend\n\tdap.listeners.before.event_terminated[\"dapui_config\"] = function()\n\t\tdapui.close({})\n\tend\n\tdap.listeners.before.event_exited[\"dapui_config\"] = function()\n\t\tdapui.close({})\n\tend\nend\nreturn M\n```\n\n看得懂的可以自行修改其他地方，\n\n但是你们都要改一个地方就是 `dap/init.lua` 里面那个路径，改成 `OpenDebugAD7` 的位置。\n\n另外 `keymap`里面 有一个 `F5` 的地方，下面是编译命令，可以自行修改。\n\n再回到`configs` 下的那个 `init.lua` 就是加了一堆插件的那个，最下面加上\n\n```lua\nrequire(\"plugins.configs.dap.init\").setup()\n```\n\n## 使用简介\n\n还是建议和 Vscode 一样用一个文件夹，因为我们的 NTR 设置，所以需要和 Vscode 一样建立 `.vscode` 文件夹，里面之用 `launch.json` 即可，里面的 `launch.json` 不能用中文注释，`preTasks` 那项要删掉，然后就可以开用了。\n\n提供一个 `launch.json` 模板，直接就能用：[Link](https://www.luogu.com.cn/paste/teshpofs)\n\n打开一个 C++ 文件，普通模式下按下 `F5` 就可以编译，`Space+l` 可以查看调试可以用的命令，`Space+l+c` 开始调试。看得出来和 Vscode 的调试比较像。\n","slug":"0009","published":1,"updated":"2024-01-08T11:20:28.866Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjk000bxdaya1hd9e4n","content":"<h1 id=\"浅谈OIer的NVIM配置\"><a href=\"#浅谈OIer的NVIM配置\" class=\"headerlink\" title=\"浅谈OIer的NVIM配置\"></a>浅谈OIer的NVIM配置</h1><p>本文因跨平台、软件版本更新等不可控因素，部分内容可能失效，请联系我修改！</p>\n<h2 id=\"懒者专用\"><a href=\"#懒者专用\" class=\"headerlink\" title=\"懒者专用\"></a>懒者专用</h2><p>不建议直接使用！因为路径产生的 BUG 可能很多！</p>\n<p>我的配置文件仓库：<a href=\"https://github.com/wxt1221/wxt1221-NvChad\">wxt1221-NvChad</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>某某人在机房配好 Vscode 之后发现卡死了，所以准备用 vim 写代码！</p>\n<p>但是网上资料太少了，特别是针对 OIer 刷题的配置，所以我就来了。</p>\n<p>上效果图：</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/fd9wcynp.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/z81xs7cv.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hymt7myx.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/gsvsinza.png\" alt=\"\"></p>\n<h2 id=\"软件选择\"><a href=\"#软件选择\" class=\"headerlink\" title=\"软件选择\"></a>软件选择</h2><p>原版 Vim 其实并不好，主要有几点。</p>\n<ul>\n<li><p>众所周知开屏有些敏感话题</p>\n</li>\n<li><p>不好配</p>\n</li>\n</ul>\n<p>不过，Vim 的分支多得很，看了一圈决定是 Nvim！</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Linux 下的话到你自己发行版的库里面找找就是了。</p>\n<p>Windows的话有 qnvim，也就是基于 Qt 的。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Nvim 打开还是和 Vim 差不多，但是真正好用的是网上打包好的配置文件！</p>\n<p>隆重推荐 NvChad！（在 github 上有超 1w 的 star）</p>\n<p><a href=\"https://github.com/NvChad/NvChad\">NvChad/NvChad</a></p>\n<p>安装很简单，在本项目的官网上有详细介绍不同平台的方法</p>\n<p><a href=\"https://nvchad.com/docs/quickstart/install\">Link</a></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hjq5ehv8.png\" alt=\"\"></p>\n<p>另外还有字体的问题，建议使用带 Nerd 字样的字体，<del>我用的是 JetBrains Mono Nerd Font ，应该是没有问题的</del>，<del>不要用这个字体，Nerd Font 不全，FiraCode 和 JetBrains Mono 风格差不多</del>，都有bug！烦死了！，可以先安装 JetBrains Mono 字体，再安装这个：<a href=\"https://github.com/wangrunlin/nerd-font-JetBrains-windows\">Link</a>，至于怎么换，这个在各个平台上不同，大概率都是你的终端的配置文件里面可以改。</p>\n<h2 id=\"Vim相关\"><a href=\"#Vim相关\" class=\"headerlink\" title=\"Vim相关\"></a>Vim相关</h2><p>Vim 和普通的文本编辑器有很大不同，Vim 的宗旨之一就是能在不碰鼠标的情况下实现很多功能，为了能够容下更多操作，所以 Vim 其实是有模式区分的。</p>\n<p>最常用的是普通模式，在这个模式下可以通过输入冒号进入命令模式。</p>\n<p>还有编辑模式，这个模式顾名思义就是可以编辑文件，按 esc 退出到普通模式。</p>\n<p>命令模式就是输入命令的，这个是 Vim 单独的一套命令，不是 bash，同样是按 esc 退出到普通模式。</p>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><p><a href=\"https://juejin.cn/post/7084462939595341831\">Neovim的常见快捷键和命令 - 掘金</a></p>\n<p>可以参考这篇。</p>\n<p>主要是要记住窗口相关的和 tree 相关的。</p>\n<h2 id=\"继续配置\"><a href=\"#继续配置\" class=\"headerlink\" title=\"继续配置\"></a>继续配置</h2><p>然而你发现 NvChad 不能编译运行调试，好难受，<del>马上回到 Vscode</del>。</p>\n<p>其实是可以的，运行和调试是一个东西，所以先说。</p>\n<p>调试依赖于 DAP。</p>\n<p>Nvim 上最好用的 DAP 就是 nvim-dap ，经过了很久的折腾后，终于找到了方法！</p>\n<p>要装一堆插件，进入配置文件夹，Linux在<code>~/.config/nvim</code> ，Windows在<code>$HOME\\AppData\\Local\\nvim</code> ，里面有一个 <code>lua</code> 文件夹打开，进入 <code>plugins</code> 文件夹 ，打开 <code>init.lua</code> 开始编辑。</p>\n<p>这个文件是 Nvim 的包管理器，注意到定义了一个 <code>default_plugins</code> 直接在这里面改就行了，加入这些插件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;nvim-telescope&#x2F;telescope.nvim&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;ravenxrz&#x2F;DAPInstall.nvim&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;mfussenegger&#x2F;nvim-dap&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;rcarriga&#x2F;nvim-dap-ui&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;theHamsta&#x2F;nvim-dap-virtual-text&quot;,lazy&#x3D;false&#125;,<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后退出重进，不出意外就开始下包了。</p>\n<p>这里有一个非常 NTR 的事情，就是我们又要用 Vscode 的东西了，这次使用 Vscode 的调试工具！</p>\n<p>按冒号进入命令行模式开始安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">:DIInstall ccppr_vsc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就开始跑命令安装了，等到出现了类似于<code>Process exited</code> 的字样就说明成功了。</p>\n<p>还没结束，接下来才是真正的极客！</p>\n<p>在之前打开过的 <code>plugins</code> 文件夹里面有一个 <code>configs</code>文件夹，建立新文件夹 <code>dap</code> 用于写配置文件</p>\n<p><code>dap/icon.lua</code></p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> dap_breakpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tbreakpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttexthl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignError\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlinehl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\tnumhl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\trejected <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttexthl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignHint\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlinehl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\tnumhl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tstopped <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttexthl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignInformation\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlinehl <span class=\"token operator\">=</span> <span class=\"token string\">\"DiagnosticUnderlineInfo\"</span><span class=\"token punctuation\">,</span>\n\t\t\tnumhl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignInformation\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tvim<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">sign_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DapBreakpoint\"</span><span class=\"token punctuation\">,</span> dap_breakpoint<span class=\"token punctuation\">.</span>breakpoint<span class=\"token punctuation\">)</span>\n\tvim<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">sign_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DapStopped\"</span><span class=\"token punctuation\">,</span> dap_breakpoint<span class=\"token punctuation\">.</span>stopped<span class=\"token punctuation\">)</span>\n\tvim<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">sign_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DapBreakpointRejected\"</span><span class=\"token punctuation\">,</span> dap_breakpoint<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>dap/init.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configure_exts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configure_debuggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Configuration</span>\n\t<span class=\"token function\">configure_exts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Extensions</span>\n\t<span class=\"token function\">configure_debuggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Debugger</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.keymap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.ui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.icon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dap.ext.vscode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load_launchjs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> cppdbg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rust\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span> dap <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dap'</span><span class=\"token punctuation\">)</span>\n  dap<span class=\"token punctuation\">.</span>adapters<span class=\"token punctuation\">.</span>cppdbg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    id <span class=\"token operator\">=</span> <span class=\"token string\">'cppdbg'</span><span class=\"token punctuation\">,</span>\n    type <span class=\"token operator\">=</span> <span class=\"token string\">'executable'</span><span class=\"token punctuation\">,</span>\n    command <span class=\"token operator\">=</span> <span class=\"token string\">'/home/wxt/.local/share/nvim/dapinstall/ccppr_vsc/extension/debugAdapters/bin/OpenDebugAD7'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">configure_debuggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>dap/keymap.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">local</span> whichkey <span class=\"token operator\">=</span> require <span class=\"token string\">\"which-key\"</span>\n<span class=\"token comment\">-- local legendary = require \"legendary\"</span>\n\n<span class=\"token comment\">-- local function keymap(lhs, rhs, desc)</span>\n<span class=\"token comment\">--   vim.keymap.set(\"n\", lhs, rhs, &#123; silent = true, desc = desc &#125;)</span>\n<span class=\"token comment\">-- end</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span> keymap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    l <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      name <span class=\"token operator\">=</span> <span class=\"token string\">\"DAP\"</span><span class=\"token punctuation\">,</span>\n      R <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.run_to_cursor()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run to Cursor\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      E <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluate Input\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      C <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Conditional Breakpoint\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      U <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.toggle()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Toggle UI\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_back()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Back\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.continue()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Continue\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.disconnect()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Disconnect\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      e <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.eval()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluate\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      g <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.session()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Get Session\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      h <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap.ui.widgets'.hover()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hover Variables\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      S <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap.ui.widgets'.scopes()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Scopes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      i <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_into()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Into\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_over()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Over\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.pause.toggle()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pause\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      q <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.close()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Quit\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      r <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.repl.toggle()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Toggle Repl\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.continue()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Start\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.toggle_breakpoint()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Toggle Breakpoint\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.terminate()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminate\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      u <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_out()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Out\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">local</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span>\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;leader>\"</span><span class=\"token punctuation\">,</span>\n    buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span>\n    silent <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    nowait <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  whichkey<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>keymap<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">--- require(\"legendary.integrations.which-key\").bind_whichkey(keymap, opts, false)</span>\n  vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_create_autocmd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FileType\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span>\n        callback <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_buf_set_keymap</span><span class=\"token punctuation\">(</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"&lt;F5>\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\":w&lt;CR>:split&lt;CR>:te g++ % -g -DONLINE_JUDGE -std=c++14 -O2 -o %:t:r -fsanitize=address -fsanitize=undefined&lt;CR>i\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">&#123;</span> silent <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">local</span> keymap_v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    l <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      name <span class=\"token operator\">=</span> <span class=\"token string\">\"Debug\"</span><span class=\"token punctuation\">,</span>\n      e <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.eval()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluate\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span>\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;leader>\"</span><span class=\"token punctuation\">,</span>\n    buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span>\n    silent <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    nowait <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  whichkey<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>keymap_v<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">--- require(\"legendary.integrations.which-key\").bind_whichkey(keymap_v, opts, false)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>dap/ui.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nvim-dap-virtual-text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t\tcommented <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> dap<span class=\"token punctuation\">,</span> dapui <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dapui\"</span><span class=\"token punctuation\">)</span>\n\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t\texpand_lines <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n\t\ticons <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> expanded <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> collapsed <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> circular <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tmappings <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">-- Use a table to apply multiple mappings</span>\n\t\t\texpand <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;CR>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;2-LeftMouse>\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\topen <span class=\"token operator\">=</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span>\n\t\t\tremove <span class=\"token operator\">=</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span>\n\t\t\tedit <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span>\n\t\t\trepl <span class=\"token operator\">=</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttoggle <span class=\"token operator\">=</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tlayouts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\telements <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"scopes\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.33</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"breakpoints\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.17</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"stacks\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"watches\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0.33</span><span class=\"token punctuation\">,</span>\n\t\t\t\tposition <span class=\"token operator\">=</span> <span class=\"token string\">\"right\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\telements <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"repl\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.45</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"console\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.55</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0.27</span><span class=\"token punctuation\">,</span>\n\t\t\t\tposition <span class=\"token operator\">=</span> <span class=\"token string\">\"bottom\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tfloating <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tmax_height <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>\n\t\t\tmax_width <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Floats will be treated as percentage of your screen.</span>\n\t\t\tborder <span class=\"token operator\">=</span> vim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>border_chars<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Border style. Can be 'single', 'double' or 'rounded'</span>\n\t\t\tmappings <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tclose <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Esc>\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- use default</span>\n\tdap<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span>after<span class=\"token punctuation\">.</span>event_initialized<span class=\"token punctuation\">[</span><span class=\"token string\">\"dapui_config\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\tdap<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">.</span>event_terminated<span class=\"token punctuation\">[</span><span class=\"token string\">\"dapui_config\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\tdap<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">.</span>event_exited<span class=\"token punctuation\">[</span><span class=\"token string\">\"dapui_config\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看得懂的可以自行修改其他地方，</p>\n<p>但是你们都要改一个地方就是 <code>dap/init.lua</code> 里面那个路径，改成 <code>OpenDebugAD7</code> 的位置。</p>\n<p>另外 <code>keymap</code>里面 有一个 <code>F5</code> 的地方，下面是编译命令，可以自行修改。</p>\n<p>再回到<code>configs</code> 下的那个 <code>init.lua</code> 就是加了一堆插件的那个，最下面加上</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"使用简介\"><a href=\"#使用简介\" class=\"headerlink\" title=\"使用简介\"></a>使用简介</h2><p>还是建议和 Vscode 一样用一个文件夹，因为我们的 NTR 设置，所以需要和 Vscode 一样建立 <code>.vscode</code> 文件夹，里面之用 <code>launch.json</code> 即可，里面的 <code>launch.json</code> 不能用中文注释，<code>preTasks</code> 那项要删掉，然后就可以开用了。</p>\n<p>提供一个 <code>launch.json</code> 模板，直接就能用：<a href=\"https://www.luogu.com.cn/paste/teshpofs\">Link</a></p>\n<p>打开一个 C++ 文件，普通模式下按下 <code>F5</code> 就可以编译，<code>Space+l</code> 可以查看调试可以用的命令，<code>Space+l+c</code> 开始调试。看得出来和 Vscode 的调试比较像。</p>\n","excerpt":"","more":"<h1 id=\"浅谈OIer的NVIM配置\"><a href=\"#浅谈OIer的NVIM配置\" class=\"headerlink\" title=\"浅谈OIer的NVIM配置\"></a>浅谈OIer的NVIM配置</h1><p>本文因跨平台、软件版本更新等不可控因素，部分内容可能失效，请联系我修改！</p>\n<h2 id=\"懒者专用\"><a href=\"#懒者专用\" class=\"headerlink\" title=\"懒者专用\"></a>懒者专用</h2><p>不建议直接使用！因为路径产生的 BUG 可能很多！</p>\n<p>我的配置文件仓库：<a href=\"https://github.com/wxt1221/wxt1221-NvChad\">wxt1221-NvChad</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>某某人在机房配好 Vscode 之后发现卡死了，所以准备用 vim 写代码！</p>\n<p>但是网上资料太少了，特别是针对 OIer 刷题的配置，所以我就来了。</p>\n<p>上效果图：</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/fd9wcynp.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/z81xs7cv.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hymt7myx.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/gsvsinza.png\" alt=\"\"></p>\n<h2 id=\"软件选择\"><a href=\"#软件选择\" class=\"headerlink\" title=\"软件选择\"></a>软件选择</h2><p>原版 Vim 其实并不好，主要有几点。</p>\n<ul>\n<li><p>众所周知开屏有些敏感话题</p>\n</li>\n<li><p>不好配</p>\n</li>\n</ul>\n<p>不过，Vim 的分支多得很，看了一圈决定是 Nvim！</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Linux 下的话到你自己发行版的库里面找找就是了。</p>\n<p>Windows的话有 qnvim，也就是基于 Qt 的。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Nvim 打开还是和 Vim 差不多，但是真正好用的是网上打包好的配置文件！</p>\n<p>隆重推荐 NvChad！（在 github 上有超 1w 的 star）</p>\n<p><a href=\"https://github.com/NvChad/NvChad\">NvChad/NvChad</a></p>\n<p>安装很简单，在本项目的官网上有详细介绍不同平台的方法</p>\n<p><a href=\"https://nvchad.com/docs/quickstart/install\">Link</a></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hjq5ehv8.png\" alt=\"\"></p>\n<p>另外还有字体的问题，建议使用带 Nerd 字样的字体，<del>我用的是 JetBrains Mono Nerd Font ，应该是没有问题的</del>，<del>不要用这个字体，Nerd Font 不全，FiraCode 和 JetBrains Mono 风格差不多</del>，都有bug！烦死了！，可以先安装 JetBrains Mono 字体，再安装这个：<a href=\"https://github.com/wangrunlin/nerd-font-JetBrains-windows\">Link</a>，至于怎么换，这个在各个平台上不同，大概率都是你的终端的配置文件里面可以改。</p>\n<h2 id=\"Vim相关\"><a href=\"#Vim相关\" class=\"headerlink\" title=\"Vim相关\"></a>Vim相关</h2><p>Vim 和普通的文本编辑器有很大不同，Vim 的宗旨之一就是能在不碰鼠标的情况下实现很多功能，为了能够容下更多操作，所以 Vim 其实是有模式区分的。</p>\n<p>最常用的是普通模式，在这个模式下可以通过输入冒号进入命令模式。</p>\n<p>还有编辑模式，这个模式顾名思义就是可以编辑文件，按 esc 退出到普通模式。</p>\n<p>命令模式就是输入命令的，这个是 Vim 单独的一套命令，不是 bash，同样是按 esc 退出到普通模式。</p>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><p><a href=\"https://juejin.cn/post/7084462939595341831\">Neovim的常见快捷键和命令 - 掘金</a></p>\n<p>可以参考这篇。</p>\n<p>主要是要记住窗口相关的和 tree 相关的。</p>\n<h2 id=\"继续配置\"><a href=\"#继续配置\" class=\"headerlink\" title=\"继续配置\"></a>继续配置</h2><p>然而你发现 NvChad 不能编译运行调试，好难受，<del>马上回到 Vscode</del>。</p>\n<p>其实是可以的，运行和调试是一个东西，所以先说。</p>\n<p>调试依赖于 DAP。</p>\n<p>Nvim 上最好用的 DAP 就是 nvim-dap ，经过了很久的折腾后，终于找到了方法！</p>\n<p>要装一堆插件，进入配置文件夹，Linux在<code>~/.config/nvim</code> ，Windows在<code>$HOME\\AppData\\Local\\nvim</code> ，里面有一个 <code>lua</code> 文件夹打开，进入 <code>plugins</code> 文件夹 ，打开 <code>init.lua</code> 开始编辑。</p>\n<p>这个文件是 Nvim 的包管理器，注意到定义了一个 <code>default_plugins</code> 直接在这里面改就行了，加入这些插件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;nvim-telescope&#x2F;telescope.nvim&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;ravenxrz&#x2F;DAPInstall.nvim&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;mfussenegger&#x2F;nvim-dap&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;rcarriga&#x2F;nvim-dap-ui&quot;,lazy&#x3D;false&#125;,\n&#123;&quot;theHamsta&#x2F;nvim-dap-virtual-text&quot;,lazy&#x3D;false&#125;,<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后退出重进，不出意外就开始下包了。</p>\n<p>这里有一个非常 NTR 的事情，就是我们又要用 Vscode 的东西了，这次使用 Vscode 的调试工具！</p>\n<p>按冒号进入命令行模式开始安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">:DIInstall ccppr_vsc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就开始跑命令安装了，等到出现了类似于<code>Process exited</code> 的字样就说明成功了。</p>\n<p>还没结束，接下来才是真正的极客！</p>\n<p>在之前打开过的 <code>plugins</code> 文件夹里面有一个 <code>configs</code>文件夹，建立新文件夹 <code>dap</code> 用于写配置文件</p>\n<p><code>dap/icon.lua</code></p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> dap_breakpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tbreakpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttexthl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignError\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlinehl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\tnumhl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\trejected <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttexthl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignHint\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlinehl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\tnumhl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tstopped <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttexthl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignInformation\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlinehl <span class=\"token operator\">=</span> <span class=\"token string\">\"DiagnosticUnderlineInfo\"</span><span class=\"token punctuation\">,</span>\n\t\t\tnumhl <span class=\"token operator\">=</span> <span class=\"token string\">\"LspDiagnosticsSignInformation\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tvim<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">sign_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DapBreakpoint\"</span><span class=\"token punctuation\">,</span> dap_breakpoint<span class=\"token punctuation\">.</span>breakpoint<span class=\"token punctuation\">)</span>\n\tvim<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">sign_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DapStopped\"</span><span class=\"token punctuation\">,</span> dap_breakpoint<span class=\"token punctuation\">.</span>stopped<span class=\"token punctuation\">)</span>\n\tvim<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">sign_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DapBreakpointRejected\"</span><span class=\"token punctuation\">,</span> dap_breakpoint<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>dap/init.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configure_exts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configure_debuggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Configuration</span>\n\t<span class=\"token function\">configure_exts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Extensions</span>\n\t<span class=\"token function\">configure_debuggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Debugger</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.keymap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.ui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.icon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dap.ext.vscode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load_launchjs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> cppdbg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rust\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span> dap <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dap'</span><span class=\"token punctuation\">)</span>\n  dap<span class=\"token punctuation\">.</span>adapters<span class=\"token punctuation\">.</span>cppdbg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    id <span class=\"token operator\">=</span> <span class=\"token string\">'cppdbg'</span><span class=\"token punctuation\">,</span>\n    type <span class=\"token operator\">=</span> <span class=\"token string\">'executable'</span><span class=\"token punctuation\">,</span>\n    command <span class=\"token operator\">=</span> <span class=\"token string\">'/home/wxt/.local/share/nvim/dapinstall/ccppr_vsc/extension/debugAdapters/bin/OpenDebugAD7'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">configure_debuggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>dap/keymap.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">local</span> whichkey <span class=\"token operator\">=</span> require <span class=\"token string\">\"which-key\"</span>\n<span class=\"token comment\">-- local legendary = require \"legendary\"</span>\n\n<span class=\"token comment\">-- local function keymap(lhs, rhs, desc)</span>\n<span class=\"token comment\">--   vim.keymap.set(\"n\", lhs, rhs, &#123; silent = true, desc = desc &#125;)</span>\n<span class=\"token comment\">-- end</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span> keymap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    l <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      name <span class=\"token operator\">=</span> <span class=\"token string\">\"DAP\"</span><span class=\"token punctuation\">,</span>\n      R <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.run_to_cursor()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run to Cursor\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      E <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluate Input\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      C <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Conditional Breakpoint\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      U <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.toggle()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Toggle UI\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_back()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Back\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.continue()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Continue\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.disconnect()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Disconnect\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      e <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.eval()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluate\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      g <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.session()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Get Session\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      h <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap.ui.widgets'.hover()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hover Variables\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      S <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap.ui.widgets'.scopes()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Scopes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      i <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_into()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Into\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_over()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Over\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.pause.toggle()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pause\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      q <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.close()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Quit\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      r <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.repl.toggle()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Toggle Repl\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.continue()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Start\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.toggle_breakpoint()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Toggle Breakpoint\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.terminate()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminate\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      u <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dap'.step_out()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step Out\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">local</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span>\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;leader>\"</span><span class=\"token punctuation\">,</span>\n    buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span>\n    silent <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    nowait <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  whichkey<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>keymap<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">--- require(\"legendary.integrations.which-key\").bind_whichkey(keymap, opts, false)</span>\n  vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_create_autocmd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FileType\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span>\n        callback <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_buf_set_keymap</span><span class=\"token punctuation\">(</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"&lt;F5>\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\":w&lt;CR>:split&lt;CR>:te g++ % -g -DONLINE_JUDGE -std=c++14 -O2 -o %:t:r -fsanitize=address -fsanitize=undefined&lt;CR>i\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">&#123;</span> silent <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">local</span> keymap_v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    l <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      name <span class=\"token operator\">=</span> <span class=\"token string\">\"Debug\"</span><span class=\"token punctuation\">,</span>\n      e <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;cmd>lua require'dapui'.eval()&lt;cr>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluate\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span>\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;leader>\"</span><span class=\"token punctuation\">,</span>\n    buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span>\n    silent <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    nowait <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  whichkey<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>keymap_v<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">--- require(\"legendary.integrations.which-key\").bind_whichkey(keymap_v, opts, false)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>dap/ui.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nvim-dap-virtual-text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t\tcommented <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> dap<span class=\"token punctuation\">,</span> dapui <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dapui\"</span><span class=\"token punctuation\">)</span>\n\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t\texpand_lines <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n\t\ticons <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> expanded <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> collapsed <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> circular <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tmappings <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">-- Use a table to apply multiple mappings</span>\n\t\t\texpand <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&lt;CR>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;2-LeftMouse>\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\topen <span class=\"token operator\">=</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span>\n\t\t\tremove <span class=\"token operator\">=</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span>\n\t\t\tedit <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span>\n\t\t\trepl <span class=\"token operator\">=</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttoggle <span class=\"token operator\">=</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tlayouts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\telements <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"scopes\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.33</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"breakpoints\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.17</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"stacks\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"watches\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0.33</span><span class=\"token punctuation\">,</span>\n\t\t\t\tposition <span class=\"token operator\">=</span> <span class=\"token string\">\"right\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\telements <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"repl\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.45</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"console\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0.55</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0.27</span><span class=\"token punctuation\">,</span>\n\t\t\t\tposition <span class=\"token operator\">=</span> <span class=\"token string\">\"bottom\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\tfloating <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tmax_height <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>\n\t\t\tmax_width <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Floats will be treated as percentage of your screen.</span>\n\t\t\tborder <span class=\"token operator\">=</span> vim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>border_chars<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Border style. Can be 'single', 'double' or 'rounded'</span>\n\t\t\tmappings <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tclose <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Esc>\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- use default</span>\n\tdap<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span>after<span class=\"token punctuation\">.</span>event_initialized<span class=\"token punctuation\">[</span><span class=\"token string\">\"dapui_config\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\tdap<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">.</span>event_terminated<span class=\"token punctuation\">[</span><span class=\"token string\">\"dapui_config\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\tdap<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">.</span>event_exited<span class=\"token punctuation\">[</span><span class=\"token string\">\"dapui_config\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tdapui<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看得懂的可以自行修改其他地方，</p>\n<p>但是你们都要改一个地方就是 <code>dap/init.lua</code> 里面那个路径，改成 <code>OpenDebugAD7</code> 的位置。</p>\n<p>另外 <code>keymap</code>里面 有一个 <code>F5</code> 的地方，下面是编译命令，可以自行修改。</p>\n<p>再回到<code>configs</code> 下的那个 <code>init.lua</code> 就是加了一堆插件的那个，最下面加上</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugins.configs.dap.init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"使用简介\"><a href=\"#使用简介\" class=\"headerlink\" title=\"使用简介\"></a>使用简介</h2><p>还是建议和 Vscode 一样用一个文件夹，因为我们的 NTR 设置，所以需要和 Vscode 一样建立 <code>.vscode</code> 文件夹，里面之用 <code>launch.json</code> 即可，里面的 <code>launch.json</code> 不能用中文注释，<code>preTasks</code> 那项要删掉，然后就可以开用了。</p>\n<p>提供一个 <code>launch.json</code> 模板，直接就能用：<a href=\"https://www.luogu.com.cn/paste/teshpofs\">Link</a></p>\n<p>打开一个 C++ 文件，普通模式下按下 <code>F5</code> 就可以编译，<code>Space+l</code> 可以查看调试可以用的命令，<code>Space+l+c</code> 开始调试。看得出来和 Vscode 的调试比较像。</p>\n"},{"title":"CF449B","date":"2024-01-02T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n## 题目简述\n\n有一张边带权的无向图，边分成两种，第一种无特殊限制，第二种边有一个端点在 $1$ 号节点，问至多可以删多少条边可以使原图从 $1$ 到所有点的最短路长度不变。\n\n## 分析\n\n很容易注意到需要跑单源最短路，由于题目中要求的是使最短路不变的情况，所以考虑是否可以在最短路过程中 DP 转移下功夫，很明显需要优先从第一种边转移，于是在转移的过程中注意一下转移过去的值相等时如何更新即可，因为最短路的转移过程没有后效性，所以这样转移是正确的。\n\n最后统计没有进行 DP 转移的边的数量即可。\n\n## 代码实现\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#define int long long\ninline int read();\nint fir[100005];\nint nxt[800005];\nint v[800005];\nint w[800005];\nint knd[800005];\nint now=0;\nbool vised[100005];\nclass node{\n    public:\n        int x,y;\n        node(int xx,int yy){\n            x=xx;\n            y=yy;\n        }\n};\nbool operator < (node a,node b){\n    return a.y>b.y;\n}\nstd::priority_queue<node>qu;\nint from[100005];\nint dp[100005];\nint used[800005];\nvoid add(int xx,int yy,int zz,int kk){\n    now++;\n    knd[now]=kk;\n    v[now]=yy;\n    w[now]=zz;\n    nxt[now]=fir[xx];\n    fir[xx]=now;\n    return ;\n}\nsigned main(){\n\t#ifdef ONLINE_JUDGE\n\t#else\n\tfreopen(\".in\",\"r\",stdin);\n\tfreopen(\".out\",\"w\",stdout);\n\t#endif\n    int n=read(),m,k;\n    m=read();\n    k=read();\n    for(int i=1;i<=n;i++){\n        fir[i]=-1;\n        dp[i]=0x3f3f3f3f3f3f3f3fll;\n    }\n    for(int i=1;i<=m;i++){\n        int xx=read(),yy,zz;\n        yy=read();\n        zz=read();\n        add(xx,yy,zz,0);\n        add(yy,xx,zz,0);\n    }\n    for(int i=1;i<=k;i++){\n        int s=read();\n        int y=read();\n        add(1,s,y,1);\n        add(s,1,y,1);\n    }\n    dp[1]=0;\n    qu.push(node(1,0));\n    while(qu.size()>0){\n        node noww=qu.top();\n        qu.pop();\n        int now=noww.x;\n        if(vised[now]){\n            continue;\n        }\n        vised[now]=1;\n        for(int i=fir[now];i!=-1;i=nxt[i]){\n            if(dp[now]+w[i]<dp[v[i]]){\n                dp[v[i]]=dp[now]+w[i];\n                used[from[v[i]]]=0;\n                used[i]=1;\n                from[v[i]]=i;\n                if(!vised[v[i]])\n                    qu.push(node(v[i],dp[v[i]]));\n            }else if(dp[now]+w[i]==dp[v[i]]&&knd[from[v[i]]]==1){\n                used[from[v[i]]]=0;\n                used[i]=1;\n                from[v[i]]=i;\n            }\n        }\n    }\n    int ans=0;\n    for(int i=m*2+1;i<=m*2+k*2;i+=2){\n        if(!used[i]&&!used[i+1]){\n            ans++;\n        }\n    }\n    printf(\"%lld\",ans);\n\treturn 0;\n}\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/\n\n```\n","source":"_posts/0010.md","raw":"---\ntitle: CF449B\ndate: 2024-01-03\ntags: [OI,网络流]\ntoc: true\nmathjax: true\n---\n\n## 题目简述\n\n有一张边带权的无向图，边分成两种，第一种无特殊限制，第二种边有一个端点在 $1$ 号节点，问至多可以删多少条边可以使原图从 $1$ 到所有点的最短路长度不变。\n\n## 分析\n\n很容易注意到需要跑单源最短路，由于题目中要求的是使最短路不变的情况，所以考虑是否可以在最短路过程中 DP 转移下功夫，很明显需要优先从第一种边转移，于是在转移的过程中注意一下转移过去的值相等时如何更新即可，因为最短路的转移过程没有后效性，所以这样转移是正确的。\n\n最后统计没有进行 DP 转移的边的数量即可。\n\n## 代码实现\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#define int long long\ninline int read();\nint fir[100005];\nint nxt[800005];\nint v[800005];\nint w[800005];\nint knd[800005];\nint now=0;\nbool vised[100005];\nclass node{\n    public:\n        int x,y;\n        node(int xx,int yy){\n            x=xx;\n            y=yy;\n        }\n};\nbool operator < (node a,node b){\n    return a.y>b.y;\n}\nstd::priority_queue<node>qu;\nint from[100005];\nint dp[100005];\nint used[800005];\nvoid add(int xx,int yy,int zz,int kk){\n    now++;\n    knd[now]=kk;\n    v[now]=yy;\n    w[now]=zz;\n    nxt[now]=fir[xx];\n    fir[xx]=now;\n    return ;\n}\nsigned main(){\n\t#ifdef ONLINE_JUDGE\n\t#else\n\tfreopen(\".in\",\"r\",stdin);\n\tfreopen(\".out\",\"w\",stdout);\n\t#endif\n    int n=read(),m,k;\n    m=read();\n    k=read();\n    for(int i=1;i<=n;i++){\n        fir[i]=-1;\n        dp[i]=0x3f3f3f3f3f3f3f3fll;\n    }\n    for(int i=1;i<=m;i++){\n        int xx=read(),yy,zz;\n        yy=read();\n        zz=read();\n        add(xx,yy,zz,0);\n        add(yy,xx,zz,0);\n    }\n    for(int i=1;i<=k;i++){\n        int s=read();\n        int y=read();\n        add(1,s,y,1);\n        add(s,1,y,1);\n    }\n    dp[1]=0;\n    qu.push(node(1,0));\n    while(qu.size()>0){\n        node noww=qu.top();\n        qu.pop();\n        int now=noww.x;\n        if(vised[now]){\n            continue;\n        }\n        vised[now]=1;\n        for(int i=fir[now];i!=-1;i=nxt[i]){\n            if(dp[now]+w[i]<dp[v[i]]){\n                dp[v[i]]=dp[now]+w[i];\n                used[from[v[i]]]=0;\n                used[i]=1;\n                from[v[i]]=i;\n                if(!vised[v[i]])\n                    qu.push(node(v[i],dp[v[i]]));\n            }else if(dp[now]+w[i]==dp[v[i]]&&knd[from[v[i]]]==1){\n                used[from[v[i]]]=0;\n                used[i]=1;\n                from[v[i]]=i;\n            }\n        }\n    }\n    int ans=0;\n    for(int i=m*2+1;i<=m*2+k*2;i+=2){\n        if(!used[i]&&!used[i+1]){\n            ans++;\n        }\n    }\n    printf(\"%lld\",ans);\n\treturn 0;\n}\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/\n\n```\n","slug":"0010","published":1,"updated":"2024-01-08T11:21:06.007Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjn000exday7oe9c9ph","content":"<h2 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h2><p>有一张边带权的无向图，边分成两种，第一种无特殊限制，第二种边有一个端点在 $1$ 号节点，问至多可以删多少条边可以使原图从 $1$ 到所有点的最短路长度不变。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>很容易注意到需要跑单源最短路，由于题目中要求的是使最短路不变的情况，所以考虑是否可以在最短路过程中 DP 转移下功夫，很明显需要优先从第一种边转移，于是在转移的过程中注意一下转移过去的值相等时如何更新即可，因为最短路的转移过程没有后效性，所以这样转移是正确的。</p>\n<p>最后统计没有进行 DP 转移的边的数量即可。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> fir<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nxt<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> knd<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> now<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> vised<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            x<span class=\"token operator\">=</span>xx<span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">=</span>yy<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span>b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nstd<span class=\"token double-colon punctuation\">::</span>priority_queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>qu<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> from<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> used<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> zz<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> kk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    now<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    knd<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>kk<span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>yy<span class=\"token punctuation\">;</span>\n    w<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>zz<span class=\"token punctuation\">;</span>\n    nxt<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fir<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    fir<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">ONLINE_JUDGE</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    k<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        fir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f3f3f3f3f3fll</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> xx<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>yy<span class=\"token punctuation\">,</span>zz<span class=\"token punctuation\">;</span>\n        yy<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        zz<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">,</span>yy<span class=\"token punctuation\">,</span>zz<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">,</span>xx<span class=\"token punctuation\">,</span>zz<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    qu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        node noww<span class=\"token operator\">=</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> now<span class=\"token operator\">=</span>noww<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vised<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        vised<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>fir<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                used<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vised<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    qu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>knd<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                used<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>m<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>k<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<h2 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h2><p>有一张边带权的无向图，边分成两种，第一种无特殊限制，第二种边有一个端点在 $1$ 号节点，问至多可以删多少条边可以使原图从 $1$ 到所有点的最短路长度不变。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>很容易注意到需要跑单源最短路，由于题目中要求的是使最短路不变的情况，所以考虑是否可以在最短路过程中 DP 转移下功夫，很明显需要优先从第一种边转移，于是在转移的过程中注意一下转移过去的值相等时如何更新即可，因为最短路的转移过程没有后效性，所以这样转移是正确的。</p>\n<p>最后统计没有进行 DP 转移的边的数量即可。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> fir<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nxt<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> knd<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> now<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> vised<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            x<span class=\"token operator\">=</span>xx<span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">=</span>yy<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span>b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nstd<span class=\"token double-colon punctuation\">::</span>priority_queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>qu<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> from<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> used<span class=\"token punctuation\">[</span><span class=\"token number\">800005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> zz<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> kk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    now<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    knd<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>kk<span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>yy<span class=\"token punctuation\">;</span>\n    w<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>zz<span class=\"token punctuation\">;</span>\n    nxt<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fir<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    fir<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">ONLINE_JUDGE</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    k<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        fir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f3f3f3f3f3fll</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> xx<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>yy<span class=\"token punctuation\">,</span>zz<span class=\"token punctuation\">;</span>\n        yy<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        zz<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">,</span>yy<span class=\"token punctuation\">,</span>zz<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">,</span>xx<span class=\"token punctuation\">,</span>zz<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    qu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        node noww<span class=\"token operator\">=</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> now<span class=\"token operator\">=</span>noww<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vised<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        vised<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>fir<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                used<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vised<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    qu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>knd<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                used<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                from<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>m<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>k<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nAnything about this program:\nType:\n\nDescription:\n\nExample:\n\t1:\n\t\tIn:\n\n\t\tOut:\nMore:\n\n*/</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"UVA10755","date":"2022-12-18T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n## 0x01 简化题意\n\n[题意传送门](/problem/UVA10755)\n\n给你一个立方体，要求从这个立方体中切割出一个小的立方体使得立方体内的和最大。\n\n## 0x02 思路分析\n\n思来想去，实在是没有什么好算法在立方体上，于是我们又想到了老朋友——前缀和，但是且慢，一维的前缀和很好理解，二维的前缀和可以画图，你让我在考场上怎么分析三位前缀和，难道还能搭积木？（bushi\n\n## 0x03 三位前缀和\n\n不要慌，我们可以归纳大法—— $dp$ 为前缀和， $ans$ 为区间 $a$ 为原数组。\n\n一维前缀和: $dp_i=a_i+dp_{i-1}$ \n\n二位前缀和: $dp_{i~j}=dp_{i-1~j}+dp_{i~j-1}-dp_{i-1~j-1}+a_{i~j}$\n\n仔细观察，再看。\n\n每一次先把每一维分别减 $1$ , 加到答案上，再选择 $2$ 维减 $1$ ,从答案中减去。\n\n其实这就是在处理这些区间的重叠部分，一加一减，三维前缀和呼之欲出：\n\n$dp_{i~j~k}=dp_{i-1~j~k}+dp_{i~j-1~k}+dp_{i~j~k-1}-dp_{i-1~j-1~k}-dp{i-1~j~k-1}-dp_{i~j-1~k-1}+dp_{i-1~j-1~k-1}+a_{i~j~k}$\n\n好的，所以怎么计算答案，继续归纳：\n\n一维前缀和：$ans_{i~j}=dp_i-dp_j$\n\n二位前缀和: $ans_{i~j~x~y}=dp_{x~y}-dp_{i-1~y}-dp_{x~j-1}+dp_{i-1~j-1}$\n\n一加一减，非常有序，直接推三维:\n\n$dp_{i~j~k~x~y~z}=dp_{x~y~z}-dp_{i-1~y~z}-dp_{x~j-1~z}-dp_{x~y~k-1}+dp_{i-1~j-1~z}+dp_{i-1~y~k-1}+dp_{x~j-1~k-1}-dp_{i-1~j-1~k-1}$\n\n接下来直接暴力枚举区间，$O(n^6)$ 刚好能过。\n\n## 0x04 上代码\n```cpp\n//注意细节，不要复制题解\n#include <iostream>\n#include <cstdio>\n#define int long long\ninline int read();\nint map[25][25][25];\nsigned mian(){\n\tfreopen(\"garbageheap.in\",\"r\",stdin);\n\tfreopen(\"garbageheap.out\",\"w\",stdout);\n    int t=read();\n    while(t--){\n        int a=read(),b,c;\n        b=read();\n        c=read();\n        for(int i=1;i<=a;i++){\n            for(int j=1;j<=b;j++){\n                for(int m=1;m<=c;m++){\n                    map[i][j][m]=read();\n                    map[i][j][m]+=map[i-1][j][m]+map[i][j-1][m]+map[i][j][m-1]-map[i-1][j-1][m]-map[i-1][j][m-1]-map[i][j-1][m-1]+map[i-1][j-1][m-1];\n                }\n            }\n        }\n        int _max=-0x3f3f3f3f3f3f3f3f;\n        for(int i=1;i<=a;i++){\n            for(int j=1;j<=b;j++){\n                for(int m=1;m<=c;m++){\n                    for(int ai=i;ai<=a;ai++){\n                        for(int bj=j;bj<=b;bj++){\n                            for(int bm=m;bm<=c;bm++){\n                                _max=std::max(_max,map[ai][bj][bm]-map[i-1][bj][bm]-map[ai][j-1][bm]-map[ai][bj][m-1]+map[i-1][j-1][bm]+map[i-1][bj][m-1]+map[ai][j-1][m-1]-map[i-1][j-1][m-1]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%lld\\n\",_max);\n        if(t!=0){\n            putchar('\\n');\n        }\n    }\n\treturn 114514;\n}\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n\n```\n\n## 0x05 后话\n\n这篇题解真长，三维的前缀和从二维和一维中是很好推出来的，另外，UVA的数据非常毒瘤，每两组数据之间要输出两个换行，最后一个却不能输出换行。\n","source":"_posts/0011.md","raw":"---\ntitle: UVA10755\ndate: 2022-12-19\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n## 0x01 简化题意\n\n[题意传送门](/problem/UVA10755)\n\n给你一个立方体，要求从这个立方体中切割出一个小的立方体使得立方体内的和最大。\n\n## 0x02 思路分析\n\n思来想去，实在是没有什么好算法在立方体上，于是我们又想到了老朋友——前缀和，但是且慢，一维的前缀和很好理解，二维的前缀和可以画图，你让我在考场上怎么分析三位前缀和，难道还能搭积木？（bushi\n\n## 0x03 三位前缀和\n\n不要慌，我们可以归纳大法—— $dp$ 为前缀和， $ans$ 为区间 $a$ 为原数组。\n\n一维前缀和: $dp_i=a_i+dp_{i-1}$ \n\n二位前缀和: $dp_{i~j}=dp_{i-1~j}+dp_{i~j-1}-dp_{i-1~j-1}+a_{i~j}$\n\n仔细观察，再看。\n\n每一次先把每一维分别减 $1$ , 加到答案上，再选择 $2$ 维减 $1$ ,从答案中减去。\n\n其实这就是在处理这些区间的重叠部分，一加一减，三维前缀和呼之欲出：\n\n$dp_{i~j~k}=dp_{i-1~j~k}+dp_{i~j-1~k}+dp_{i~j~k-1}-dp_{i-1~j-1~k}-dp{i-1~j~k-1}-dp_{i~j-1~k-1}+dp_{i-1~j-1~k-1}+a_{i~j~k}$\n\n好的，所以怎么计算答案，继续归纳：\n\n一维前缀和：$ans_{i~j}=dp_i-dp_j$\n\n二位前缀和: $ans_{i~j~x~y}=dp_{x~y}-dp_{i-1~y}-dp_{x~j-1}+dp_{i-1~j-1}$\n\n一加一减，非常有序，直接推三维:\n\n$dp_{i~j~k~x~y~z}=dp_{x~y~z}-dp_{i-1~y~z}-dp_{x~j-1~z}-dp_{x~y~k-1}+dp_{i-1~j-1~z}+dp_{i-1~y~k-1}+dp_{x~j-1~k-1}-dp_{i-1~j-1~k-1}$\n\n接下来直接暴力枚举区间，$O(n^6)$ 刚好能过。\n\n## 0x04 上代码\n```cpp\n//注意细节，不要复制题解\n#include <iostream>\n#include <cstdio>\n#define int long long\ninline int read();\nint map[25][25][25];\nsigned mian(){\n\tfreopen(\"garbageheap.in\",\"r\",stdin);\n\tfreopen(\"garbageheap.out\",\"w\",stdout);\n    int t=read();\n    while(t--){\n        int a=read(),b,c;\n        b=read();\n        c=read();\n        for(int i=1;i<=a;i++){\n            for(int j=1;j<=b;j++){\n                for(int m=1;m<=c;m++){\n                    map[i][j][m]=read();\n                    map[i][j][m]+=map[i-1][j][m]+map[i][j-1][m]+map[i][j][m-1]-map[i-1][j-1][m]-map[i-1][j][m-1]-map[i][j-1][m-1]+map[i-1][j-1][m-1];\n                }\n            }\n        }\n        int _max=-0x3f3f3f3f3f3f3f3f;\n        for(int i=1;i<=a;i++){\n            for(int j=1;j<=b;j++){\n                for(int m=1;m<=c;m++){\n                    for(int ai=i;ai<=a;ai++){\n                        for(int bj=j;bj<=b;bj++){\n                            for(int bm=m;bm<=c;bm++){\n                                _max=std::max(_max,map[ai][bj][bm]-map[i-1][bj][bm]-map[ai][j-1][bm]-map[ai][bj][m-1]+map[i-1][j-1][bm]+map[i-1][bj][m-1]+map[ai][j-1][m-1]-map[i-1][j-1][m-1]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%lld\\n\",_max);\n        if(t!=0){\n            putchar('\\n');\n        }\n    }\n\treturn 114514;\n}\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n\n```\n\n## 0x05 后话\n\n这篇题解真长，三维的前缀和从二维和一维中是很好推出来的，另外，UVA的数据非常毒瘤，每两组数据之间要输出两个换行，最后一个却不能输出换行。\n","slug":"0011","published":1,"updated":"2024-01-08T12:19:48.670Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjq000gxday56pc4glh","content":"<h2 id=\"0x01-简化题意\"><a href=\"#0x01-简化题意\" class=\"headerlink\" title=\"0x01 简化题意\"></a>0x01 简化题意</h2><p><a href=\"/problem/UVA10755\">题意传送门</a></p>\n<p>给你一个立方体，要求从这个立方体中切割出一个小的立方体使得立方体内的和最大。</p>\n<h2 id=\"0x02-思路分析\"><a href=\"#0x02-思路分析\" class=\"headerlink\" title=\"0x02 思路分析\"></a>0x02 思路分析</h2><p>思来想去，实在是没有什么好算法在立方体上，于是我们又想到了老朋友——前缀和，但是且慢，一维的前缀和很好理解，二维的前缀和可以画图，你让我在考场上怎么分析三位前缀和，难道还能搭积木？（bushi</p>\n<h2 id=\"0x03-三位前缀和\"><a href=\"#0x03-三位前缀和\" class=\"headerlink\" title=\"0x03 三位前缀和\"></a>0x03 三位前缀和</h2><p>不要慌，我们可以归纳大法—— $dp$ 为前缀和， $ans$ 为区间 $a$ 为原数组。</p>\n<p>一维前缀和: $dp_i=a_i+dp_{i-1}$ </p>\n<p>二位前缀和: $dp_{i~j}=dp_{i-1~j}+dp_{i~j-1}-dp_{i-1~j-1}+a_{i~j}$</p>\n<p>仔细观察，再看。</p>\n<p>每一次先把每一维分别减 $1$ , 加到答案上，再选择 $2$ 维减 $1$ ,从答案中减去。</p>\n<p>其实这就是在处理这些区间的重叠部分，一加一减，三维前缀和呼之欲出：</p>\n<p>$dp_{i~j~k}=dp_{i-1~j~k}+dp_{i~j-1~k}+dp_{i~j~k-1}-dp_{i-1~j-1~k}-dp{i-1~j~k-1}-dp_{i~j-1~k-1}+dp_{i-1~j-1~k-1}+a_{i~j~k}$</p>\n<p>好的，所以怎么计算答案，继续归纳：</p>\n<p>一维前缀和：$ans_{i~j}=dp_i-dp_j$</p>\n<p>二位前缀和: $ans_{i~j~x~y}=dp_{x~y}-dp_{i-1~y}-dp_{x~j-1}+dp_{i-1~j-1}$</p>\n<p>一加一减，非常有序，直接推三维:</p>\n<p>$dp_{i~j~k~x~y~z}=dp_{x~y~z}-dp_{i-1~y~z}-dp_{x~j-1~z}-dp_{x~y~k-1}+dp_{i-1~j-1~z}+dp_{i-1~y~k-1}+dp_{x~j-1~k-1}-dp_{i-1~j-1~k-1}$</p>\n<p>接下来直接暴力枚举区间，$O(n^6)$ 刚好能过。</p>\n<h2 id=\"0x04-上代码\"><a href=\"#0x04-上代码\" class=\"headerlink\" title=\"0x04 上代码\"></a>0x04 上代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//注意细节，不要复制题解</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"garbageheap.in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"garbageheap.out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> _max<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">0x3f3f3f3f3f3f3f3f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ai<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>ai<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>ai<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bj<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>bj<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span>bj<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bm<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>bm<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>bm<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                _max<span class=\"token operator\">=</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>_max<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"0x05-后话\"><a href=\"#0x05-后话\" class=\"headerlink\" title=\"0x05 后话\"></a>0x05 后话</h2><p>这篇题解真长，三维的前缀和从二维和一维中是很好推出来的，另外，UVA的数据非常毒瘤，每两组数据之间要输出两个换行，最后一个却不能输出换行。</p>\n","excerpt":"","more":"<h2 id=\"0x01-简化题意\"><a href=\"#0x01-简化题意\" class=\"headerlink\" title=\"0x01 简化题意\"></a>0x01 简化题意</h2><p><a href=\"/problem/UVA10755\">题意传送门</a></p>\n<p>给你一个立方体，要求从这个立方体中切割出一个小的立方体使得立方体内的和最大。</p>\n<h2 id=\"0x02-思路分析\"><a href=\"#0x02-思路分析\" class=\"headerlink\" title=\"0x02 思路分析\"></a>0x02 思路分析</h2><p>思来想去，实在是没有什么好算法在立方体上，于是我们又想到了老朋友——前缀和，但是且慢，一维的前缀和很好理解，二维的前缀和可以画图，你让我在考场上怎么分析三位前缀和，难道还能搭积木？（bushi</p>\n<h2 id=\"0x03-三位前缀和\"><a href=\"#0x03-三位前缀和\" class=\"headerlink\" title=\"0x03 三位前缀和\"></a>0x03 三位前缀和</h2><p>不要慌，我们可以归纳大法—— $dp$ 为前缀和， $ans$ 为区间 $a$ 为原数组。</p>\n<p>一维前缀和: $dp_i=a_i+dp_{i-1}$ </p>\n<p>二位前缀和: $dp_{i~j}=dp_{i-1~j}+dp_{i~j-1}-dp_{i-1~j-1}+a_{i~j}$</p>\n<p>仔细观察，再看。</p>\n<p>每一次先把每一维分别减 $1$ , 加到答案上，再选择 $2$ 维减 $1$ ,从答案中减去。</p>\n<p>其实这就是在处理这些区间的重叠部分，一加一减，三维前缀和呼之欲出：</p>\n<p>$dp_{i~j~k}=dp_{i-1~j~k}+dp_{i~j-1~k}+dp_{i~j~k-1}-dp_{i-1~j-1~k}-dp{i-1~j~k-1}-dp_{i~j-1~k-1}+dp_{i-1~j-1~k-1}+a_{i~j~k}$</p>\n<p>好的，所以怎么计算答案，继续归纳：</p>\n<p>一维前缀和：$ans_{i~j}=dp_i-dp_j$</p>\n<p>二位前缀和: $ans_{i~j~x~y}=dp_{x~y}-dp_{i-1~y}-dp_{x~j-1}+dp_{i-1~j-1}$</p>\n<p>一加一减，非常有序，直接推三维:</p>\n<p>$dp_{i~j~k~x~y~z}=dp_{x~y~z}-dp_{i-1~y~z}-dp_{x~j-1~z}-dp_{x~y~k-1}+dp_{i-1~j-1~z}+dp_{i-1~y~k-1}+dp_{x~j-1~k-1}-dp_{i-1~j-1~k-1}$</p>\n<p>接下来直接暴力枚举区间，$O(n^6)$ 刚好能过。</p>\n<h2 id=\"0x04-上代码\"><a href=\"#0x04-上代码\" class=\"headerlink\" title=\"0x04 上代码\"></a>0x04 上代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//注意细节，不要复制题解</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"garbageheap.in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"garbageheap.out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> _max<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">0x3f3f3f3f3f3f3f3f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ai<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>ai<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>ai<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bj<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>bj<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span>bj<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bm<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>bm<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>bm<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                _max<span class=\"token operator\">=</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>_max<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bm<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>ai<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"0x05-后话\"><a href=\"#0x05-后话\" class=\"headerlink\" title=\"0x05 后话\"></a>0x05 后话</h2><p>这篇题解真长，三维的前缀和从二维和一维中是很好推出来的，另外，UVA的数据非常毒瘤，每两组数据之间要输出两个换行，最后一个却不能输出换行。</p>\n"},{"title":"SP348","date":"2022-12-12T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n[题目传送门](/problem/SP348)\n\n## 0x01 简化题意\n\n路上有 $n$ 个加油站，每个加油站有一定量的油，卡车邮箱无限大，每 $1$ km需要 $1$ 箱汽油，问最少需要加油几次到达终点。\n\n## 0x02 思路分析\n\n简单看一下数据范围，不是很小，题目求最少加油几次才能到达终点，只要稍加分析就能发现是贪心，既然我在这里停了，那一定就是要把所有油加满跑到下一个加油站，但是如果直接选择能走到的加油站就可能出现走不到下一个加油站的情况。这种情况呢就要从前面经过但没有停的加油站中选一个来加油了。\n\n## 0x03 别慌着打代码啊\n\n好复杂，之前那个思路一会儿又要向前走，一会儿又要向后走，如何统一一下呢，很简单，只用维护当前已走过的加油站还没加油的最小值，优先队列（堆）！，只用将队头取出，再累计进可以走到的距离，然后再向优先队列中推入又能够走到的加油站就好了，具体地看看代码吧。\n\n## 0x04 Code\n```cpp\n#include <queue>\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nint read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nclass node{\n\tpublic:\n\t\tint length,how;\n\tnode(){\n\t\tlength=how=0;\n\t}\n};\nbool operator<(node a,node b){\n\treturn a.how<b.how;\n}\nbool cmp(node a,node b){\n\treturn a.length<b.length;\n}\nint main(){\n\t//\tfreopen(\"expedition.in\",\"r\",stdin);\n\t//\tfreopen(\"expedition.out\",\"w\",stdout);\n\tint t=read();\n\tfor(int abc=1;abc<=t;abc++){\n\t\tpriority_queue<node>a;\n\t\tnode b[10005];\n\t\tmemset(b,0,sizeof(b));\n\t\tint n;\n\t\tn=read();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tb[i].length=read();\n\t\t\tb[i].how=read();\n\t\t}\n\t\tint l,p;\n\t\tl=read();p=read();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tb[i].length=l-b[i].length;\n\t\t}\n\t\tint i1=1;\n\t\tint use=0;\n\t\tsort(b+1,b+n+1,cmp);\n\t\tbool have=1;\n\t\twhile(p<l){\n\t\t\tuse++;\n\t\t\tfor(;i1<=n;i1++){\n\t\t\t\tif(b[i1].length<=p){\n\t\t\t\t\ta.push(b[i1]);\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(a.size()>0){\n\t\t\t\tp+=a.top().how;\n\t\t\t\ta.pop();\n\t\t\t}else{\n\t\t\t\tcout<<-1<<endl;\n\t\t\t\thave=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(have)\n\t\t\tcout<<use<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## 0x05 后话\n有问题欢迎在下面提出，感觉这道题的贪心性质是非常明显的，但是有一点坑。\n","source":"_posts/0012.md","raw":"---\ntitle: SP348\ndate: 2022-12-13\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n[题目传送门](/problem/SP348)\n\n## 0x01 简化题意\n\n路上有 $n$ 个加油站，每个加油站有一定量的油，卡车邮箱无限大，每 $1$ km需要 $1$ 箱汽油，问最少需要加油几次到达终点。\n\n## 0x02 思路分析\n\n简单看一下数据范围，不是很小，题目求最少加油几次才能到达终点，只要稍加分析就能发现是贪心，既然我在这里停了，那一定就是要把所有油加满跑到下一个加油站，但是如果直接选择能走到的加油站就可能出现走不到下一个加油站的情况。这种情况呢就要从前面经过但没有停的加油站中选一个来加油了。\n\n## 0x03 别慌着打代码啊\n\n好复杂，之前那个思路一会儿又要向前走，一会儿又要向后走，如何统一一下呢，很简单，只用维护当前已走过的加油站还没加油的最小值，优先队列（堆）！，只用将队头取出，再累计进可以走到的距离，然后再向优先队列中推入又能够走到的加油站就好了，具体地看看代码吧。\n\n## 0x04 Code\n```cpp\n#include <queue>\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nint read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nclass node{\n\tpublic:\n\t\tint length,how;\n\tnode(){\n\t\tlength=how=0;\n\t}\n};\nbool operator<(node a,node b){\n\treturn a.how<b.how;\n}\nbool cmp(node a,node b){\n\treturn a.length<b.length;\n}\nint main(){\n\t//\tfreopen(\"expedition.in\",\"r\",stdin);\n\t//\tfreopen(\"expedition.out\",\"w\",stdout);\n\tint t=read();\n\tfor(int abc=1;abc<=t;abc++){\n\t\tpriority_queue<node>a;\n\t\tnode b[10005];\n\t\tmemset(b,0,sizeof(b));\n\t\tint n;\n\t\tn=read();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tb[i].length=read();\n\t\t\tb[i].how=read();\n\t\t}\n\t\tint l,p;\n\t\tl=read();p=read();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tb[i].length=l-b[i].length;\n\t\t}\n\t\tint i1=1;\n\t\tint use=0;\n\t\tsort(b+1,b+n+1,cmp);\n\t\tbool have=1;\n\t\twhile(p<l){\n\t\t\tuse++;\n\t\t\tfor(;i1<=n;i1++){\n\t\t\t\tif(b[i1].length<=p){\n\t\t\t\t\ta.push(b[i1]);\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(a.size()>0){\n\t\t\t\tp+=a.top().how;\n\t\t\t\ta.pop();\n\t\t\t}else{\n\t\t\t\tcout<<-1<<endl;\n\t\t\t\thave=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(have)\n\t\t\tcout<<use<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## 0x05 后话\n有问题欢迎在下面提出，感觉这道题的贪心性质是非常明显的，但是有一点坑。\n","slug":"0012","published":1,"updated":"2024-01-08T11:57:23.966Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjs000jxdayacyw95wg","content":"<p><a href=\"/problem/SP348\">题目传送门</a></p>\n<h2 id=\"0x01-简化题意\"><a href=\"#0x01-简化题意\" class=\"headerlink\" title=\"0x01 简化题意\"></a>0x01 简化题意</h2><p>路上有 $n$ 个加油站，每个加油站有一定量的油，卡车邮箱无限大，每 $1$ km需要 $1$ 箱汽油，问最少需要加油几次到达终点。</p>\n<h2 id=\"0x02-思路分析\"><a href=\"#0x02-思路分析\" class=\"headerlink\" title=\"0x02 思路分析\"></a>0x02 思路分析</h2><p>简单看一下数据范围，不是很小，题目求最少加油几次才能到达终点，只要稍加分析就能发现是贪心，既然我在这里停了，那一定就是要把所有油加满跑到下一个加油站，但是如果直接选择能走到的加油站就可能出现走不到下一个加油站的情况。这种情况呢就要从前面经过但没有停的加油站中选一个来加油了。</p>\n<h2 id=\"0x03-别慌着打代码啊\"><a href=\"#0x03-别慌着打代码啊\" class=\"headerlink\" title=\"0x03 别慌着打代码啊\"></a>0x03 别慌着打代码啊</h2><p>好复杂，之前那个思路一会儿又要向前走，一会儿又要向后走，如何统一一下呢，很简单，只用维护当前已走过的加油站还没加油的最小值，优先队列（堆）！，只用将队头取出，再累计进可以走到的距离，然后再向优先队列中推入又能够走到的加油站就好了，具体地看看代码吧。</p>\n<h2 id=\"0x04-Code\"><a href=\"#0x04-Code\" class=\"headerlink\" title=\"0x04 Code\"></a>0x04 Code</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span>how<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tlength<span class=\"token operator\">=</span>how<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>how<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>how<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//\tfreopen(\"expedition.in\",\"r\",stdin);</span>\n\t<span class=\"token comment\">//\tfreopen(\"expedition.out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> abc<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>abc<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span>abc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tpriority_queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>a<span class=\"token punctuation\">;</span>\n\t\tnode b<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>how<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">int</span> i1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> use<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> have<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tuse<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i1<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;=</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>how<span class=\"token punctuation\">;</span>\n\t\t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t\t\thave<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>have<span class=\"token punctuation\">)</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>use<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"0x05-后话\"><a href=\"#0x05-后话\" class=\"headerlink\" title=\"0x05 后话\"></a>0x05 后话</h2><p>有问题欢迎在下面提出，感觉这道题的贪心性质是非常明显的，但是有一点坑。</p>\n","excerpt":"","more":"<p><a href=\"/problem/SP348\">题目传送门</a></p>\n<h2 id=\"0x01-简化题意\"><a href=\"#0x01-简化题意\" class=\"headerlink\" title=\"0x01 简化题意\"></a>0x01 简化题意</h2><p>路上有 $n$ 个加油站，每个加油站有一定量的油，卡车邮箱无限大，每 $1$ km需要 $1$ 箱汽油，问最少需要加油几次到达终点。</p>\n<h2 id=\"0x02-思路分析\"><a href=\"#0x02-思路分析\" class=\"headerlink\" title=\"0x02 思路分析\"></a>0x02 思路分析</h2><p>简单看一下数据范围，不是很小，题目求最少加油几次才能到达终点，只要稍加分析就能发现是贪心，既然我在这里停了，那一定就是要把所有油加满跑到下一个加油站，但是如果直接选择能走到的加油站就可能出现走不到下一个加油站的情况。这种情况呢就要从前面经过但没有停的加油站中选一个来加油了。</p>\n<h2 id=\"0x03-别慌着打代码啊\"><a href=\"#0x03-别慌着打代码啊\" class=\"headerlink\" title=\"0x03 别慌着打代码啊\"></a>0x03 别慌着打代码啊</h2><p>好复杂，之前那个思路一会儿又要向前走，一会儿又要向后走，如何统一一下呢，很简单，只用维护当前已走过的加油站还没加油的最小值，优先队列（堆）！，只用将队头取出，再累计进可以走到的距离，然后再向优先队列中推入又能够走到的加油站就好了，具体地看看代码吧。</p>\n<h2 id=\"0x04-Code\"><a href=\"#0x04-Code\" class=\"headerlink\" title=\"0x04 Code\"></a>0x04 Code</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span>how<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tlength<span class=\"token operator\">=</span>how<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>how<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>how<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//\tfreopen(\"expedition.in\",\"r\",stdin);</span>\n\t<span class=\"token comment\">//\tfreopen(\"expedition.out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> abc<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>abc<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span>abc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tpriority_queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>a<span class=\"token punctuation\">;</span>\n\t\tnode b<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>how<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">int</span> i1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> use<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> have<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tuse<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i1<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;=</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>how<span class=\"token punctuation\">;</span>\n\t\t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t\t\thave<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>have<span class=\"token punctuation\">)</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>use<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"0x05-后话\"><a href=\"#0x05-后话\" class=\"headerlink\" title=\"0x05 后话\"></a>0x05 后话</h2><p>有问题欢迎在下面提出，感觉这道题的贪心性质是非常明显的，但是有一点坑。</p>\n"},{"title":"CSP-J2022T4","date":"2022-11-04T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n[题目传送门](/problem/P8816)\n\n\n\n**简化题意**：二维平面上有 $n$ 个点，还可以再添加 $k$ 个点，坐标要求是整数，选取一个点序列使得序列中每个点个横纵坐标非严格单调递增且满足 $x_{i+1}-x_{i}=1$、$y_{i+1}=y_{i}$ 或 $y_{i+1}-y_{i}=1$、$x_{i+1}=x_{i}$，序列最长是多少。\n\n**错误思路**：按照坐标排序选取其中一段是不对的，具体可以手推样例，根本不可能从 $(3,6)$ 跑到 $(5,3)$，但是按照这样的思路一定是连起来的。\n\n**正解**：在对着坐标轴发呆后，突然发现可以用中转的思想，一看 $0\\leq n \\leq 500$，Floyd 走一波，初始化为两点的曼哈顿距离减 $1$，跑一遍 Floyd 跑出两点连通需要加的最少边。\n\n**细节**：可能两个连接后还可以加点，直接无脑加在最后，所以统计时要加上 $k-map_{i,j}$。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nlong long read(){\n\tchar temp=getchar();\n\tlong long f=1,x=0;\n\twhile('0'>temp||temp>'9'){\n\t\t(temp=='-')?(f=-1):0;\n\t\ttemp=getchar();\n\t}\n\twhile('0'<=temp&&temp<='9'){\n\t\tx=(x<<3)+(x<<1)+(temp^'0');\n\t\ttemp=getchar();\n\t}\n\treturn f*x;\n}\nlong long x[505];\nlong long y[505];\nlong long map[505][505];\nint mian(){\n// \tfreopen(\"point.in\",\"r\",stdin);\n// \tfreopen(\"point.out\",\"w\",stdout);\n\tint n=read();\n\tint k=read();\n\tfor(int i=1;i<=n;i++){\n\t\tx[i]=read();\n\t\ty[i]=read();\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(i==j){\n\t\t\t\tmap[i][j]=0;\n\t\t\t}else if(x[j]>=x[i]&&y[j]>=y[i])\n\t\t\t\tmap[i][j]=abs(x[i]-x[j])+abs(y[i]-y[j])-1;\n\t\t\telse{\n\t\t\t\tmap[i][j]=0x3f3f3f3f3f3f3f3fll;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int k=1;k<=n;k++){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tmap[i][j]=min(map[i][j],map[i][k]+map[k][j]);\n\t\t\t}\n\t\t} \n\t}\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(map[i][j]<=k){\n\t\t\t\tans=max(ans,abs(x[i]-x[j])+abs(y[i]-y[j])+(k-map[i][j])+1);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n欢迎到博客看其他题解。\n\n**UPD：感谢机房巨巨巨巨巨佬 gyc 指正曼哈顿距离和欧几里得距离的区别。**\n","source":"_posts/0013.md","raw":"---\ntitle: CSP-J2022T4\ndate: 2022-11-05\ntags: [OI,CSP]\ntoc: true\nmathjax: true\n---\n\n[题目传送门](/problem/P8816)\n\n\n\n**简化题意**：二维平面上有 $n$ 个点，还可以再添加 $k$ 个点，坐标要求是整数，选取一个点序列使得序列中每个点个横纵坐标非严格单调递增且满足 $x_{i+1}-x_{i}=1$、$y_{i+1}=y_{i}$ 或 $y_{i+1}-y_{i}=1$、$x_{i+1}=x_{i}$，序列最长是多少。\n\n**错误思路**：按照坐标排序选取其中一段是不对的，具体可以手推样例，根本不可能从 $(3,6)$ 跑到 $(5,3)$，但是按照这样的思路一定是连起来的。\n\n**正解**：在对着坐标轴发呆后，突然发现可以用中转的思想，一看 $0\\leq n \\leq 500$，Floyd 走一波，初始化为两点的曼哈顿距离减 $1$，跑一遍 Floyd 跑出两点连通需要加的最少边。\n\n**细节**：可能两个连接后还可以加点，直接无脑加在最后，所以统计时要加上 $k-map_{i,j}$。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nlong long read(){\n\tchar temp=getchar();\n\tlong long f=1,x=0;\n\twhile('0'>temp||temp>'9'){\n\t\t(temp=='-')?(f=-1):0;\n\t\ttemp=getchar();\n\t}\n\twhile('0'<=temp&&temp<='9'){\n\t\tx=(x<<3)+(x<<1)+(temp^'0');\n\t\ttemp=getchar();\n\t}\n\treturn f*x;\n}\nlong long x[505];\nlong long y[505];\nlong long map[505][505];\nint mian(){\n// \tfreopen(\"point.in\",\"r\",stdin);\n// \tfreopen(\"point.out\",\"w\",stdout);\n\tint n=read();\n\tint k=read();\n\tfor(int i=1;i<=n;i++){\n\t\tx[i]=read();\n\t\ty[i]=read();\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(i==j){\n\t\t\t\tmap[i][j]=0;\n\t\t\t}else if(x[j]>=x[i]&&y[j]>=y[i])\n\t\t\t\tmap[i][j]=abs(x[i]-x[j])+abs(y[i]-y[j])-1;\n\t\t\telse{\n\t\t\t\tmap[i][j]=0x3f3f3f3f3f3f3f3fll;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int k=1;k<=n;k++){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tmap[i][j]=min(map[i][j],map[i][k]+map[k][j]);\n\t\t\t}\n\t\t} \n\t}\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(map[i][j]<=k){\n\t\t\t\tans=max(ans,abs(x[i]-x[j])+abs(y[i]-y[j])+(k-map[i][j])+1);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n欢迎到博客看其他题解。\n\n**UPD：感谢机房巨巨巨巨巨佬 gyc 指正曼哈顿距离和欧几里得距离的区别。**\n","slug":"0013","published":1,"updated":"2024-01-08T11:59:45.860Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjt000lxdayd116cv5v","content":"<p><a href=\"/problem/P8816\">题目传送门</a></p>\n<p><strong>简化题意</strong>：二维平面上有 $n$ 个点，还可以再添加 $k$ 个点，坐标要求是整数，选取一个点序列使得序列中每个点个横纵坐标非严格单调递增且满足 $x_{i+1}-x_{i}=1$、$y_{i+1}=y_{i}$ 或 $y_{i+1}-y_{i}=1$、$x_{i+1}=x_{i}$，序列最长是多少。</p>\n<p><strong>错误思路</strong>：按照坐标排序选取其中一段是不对的，具体可以手推样例，根本不可能从 $(3,6)$ 跑到 $(5,3)$，但是按照这样的思路一定是连起来的。</p>\n<p><strong>正解</strong>：在对着坐标轴发呆后，突然发现可以用中转的思想，一看 $0\\leq n \\leq 500$，Floyd 走一波，初始化为两点的曼哈顿距离减 $1$，跑一遍 Floyd 跑出两点连通需要加的最少边。</p>\n<p><strong>细节</strong>：可能两个连接后还可以加点，直接无脑加在最后，所以统计时要加上 $k-map_{i,j}$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">></span>temp<span class=\"token operator\">||</span>temp<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">&lt;=</span>temp<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">^</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// \tfreopen(\"point.in\",\"r\",stdin);</span>\n<span class=\"token comment\">// \tfreopen(\"point.out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f3f3f3f3f3fll</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>欢迎到博客看其他题解。</p>\n<p><strong>UPD：感谢机房巨巨巨巨巨佬 gyc 指正曼哈顿距离和欧几里得距离的区别。</strong></p>\n","excerpt":"","more":"<p><a href=\"/problem/P8816\">题目传送门</a></p>\n<p><strong>简化题意</strong>：二维平面上有 $n$ 个点，还可以再添加 $k$ 个点，坐标要求是整数，选取一个点序列使得序列中每个点个横纵坐标非严格单调递增且满足 $x_{i+1}-x_{i}=1$、$y_{i+1}=y_{i}$ 或 $y_{i+1}-y_{i}=1$、$x_{i+1}=x_{i}$，序列最长是多少。</p>\n<p><strong>错误思路</strong>：按照坐标排序选取其中一段是不对的，具体可以手推样例，根本不可能从 $(3,6)$ 跑到 $(5,3)$，但是按照这样的思路一定是连起来的。</p>\n<p><strong>正解</strong>：在对着坐标轴发呆后，突然发现可以用中转的思想，一看 $0\\leq n \\leq 500$，Floyd 走一波，初始化为两点的曼哈顿距离减 $1$，跑一遍 Floyd 跑出两点连通需要加的最少边。</p>\n<p><strong>细节</strong>：可能两个连接后还可以加点，直接无脑加在最后，所以统计时要加上 $k-map_{i,j}$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">></span>temp<span class=\"token operator\">||</span>temp<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">&lt;=</span>temp<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">^</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// \tfreopen(\"point.in\",\"r\",stdin);</span>\n<span class=\"token comment\">// \tfreopen(\"point.out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f3f3f3f3f3fll</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>欢迎到博客看其他题解。</p>\n<p><strong>UPD：感谢机房巨巨巨巨巨佬 gyc 指正曼哈顿距离和欧几里得距离的区别。</strong></p>\n"},{"title":"CSP-J2022T3","date":"2023-11-04T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n[题目传送门](/problem/P8815)\n\n(题目真的长)\n\n# \n**简化题意**：在计算逻辑表达式时，会出现$1 \\mathbin{\\|} b$ 和 $0 \\mathbin{\\&} b$ 的情况（也就是短路），后面的 $b$ 并不计算，需要你统计这类情况出现的次数，因为 $b$ 不用计算，所以计算$b$造成的短路不用计入最终的统计。\n\n**思路分析**：如果直接将表达式转换为表达式树，为每个节点维护 $2$ 个值对应两种短路，在递归计算的时候，可以非常方便的维护出当前节点的 $2$ 个值，也就是有没有短路决定加不加 $1$，在相应的加上下面计算过程中产生的短路。\n\n**警钟长鸣**：因为递归容易造成爆栈，所以可以转换为后缀表达式进行计算，即可AC。\n\n**细节处理1**：中缀转成后缀表达式只用从前往后看，操作数直接加入后缀表达式序列，操作符就在栈中把优先级比他高的弹出大后缀表达式序列，再把这个运算符加入栈中，左括号直接加入栈，右括号弹栈到上一个左括号。\n\n**细节处理2**：后缀表达式的计算是一个栈模拟的过程，遇到运算数直接加入，遇到运算符弹出 $2$ 个，再加入计算所得的答案。\n# \n差不多了，贴代码：\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <stack>\nusing namespace std;\nlong long read(){\n\tchar temp=getchar();\n\tlong long f=1,x=0;\n\twhile('0'>temp||temp>'9'){\n\t\t(temp=='-')?(f=-1):0;\n\t\ttemp=getchar();\n\t}\n\twhile('0'<=temp&&temp<='9'){\n\t\tx=(x<<3)+(x<<1)+(temp^'0');\n\t\ttemp=getchar();\n\t}\n\treturn f*x;\n}\nclass node{\n\tpublic:\n\t\tint ansa,ansb;\n\t\tint i;\n\t\tnode(int a,int b,int j){\n\t\t\tansa=a;\n\t\t\tansb=b;\n\t\t\ti=j;\n\t\t}\n\t\tnode(){\n\t\t\tansa=ansb=i=0;\n\t\t}\n};\nstack<node>calc;\nstack<char>ex;\nint nowb=0;\nint ansa=0,ansb=0;\nchar bac[1000005];\nint dfs(){\n\tfor(int i=1;i<=nowb;i++){\n\t\tif(i==nowb-1){\n\t\t\ti=nowb-1;\n\t\t}\n\t\tif(bac[i]=='1'||bac[i]=='0'){\n\t\t\tcalc.push(node({0,0,i})); \n\t\t}else if(bac[i]=='|'){\n\t\t\tnode a=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode b=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode in;\n\t\t\tin.i=i;\n\t\t\tbac[i]=(((bac[a.i]-'0')||(bac[b.i]-'0'))+'0');\n\t\t\tif(bac[b.i]=='1'){\n\t\t\t\tin.ansa=b.ansa;\n\t\t\t\tin.ansb=b.ansb+1;\n\t\t\t}else{\n\t\t\t\tin.ansa=a.ansa+b.ansa;\n\t\t\t\tin.ansb=a.ansb+b.ansb;\n\t\t\t}\n\t\t\tcalc.push(in);\n\t\t}else{\n\t\t\tnode a=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode b=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode in;\n\t\t\tin.i=i;\n\t\t\tbac[i]=(((bac[a.i]-'0')&&(bac[b.i]-'0'))+'0');\n\t\t\tif(bac[b.i]=='0'){\n\t\t\t\tin.ansa=b.ansa+1;\n\t\t\t\tin.ansb=b.ansb;\n\t\t\t}else{\n\t\t\t\tin.ansa=a.ansa+b.ansa;\n\t\t\t\tin.ansb=a.ansb+b.ansb;\n\t\t\t}\n\t\t\tcalc.push(in);\n\t\t}\n\t}\n\tansa=calc.top().ansa;\n\tansb=calc.top().ansb;\n\treturn bac[calc.top().i]-'0';\n}\nint mian(){\n// \tfreopen(\"expr.in\",\"r\",stdin);\n// \tfreopen(\"expr.out\",\"w\",stdout);\n\tchar temp=getchar();\n\twhile(temp!=EOF){\n\t\tif(temp=='0'||temp=='1'){\n\t\t\tbac[++nowb]=temp;\n\t\t}else if(temp=='|'){\n\t\t\twhile(ex.size()>0&&(ex.top()=='&'||ex.top()=='|')){\n\t\t\t\tbac[++nowb]=ex.top();\n\t\t\t\tex.pop();\n\t\t\t}\n\t\t\tex.push('|'); \n\t\t}else if(temp=='&'){\n\t\t\twhile(ex.size()>0&&ex.top()=='&'){\n\t\t\t\tbac[++nowb]=ex.top();\n\t\t\t\tex.pop();\n\t\t\t}\n\t\t\tex.push('&');\n\t\t}else if(temp=='('){\n\t\t\tex.push('(');\n\t\t}else if(temp==')'){\n\t\t\twhile(ex.size()>0&&ex.top()!='('){\n\t\t\t\tbac[++nowb]=ex.top();\n\t\t\t\tex.pop();\n\t\t\t}\n\t\t\tex.pop();\n\t\t}\n\t\ttemp=getchar();\n\t}\n\twhile(ex.size()>0){\n\t\tbac[++nowb]=ex.top();\n\t\tex.pop();\n\t}\n\tprintf(\"%d\\n\",dfs());\n\tprintf(\"%d %d\",ansa,ansb);\n\treturn 0;\n}\n```\n欢迎到博客查看其它题解。\n","source":"_posts/0014.md","raw":"---\ntitle: CSP-J2022T3\ndate: 2023-11-05\ntags: [OI,CSP]\ntoc: true\nmathjax: true\n---\n\n[题目传送门](/problem/P8815)\n\n(题目真的长)\n\n# \n**简化题意**：在计算逻辑表达式时，会出现$1 \\mathbin{\\|} b$ 和 $0 \\mathbin{\\&} b$ 的情况（也就是短路），后面的 $b$ 并不计算，需要你统计这类情况出现的次数，因为 $b$ 不用计算，所以计算$b$造成的短路不用计入最终的统计。\n\n**思路分析**：如果直接将表达式转换为表达式树，为每个节点维护 $2$ 个值对应两种短路，在递归计算的时候，可以非常方便的维护出当前节点的 $2$ 个值，也就是有没有短路决定加不加 $1$，在相应的加上下面计算过程中产生的短路。\n\n**警钟长鸣**：因为递归容易造成爆栈，所以可以转换为后缀表达式进行计算，即可AC。\n\n**细节处理1**：中缀转成后缀表达式只用从前往后看，操作数直接加入后缀表达式序列，操作符就在栈中把优先级比他高的弹出大后缀表达式序列，再把这个运算符加入栈中，左括号直接加入栈，右括号弹栈到上一个左括号。\n\n**细节处理2**：后缀表达式的计算是一个栈模拟的过程，遇到运算数直接加入，遇到运算符弹出 $2$ 个，再加入计算所得的答案。\n# \n差不多了，贴代码：\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <stack>\nusing namespace std;\nlong long read(){\n\tchar temp=getchar();\n\tlong long f=1,x=0;\n\twhile('0'>temp||temp>'9'){\n\t\t(temp=='-')?(f=-1):0;\n\t\ttemp=getchar();\n\t}\n\twhile('0'<=temp&&temp<='9'){\n\t\tx=(x<<3)+(x<<1)+(temp^'0');\n\t\ttemp=getchar();\n\t}\n\treturn f*x;\n}\nclass node{\n\tpublic:\n\t\tint ansa,ansb;\n\t\tint i;\n\t\tnode(int a,int b,int j){\n\t\t\tansa=a;\n\t\t\tansb=b;\n\t\t\ti=j;\n\t\t}\n\t\tnode(){\n\t\t\tansa=ansb=i=0;\n\t\t}\n};\nstack<node>calc;\nstack<char>ex;\nint nowb=0;\nint ansa=0,ansb=0;\nchar bac[1000005];\nint dfs(){\n\tfor(int i=1;i<=nowb;i++){\n\t\tif(i==nowb-1){\n\t\t\ti=nowb-1;\n\t\t}\n\t\tif(bac[i]=='1'||bac[i]=='0'){\n\t\t\tcalc.push(node({0,0,i})); \n\t\t}else if(bac[i]=='|'){\n\t\t\tnode a=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode b=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode in;\n\t\t\tin.i=i;\n\t\t\tbac[i]=(((bac[a.i]-'0')||(bac[b.i]-'0'))+'0');\n\t\t\tif(bac[b.i]=='1'){\n\t\t\t\tin.ansa=b.ansa;\n\t\t\t\tin.ansb=b.ansb+1;\n\t\t\t}else{\n\t\t\t\tin.ansa=a.ansa+b.ansa;\n\t\t\t\tin.ansb=a.ansb+b.ansb;\n\t\t\t}\n\t\t\tcalc.push(in);\n\t\t}else{\n\t\t\tnode a=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode b=calc.top();\n\t\t\tcalc.pop();\n\t\t\tnode in;\n\t\t\tin.i=i;\n\t\t\tbac[i]=(((bac[a.i]-'0')&&(bac[b.i]-'0'))+'0');\n\t\t\tif(bac[b.i]=='0'){\n\t\t\t\tin.ansa=b.ansa+1;\n\t\t\t\tin.ansb=b.ansb;\n\t\t\t}else{\n\t\t\t\tin.ansa=a.ansa+b.ansa;\n\t\t\t\tin.ansb=a.ansb+b.ansb;\n\t\t\t}\n\t\t\tcalc.push(in);\n\t\t}\n\t}\n\tansa=calc.top().ansa;\n\tansb=calc.top().ansb;\n\treturn bac[calc.top().i]-'0';\n}\nint mian(){\n// \tfreopen(\"expr.in\",\"r\",stdin);\n// \tfreopen(\"expr.out\",\"w\",stdout);\n\tchar temp=getchar();\n\twhile(temp!=EOF){\n\t\tif(temp=='0'||temp=='1'){\n\t\t\tbac[++nowb]=temp;\n\t\t}else if(temp=='|'){\n\t\t\twhile(ex.size()>0&&(ex.top()=='&'||ex.top()=='|')){\n\t\t\t\tbac[++nowb]=ex.top();\n\t\t\t\tex.pop();\n\t\t\t}\n\t\t\tex.push('|'); \n\t\t}else if(temp=='&'){\n\t\t\twhile(ex.size()>0&&ex.top()=='&'){\n\t\t\t\tbac[++nowb]=ex.top();\n\t\t\t\tex.pop();\n\t\t\t}\n\t\t\tex.push('&');\n\t\t}else if(temp=='('){\n\t\t\tex.push('(');\n\t\t}else if(temp==')'){\n\t\t\twhile(ex.size()>0&&ex.top()!='('){\n\t\t\t\tbac[++nowb]=ex.top();\n\t\t\t\tex.pop();\n\t\t\t}\n\t\t\tex.pop();\n\t\t}\n\t\ttemp=getchar();\n\t}\n\twhile(ex.size()>0){\n\t\tbac[++nowb]=ex.top();\n\t\tex.pop();\n\t}\n\tprintf(\"%d\\n\",dfs());\n\tprintf(\"%d %d\",ansa,ansb);\n\treturn 0;\n}\n```\n欢迎到博客查看其它题解。\n","slug":"0014","published":1,"updated":"2024-01-08T12:20:12.694Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttju000oxdaybsx588ph","content":"<p><a href=\"/problem/P8815\">题目传送门</a></p>\n<p>(题目真的长)</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><p><strong>简化题意</strong>：在计算逻辑表达式时，会出现$1 \\mathbin{|} b$ 和 $0 \\mathbin{\\&amp;} b$ 的情况（也就是短路），后面的 $b$ 并不计算，需要你统计这类情况出现的次数，因为 $b$ 不用计算，所以计算$b$造成的短路不用计入最终的统计。</p>\n<p><strong>思路分析</strong>：如果直接将表达式转换为表达式树，为每个节点维护 $2$ 个值对应两种短路，在递归计算的时候，可以非常方便的维护出当前节点的 $2$ 个值，也就是有没有短路决定加不加 $1$，在相应的加上下面计算过程中产生的短路。</p>\n<p><strong>警钟长鸣</strong>：因为递归容易造成爆栈，所以可以转换为后缀表达式进行计算，即可AC。</p>\n<p><strong>细节处理1</strong>：中缀转成后缀表达式只用从前往后看，操作数直接加入后缀表达式序列，操作符就在栈中把优先级比他高的弹出大后缀表达式序列，再把这个运算符加入栈中，左括号直接加入栈，右括号弹栈到上一个左括号。</p>\n<p><strong>细节处理2</strong>：后缀表达式的计算是一个栈模拟的过程，遇到运算数直接加入，遇到运算符弹出 $2$ 个，再加入计算所得的答案。</p>\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\" \"></a> </h1><p>差不多了，贴代码：<br><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">></span>temp<span class=\"token operator\">||</span>temp<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">&lt;=</span>temp<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">^</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> ansa<span class=\"token punctuation\">,</span>ansb<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tansa<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n\t\t\tansb<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tansa<span class=\"token operator\">=</span>ansb<span class=\"token operator\">=</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>calc<span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span>ex<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nowb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ansa<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ansb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> bac<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>nowb<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>nowb<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ti<span class=\"token operator\">=</span>nowb<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token operator\">||</span>bac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tnode a<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode b<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode in<span class=\"token punctuation\">;</span>\n\t\t\tin<span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\tbac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tnode a<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode b<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode in<span class=\"token punctuation\">;</span>\n\t\t\tin<span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\tbac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tansa<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\tansb<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bac<span class=\"token punctuation\">[</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// \tfreopen(\"expr.in\",\"r\",stdin);</span>\n<span class=\"token comment\">// \tfreopen(\"expr.out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token char\">'&amp;'</span><span class=\"token operator\">||</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span>ansa<span class=\"token punctuation\">,</span>ansb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>欢迎到博客查看其它题解。</p>\n","excerpt":"","more":"<p><a href=\"/problem/P8815\">题目传送门</a></p>\n<p>(题目真的长)</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><p><strong>简化题意</strong>：在计算逻辑表达式时，会出现$1 \\mathbin{|} b$ 和 $0 \\mathbin{\\&amp;} b$ 的情况（也就是短路），后面的 $b$ 并不计算，需要你统计这类情况出现的次数，因为 $b$ 不用计算，所以计算$b$造成的短路不用计入最终的统计。</p>\n<p><strong>思路分析</strong>：如果直接将表达式转换为表达式树，为每个节点维护 $2$ 个值对应两种短路，在递归计算的时候，可以非常方便的维护出当前节点的 $2$ 个值，也就是有没有短路决定加不加 $1$，在相应的加上下面计算过程中产生的短路。</p>\n<p><strong>警钟长鸣</strong>：因为递归容易造成爆栈，所以可以转换为后缀表达式进行计算，即可AC。</p>\n<p><strong>细节处理1</strong>：中缀转成后缀表达式只用从前往后看，操作数直接加入后缀表达式序列，操作符就在栈中把优先级比他高的弹出大后缀表达式序列，再把这个运算符加入栈中，左括号直接加入栈，右括号弹栈到上一个左括号。</p>\n<p><strong>细节处理2</strong>：后缀表达式的计算是一个栈模拟的过程，遇到运算数直接加入，遇到运算符弹出 $2$ 个，再加入计算所得的答案。</p>\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\" \"></a> </h1><p>差不多了，贴代码：<br><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">></span>temp<span class=\"token operator\">||</span>temp<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token operator\">&lt;=</span>temp<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">^</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> ansa<span class=\"token punctuation\">,</span>ansb<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tansa<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n\t\t\tansb<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tansa<span class=\"token operator\">=</span>ansb<span class=\"token operator\">=</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>calc<span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span>ex<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nowb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ansa<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ansb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> bac<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>nowb<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>nowb<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ti<span class=\"token operator\">=</span>nowb<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token operator\">||</span>bac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tnode a<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode b<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode in<span class=\"token punctuation\">;</span>\n\t\t\tin<span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\tbac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tnode a<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode b<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnode in<span class=\"token punctuation\">;</span>\n\t\t\tin<span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\tbac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bac<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansa<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\t\t\t\tin<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>ansb<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tcalc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tansa<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ansa<span class=\"token punctuation\">;</span>\n\tansb<span class=\"token operator\">=</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ansb<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bac<span class=\"token punctuation\">[</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// \tfreopen(\"expr.in\",\"r\",stdin);</span>\n<span class=\"token comment\">// \tfreopen(\"expr.out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token char\">'&amp;'</span><span class=\"token operator\">||</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tbac<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nowb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span>ansa<span class=\"token punctuation\">,</span>ansb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>欢迎到博客查看其它题解。</p>\n"},{"title":"CSP-J2022T2","date":"2023-11-04T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n[题目传送门](/problem/P8814)\n\n这道题可能让很多人初一白学了。\n\n知道 $p_i\\times q_i$。\n\n$e_i \\times d_i = (p_i - 1)(q_i - 1) + 1$\n\n稍微变形一下 $e_i \\times d_i = p_i\\times q_i - p_i -q_i + 2$\n\n带入得 $e_i \\times d_i = n_i -p_i -q_i+2$\n\n整理得 $p_i + q_i=2+n_i-e_i \\times d_i$\n\n知道 $p_i$ 和 $q_i$ 之和，之积，所以$(p_i-q_i)^2 = (p_i+q_i)^2-4\\times p_i\\times q_i$\n\n开平方记得判正负。\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n#define int long long\nusing namespace std;\nsigned main(){\n    int k;\n    scanf(\"%lld\",&k);\n    while(k--){\n        int n,d,e;\n        scanf(\"%lld%lld%lld\",&n,&d,&e);\n        int sum=(2+n-e*d);\n        if(sum*sum-4*n<0){\n            printf(\"NO\\n\");\n            continue;\n        }\n        int cha=sqrt(sum*sum-4*n);\n        int p=(cha+sum)/2;\n        int q=sum-p;\n        if(p>q){\n            swap(p,q);\n        }\n        if(p*q==n&&(p-1)*(q-1)+1==e*d){\n            printf(\"%lld %lld\\n\",p,q);\n        }else{\n            printf(\"NO\\n\");\n        }\n    }\n    return 0;\n}\n```\n欢迎到博客看其他题解。\n","source":"_posts/0015.md","raw":"---\ntitle: CSP-J2022T2\ndate: 2023-11-05\ntags: [OI,CSP]\ntoc: true\nmathjax: true\n---\n\n[题目传送门](/problem/P8814)\n\n这道题可能让很多人初一白学了。\n\n知道 $p_i\\times q_i$。\n\n$e_i \\times d_i = (p_i - 1)(q_i - 1) + 1$\n\n稍微变形一下 $e_i \\times d_i = p_i\\times q_i - p_i -q_i + 2$\n\n带入得 $e_i \\times d_i = n_i -p_i -q_i+2$\n\n整理得 $p_i + q_i=2+n_i-e_i \\times d_i$\n\n知道 $p_i$ 和 $q_i$ 之和，之积，所以$(p_i-q_i)^2 = (p_i+q_i)^2-4\\times p_i\\times q_i$\n\n开平方记得判正负。\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n#define int long long\nusing namespace std;\nsigned main(){\n    int k;\n    scanf(\"%lld\",&k);\n    while(k--){\n        int n,d,e;\n        scanf(\"%lld%lld%lld\",&n,&d,&e);\n        int sum=(2+n-e*d);\n        if(sum*sum-4*n<0){\n            printf(\"NO\\n\");\n            continue;\n        }\n        int cha=sqrt(sum*sum-4*n);\n        int p=(cha+sum)/2;\n        int q=sum-p;\n        if(p>q){\n            swap(p,q);\n        }\n        if(p*q==n&&(p-1)*(q-1)+1==e*d){\n            printf(\"%lld %lld\\n\",p,q);\n        }else{\n            printf(\"NO\\n\");\n        }\n    }\n    return 0;\n}\n```\n欢迎到博客看其他题解。\n","slug":"0015","published":1,"updated":"2024-01-08T12:03:18.593Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjv000qxday2kaddczx","content":"<p><a href=\"/problem/P8814\">题目传送门</a></p>\n<p>这道题可能让很多人初一白学了。</p>\n<p>知道 $p_i\\times q_i$。</p>\n<p>$e_i \\times d_i = (p_i - 1)(q_i - 1) + 1$</p>\n<p>稍微变形一下 $e_i \\times d_i = p_i\\times q_i - p_i -q_i + 2$</p>\n<p>带入得 $e_i \\times d_i = n_i -p_i -q_i+2$</p>\n<p>整理得 $p_i + q_i=2+n_i-e_i \\times d_i$</p>\n<p>知道 $p_i$ 和 $q_i$ 之和，之积，所以$(p_i-q_i)^2 = (p_i+q_i)^2-4\\times p_i\\times q_i$</p>\n<p>开平方记得判正负。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>n<span class=\"token operator\">-</span>e<span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">*</span>sum<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> cha<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">*</span>sum<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>cha<span class=\"token operator\">+</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> q<span class=\"token operator\">=</span>sum<span class=\"token operator\">-</span>p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>q<span class=\"token operator\">==</span>n<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>e<span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>欢迎到博客看其他题解。</p>\n","excerpt":"","more":"<p><a href=\"/problem/P8814\">题目传送门</a></p>\n<p>这道题可能让很多人初一白学了。</p>\n<p>知道 $p_i\\times q_i$。</p>\n<p>$e_i \\times d_i = (p_i - 1)(q_i - 1) + 1$</p>\n<p>稍微变形一下 $e_i \\times d_i = p_i\\times q_i - p_i -q_i + 2$</p>\n<p>带入得 $e_i \\times d_i = n_i -p_i -q_i+2$</p>\n<p>整理得 $p_i + q_i=2+n_i-e_i \\times d_i$</p>\n<p>知道 $p_i$ 和 $q_i$ 之和，之积，所以$(p_i-q_i)^2 = (p_i+q_i)^2-4\\times p_i\\times q_i$</p>\n<p>开平方记得判正负。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>n<span class=\"token operator\">-</span>e<span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">*</span>sum<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> cha<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">*</span>sum<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>cha<span class=\"token operator\">+</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> q<span class=\"token operator\">=</span>sum<span class=\"token operator\">-</span>p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>q<span class=\"token operator\">==</span>n<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>e<span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>欢迎到博客看其他题解。</p>\n"},{"title":"CSP-J2022T1","date":"2023-11-04T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n[题目传送门](/prblem/P8813)\n\n在$a,b>0,0$ $\\leq$ $i$ $\\leq$ $b$的情况下，肯定满足$a^b$ $\\geq$ $a^{b-i}$，所以在快速幂的时候发现大于$10^9$就返回$1$。\n\n\n十年OI一场空，不开long long见祖宗。\n\n十年OI一场空，没有freopen见祖宗。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define int long long\nusing namespace std;\nint pow(int a,int b){\n    if(b==0){\n        return 1;\n    }\n    if(b%2==1){\n        int temp=pow(a,b-1);\n        if(temp==-1){\n            return -1;\n        }\n        if(temp*a>1000000000ll){\n            return -1;\n        }\n        return temp*a;\n    }else{\n        int temp=pow(a,b/2);\n        if(temp==-1){\n            return -1;\n        }\n        if(temp*temp>1000000000ll){\n            return -1;\n        }\n        return temp*temp;\n    }\n}\nint mian(){\n    int a,b;\n    scanf(\"%lld%lld\",&a,&b);\n    printf(\"%lld\",pow(a,b));\n    return 0;\n}\n```\n欢迎到博客看其他题解。\n","source":"_posts/0016.md","raw":"---\ntitle: CSP-J2022T1\ndate: 2023-11-05\ntags: [OI,CSP]\ntoc: true\nmathjax: true\n---\n\n[题目传送门](/prblem/P8813)\n\n在$a,b>0,0$ $\\leq$ $i$ $\\leq$ $b$的情况下，肯定满足$a^b$ $\\geq$ $a^{b-i}$，所以在快速幂的时候发现大于$10^9$就返回$1$。\n\n\n十年OI一场空，不开long long见祖宗。\n\n十年OI一场空，没有freopen见祖宗。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define int long long\nusing namespace std;\nint pow(int a,int b){\n    if(b==0){\n        return 1;\n    }\n    if(b%2==1){\n        int temp=pow(a,b-1);\n        if(temp==-1){\n            return -1;\n        }\n        if(temp*a>1000000000ll){\n            return -1;\n        }\n        return temp*a;\n    }else{\n        int temp=pow(a,b/2);\n        if(temp==-1){\n            return -1;\n        }\n        if(temp*temp>1000000000ll){\n            return -1;\n        }\n        return temp*temp;\n    }\n}\nint mian(){\n    int a,b;\n    scanf(\"%lld%lld\",&a,&b);\n    printf(\"%lld\",pow(a,b));\n    return 0;\n}\n```\n欢迎到博客看其他题解。\n","slug":"0016","published":1,"updated":"2024-01-08T12:20:06.387Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjx000rxday9gjia1jg","content":"<p><a href=\"/prblem/P8813\">题目传送门</a></p>\n<p>在$a,b&gt;0,0$ $\\leq$ $i$ $\\leq$ $b$的情况下，肯定满足$a^b$ $\\geq$ $a^{b-i}$，所以在快速幂的时候发现大于$10^9$就返回$1$。</p>\n<p>十年OI一场空，不开long long见祖宗。</p>\n<p>十年OI一场空，没有freopen见祖宗。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">*</span>a<span class=\"token operator\">></span><span class=\"token number\">1000000000ll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">*</span>temp<span class=\"token operator\">></span><span class=\"token number\">1000000000ll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>欢迎到博客看其他题解。</p>\n","excerpt":"","more":"<p><a href=\"/prblem/P8813\">题目传送门</a></p>\n<p>在$a,b&gt;0,0$ $\\leq$ $i$ $\\leq$ $b$的情况下，肯定满足$a^b$ $\\geq$ $a^{b-i}$，所以在快速幂的时候发现大于$10^9$就返回$1$。</p>\n<p>十年OI一场空，不开long long见祖宗。</p>\n<p>十年OI一场空，没有freopen见祖宗。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">*</span>a<span class=\"token operator\">></span><span class=\"token number\">1000000000ll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">*</span>temp<span class=\"token operator\">></span><span class=\"token number\">1000000000ll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>欢迎到博客看其他题解。</p>\n"},{"title":"CSP-J2022游记","date":"2023-11-04T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n#### Day -???:（9.20左右）\n\n初赛打完后等成绩，意外的是两组都过了，所以10/29上下午都在打比赛。\n\n#### Day -4:（10.25）\n\n因为要打双赛，所以提前一周停课了几天在机房打模板，整天泡在洛谷里面，一天能过12道题那种。\n\n小插曲：期间好多地方因疫情原因停止举办，还好四川没有疫情，差点吓死。\n\n#### Day 0:（10.29）\n早上一大早6：30起床去七中考试，到考场手忙脚乱的拿资料，真诚建议拿一个大一点的包，不然真的很尴尬。\n\n#### 说普及比赛吧：\n\nT1很简单但是感觉相比于去年更坑了一点。\n\nT2数学结论题，可能让很多考生把初一的知识忘了（知二求余），包括我，我用了奇奇怪怪的方法过了民间和大样例，目前看下来很sb，但是能过。\n\nT3纯纯的码农题，没意思，强烈建议出点思维题。\n\nT4最开始想到按$x$,$y$排序，应该就是选一段，然后中间的再补，结果发现二维上不能这样，然后画了画图发现可以$O(n^2)$枚举，路径无非就是中转，用Floyd做。但是用了map命名，没有引用map头文件，好多OJ上都没爆，看看会不会出问题，或许真的应该不打using namespace std;\n\n#### Day1:（10.30）\n\n早上10：00教练给了选手代码，交上洛谷评测AK\n\n博客写了题解。\n\n#### Day6：(11.04)\n听说同机房人好多tg都g了，我也可能g了\n\n各位加油\n\n提高烂了，不想说了，明年继续。\n","source":"_posts/0017.md","raw":"---\ntitle: CSP-J2022游记\ndate: 2023-11-05\ntags: [OI,CSP]\ntoc: true\nmathjax: true\n---\n\n#### Day -???:（9.20左右）\n\n初赛打完后等成绩，意外的是两组都过了，所以10/29上下午都在打比赛。\n\n#### Day -4:（10.25）\n\n因为要打双赛，所以提前一周停课了几天在机房打模板，整天泡在洛谷里面，一天能过12道题那种。\n\n小插曲：期间好多地方因疫情原因停止举办，还好四川没有疫情，差点吓死。\n\n#### Day 0:（10.29）\n早上一大早6：30起床去七中考试，到考场手忙脚乱的拿资料，真诚建议拿一个大一点的包，不然真的很尴尬。\n\n#### 说普及比赛吧：\n\nT1很简单但是感觉相比于去年更坑了一点。\n\nT2数学结论题，可能让很多考生把初一的知识忘了（知二求余），包括我，我用了奇奇怪怪的方法过了民间和大样例，目前看下来很sb，但是能过。\n\nT3纯纯的码农题，没意思，强烈建议出点思维题。\n\nT4最开始想到按$x$,$y$排序，应该就是选一段，然后中间的再补，结果发现二维上不能这样，然后画了画图发现可以$O(n^2)$枚举，路径无非就是中转，用Floyd做。但是用了map命名，没有引用map头文件，好多OJ上都没爆，看看会不会出问题，或许真的应该不打using namespace std;\n\n#### Day1:（10.30）\n\n早上10：00教练给了选手代码，交上洛谷评测AK\n\n博客写了题解。\n\n#### Day6：(11.04)\n听说同机房人好多tg都g了，我也可能g了\n\n各位加油\n\n提高烂了，不想说了，明年继续。\n","slug":"0017","published":1,"updated":"2024-01-08T12:03:26.210Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjy000uxday4w50cnre","content":"<h4 id=\"Day-（9-20左右）\"><a href=\"#Day-（9-20左右）\" class=\"headerlink\" title=\"Day -???:（9.20左右）\"></a>Day -???:（9.20左右）</h4><p>初赛打完后等成绩，意外的是两组都过了，所以10/29上下午都在打比赛。</p>\n<h4 id=\"Day-4-（10-25）\"><a href=\"#Day-4-（10-25）\" class=\"headerlink\" title=\"Day -4:（10.25）\"></a>Day -4:（10.25）</h4><p>因为要打双赛，所以提前一周停课了几天在机房打模板，整天泡在洛谷里面，一天能过12道题那种。</p>\n<p>小插曲：期间好多地方因疫情原因停止举办，还好四川没有疫情，差点吓死。</p>\n<h4 id=\"Day-0-（10-29）\"><a href=\"#Day-0-（10-29）\" class=\"headerlink\" title=\"Day 0:（10.29）\"></a>Day 0:（10.29）</h4><p>早上一大早6：30起床去七中考试，到考场手忙脚乱的拿资料，真诚建议拿一个大一点的包，不然真的很尴尬。</p>\n<h4 id=\"说普及比赛吧：\"><a href=\"#说普及比赛吧：\" class=\"headerlink\" title=\"说普及比赛吧：\"></a>说普及比赛吧：</h4><p>T1很简单但是感觉相比于去年更坑了一点。</p>\n<p>T2数学结论题，可能让很多考生把初一的知识忘了（知二求余），包括我，我用了奇奇怪怪的方法过了民间和大样例，目前看下来很sb，但是能过。</p>\n<p>T3纯纯的码农题，没意思，强烈建议出点思维题。</p>\n<p>T4最开始想到按$x$,$y$排序，应该就是选一段，然后中间的再补，结果发现二维上不能这样，然后画了画图发现可以$O(n^2)$枚举，路径无非就是中转，用Floyd做。但是用了map命名，没有引用map头文件，好多OJ上都没爆，看看会不会出问题，或许真的应该不打using namespace std;</p>\n<h4 id=\"Day1-（10-30）\"><a href=\"#Day1-（10-30）\" class=\"headerlink\" title=\"Day1:（10.30）\"></a>Day1:（10.30）</h4><p>早上10：00教练给了选手代码，交上洛谷评测AK</p>\n<p>博客写了题解。</p>\n<h4 id=\"Day6：-11-04\"><a href=\"#Day6：-11-04\" class=\"headerlink\" title=\"Day6：(11.04)\"></a>Day6：(11.04)</h4><p>听说同机房人好多tg都g了，我也可能g了</p>\n<p>各位加油</p>\n<p>提高烂了，不想说了，明年继续。</p>\n","excerpt":"","more":"<h4 id=\"Day-（9-20左右）\"><a href=\"#Day-（9-20左右）\" class=\"headerlink\" title=\"Day -???:（9.20左右）\"></a>Day -???:（9.20左右）</h4><p>初赛打完后等成绩，意外的是两组都过了，所以10/29上下午都在打比赛。</p>\n<h4 id=\"Day-4-（10-25）\"><a href=\"#Day-4-（10-25）\" class=\"headerlink\" title=\"Day -4:（10.25）\"></a>Day -4:（10.25）</h4><p>因为要打双赛，所以提前一周停课了几天在机房打模板，整天泡在洛谷里面，一天能过12道题那种。</p>\n<p>小插曲：期间好多地方因疫情原因停止举办，还好四川没有疫情，差点吓死。</p>\n<h4 id=\"Day-0-（10-29）\"><a href=\"#Day-0-（10-29）\" class=\"headerlink\" title=\"Day 0:（10.29）\"></a>Day 0:（10.29）</h4><p>早上一大早6：30起床去七中考试，到考场手忙脚乱的拿资料，真诚建议拿一个大一点的包，不然真的很尴尬。</p>\n<h4 id=\"说普及比赛吧：\"><a href=\"#说普及比赛吧：\" class=\"headerlink\" title=\"说普及比赛吧：\"></a>说普及比赛吧：</h4><p>T1很简单但是感觉相比于去年更坑了一点。</p>\n<p>T2数学结论题，可能让很多考生把初一的知识忘了（知二求余），包括我，我用了奇奇怪怪的方法过了民间和大样例，目前看下来很sb，但是能过。</p>\n<p>T3纯纯的码农题，没意思，强烈建议出点思维题。</p>\n<p>T4最开始想到按$x$,$y$排序，应该就是选一段，然后中间的再补，结果发现二维上不能这样，然后画了画图发现可以$O(n^2)$枚举，路径无非就是中转，用Floyd做。但是用了map命名，没有引用map头文件，好多OJ上都没爆，看看会不会出问题，或许真的应该不打using namespace std;</p>\n<h4 id=\"Day1-（10-30）\"><a href=\"#Day1-（10-30）\" class=\"headerlink\" title=\"Day1:（10.30）\"></a>Day1:（10.30）</h4><p>早上10：00教练给了选手代码，交上洛谷评测AK</p>\n<p>博客写了题解。</p>\n<h4 id=\"Day6：-11-04\"><a href=\"#Day6：-11-04\" class=\"headerlink\" title=\"Day6：(11.04)\"></a>Day6：(11.04)</h4><p>听说同机房人好多tg都g了，我也可能g了</p>\n<p>各位加油</p>\n<p>提高烂了，不想说了，明年继续。</p>\n"},{"title":"SC-J 迷惑行为大赏","date":"2023-11-04T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# SC-J 迷惑行为大赏\n\n## 统计\n\n共有 `6925` 个 `freopen` ，`8821`个 `return 0;` ，看来 `freopen` 没打的人比较多。\n\n共有 `80` 个 `//freopen`。\n\n## 爆0\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jf4c71kd.png)\n\n明明写对了结果又挂分了。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2zk8t2jb.png)\n\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lwcygwvo.png)\n\n看来调试崩溃了。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/shbwp5qs.png)\n\n## CCF浓度\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/esiojwk3.png)\n\n## 暴戾语言\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3hgh65b4.png)\n\n为保护当事人，不公开其考号。\n\n## 直接了当\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ewfl9zzp.png)\n\n这个真的不是我！！！\n\n## pj没有原神\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gqlgk0am.png)\n\n笔者对 `mihoyu` 、`米哈游`等关键词进行查询均未找到。\n\n## 膜拜大佬\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ejjuwm6n.png)\n\n## pj也可以AFO\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/75jzi6vi.png)\n\n## AK\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ygtldloo.png)\n\nSC-J00580人在哪里，赶紧出来，赶紧cos。\n\nps：小图灵这人估分300,所以cos不了了。\n\n## 出题人\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/k3n1lpiv.png)\n\n骂出题人会不会导致连夜加强数据。\n\n## 未雨绸缪\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tynevanr.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3uojgwsg.png)\n\n## Love OI/CCF也没用\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aw90ow5x.png)\n\n要交钱\n\n## [Zi_Gao](https://www.luogu.com.cn/user/554698)怎么你了\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2xfv7bph.png)\n\nSC-J00454出来回应一下。\n\nupd:![](https://cdn.luogu.com.cn/upload/image_hosting/w6mmbr64.png)\n\n## 励志\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zeefo219.png)\n\n差不多了，私信删。\n\n[SC-S迷惑行为大赏](https://www.luogu.com.cn/paste/gcq95gtb)\n\nSC源码：\n\n[SC-J](https://wwjo.lanzouj.com/iaWUg1ci4fmd)\n\n[SC-S](https://wwjo.lanzouj.com/iJnCY1ci4fkb)\n","source":"_posts/0018.md","raw":"---\ntitle: SC-J 迷惑行为大赏\ndate: 2023-11-05\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n# SC-J 迷惑行为大赏\n\n## 统计\n\n共有 `6925` 个 `freopen` ，`8821`个 `return 0;` ，看来 `freopen` 没打的人比较多。\n\n共有 `80` 个 `//freopen`。\n\n## 爆0\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jf4c71kd.png)\n\n明明写对了结果又挂分了。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2zk8t2jb.png)\n\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lwcygwvo.png)\n\n看来调试崩溃了。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/shbwp5qs.png)\n\n## CCF浓度\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/esiojwk3.png)\n\n## 暴戾语言\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3hgh65b4.png)\n\n为保护当事人，不公开其考号。\n\n## 直接了当\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ewfl9zzp.png)\n\n这个真的不是我！！！\n\n## pj没有原神\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gqlgk0am.png)\n\n笔者对 `mihoyu` 、`米哈游`等关键词进行查询均未找到。\n\n## 膜拜大佬\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ejjuwm6n.png)\n\n## pj也可以AFO\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/75jzi6vi.png)\n\n## AK\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ygtldloo.png)\n\nSC-J00580人在哪里，赶紧出来，赶紧cos。\n\nps：小图灵这人估分300,所以cos不了了。\n\n## 出题人\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/k3n1lpiv.png)\n\n骂出题人会不会导致连夜加强数据。\n\n## 未雨绸缪\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tynevanr.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3uojgwsg.png)\n\n## Love OI/CCF也没用\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aw90ow5x.png)\n\n要交钱\n\n## [Zi_Gao](https://www.luogu.com.cn/user/554698)怎么你了\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2xfv7bph.png)\n\nSC-J00454出来回应一下。\n\nupd:![](https://cdn.luogu.com.cn/upload/image_hosting/w6mmbr64.png)\n\n## 励志\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zeefo219.png)\n\n差不多了，私信删。\n\n[SC-S迷惑行为大赏](https://www.luogu.com.cn/paste/gcq95gtb)\n\nSC源码：\n\n[SC-J](https://wwjo.lanzouj.com/iaWUg1ci4fmd)\n\n[SC-S](https://wwjo.lanzouj.com/iJnCY1ci4fkb)\n","slug":"0018","published":1,"updated":"2024-01-08T12:03:54.868Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttjz000wxdayh72kewke","content":"<h1 id=\"SC-J-迷惑行为大赏\"><a href=\"#SC-J-迷惑行为大赏\" class=\"headerlink\" title=\"SC-J 迷惑行为大赏\"></a>SC-J 迷惑行为大赏</h1><h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>共有 <code>6925</code> 个 <code>freopen</code> ，<code>8821</code>个 <code>return 0;</code> ，看来 <code>freopen</code> 没打的人比较多。</p>\n<p>共有 <code>80</code> 个 <code>//freopen</code>。</p>\n<h2 id=\"爆0\"><a href=\"#爆0\" class=\"headerlink\" title=\"爆0\"></a>爆0</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/jf4c71kd.png\" alt=\"\"></p>\n<p>明明写对了结果又挂分了。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/2zk8t2jb.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/lwcygwvo.png\" alt=\"\"></p>\n<p>看来调试崩溃了。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/shbwp5qs.png\" alt=\"\"></p>\n<h2 id=\"CCF浓度\"><a href=\"#CCF浓度\" class=\"headerlink\" title=\"CCF浓度\"></a>CCF浓度</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/esiojwk3.png\" alt=\"\"></p>\n<h2 id=\"暴戾语言\"><a href=\"#暴戾语言\" class=\"headerlink\" title=\"暴戾语言\"></a>暴戾语言</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/3hgh65b4.png\" alt=\"\"></p>\n<p>为保护当事人，不公开其考号。</p>\n<h2 id=\"直接了当\"><a href=\"#直接了当\" class=\"headerlink\" title=\"直接了当\"></a>直接了当</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ewfl9zzp.png\" alt=\"\"></p>\n<p>这个真的不是我！！！</p>\n<h2 id=\"pj没有原神\"><a href=\"#pj没有原神\" class=\"headerlink\" title=\"pj没有原神\"></a>pj没有原神</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/gqlgk0am.png\" alt=\"\"></p>\n<p>笔者对 <code>mihoyu</code> 、<code>米哈游</code>等关键词进行查询均未找到。</p>\n<h2 id=\"膜拜大佬\"><a href=\"#膜拜大佬\" class=\"headerlink\" title=\"膜拜大佬\"></a>膜拜大佬</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ejjuwm6n.png\" alt=\"\"></p>\n<h2 id=\"pj也可以AFO\"><a href=\"#pj也可以AFO\" class=\"headerlink\" title=\"pj也可以AFO\"></a>pj也可以AFO</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/75jzi6vi.png\" alt=\"\"></p>\n<h2 id=\"AK\"><a href=\"#AK\" class=\"headerlink\" title=\"AK\"></a>AK</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ygtldloo.png\" alt=\"\"></p>\n<p>SC-J00580人在哪里，赶紧出来，赶紧cos。</p>\n<p>ps：小图灵这人估分300,所以cos不了了。</p>\n<h2 id=\"出题人\"><a href=\"#出题人\" class=\"headerlink\" title=\"出题人\"></a>出题人</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/k3n1lpiv.png\" alt=\"\"></p>\n<p>骂出题人会不会导致连夜加强数据。</p>\n<h2 id=\"未雨绸缪\"><a href=\"#未雨绸缪\" class=\"headerlink\" title=\"未雨绸缪\"></a>未雨绸缪</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/tynevanr.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/3uojgwsg.png\" alt=\"\"></p>\n<h2 id=\"Love-OI-CCF也没用\"><a href=\"#Love-OI-CCF也没用\" class=\"headerlink\" title=\"Love OI/CCF也没用\"></a>Love OI/CCF也没用</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/aw90ow5x.png\" alt=\"\"></p>\n<p>要交钱</p>\n<h2 id=\"Zi-Gao怎么你了\"><a href=\"#Zi-Gao怎么你了\" class=\"headerlink\" title=\"Zi_Gao怎么你了\"></a><a href=\"https://www.luogu.com.cn/user/554698\">Zi_Gao</a>怎么你了</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/2xfv7bph.png\" alt=\"\"></p>\n<p>SC-J00454出来回应一下。</p>\n<p>upd:<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/w6mmbr64.png\" alt=\"\"></p>\n<h2 id=\"励志\"><a href=\"#励志\" class=\"headerlink\" title=\"励志\"></a>励志</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/zeefo219.png\" alt=\"\"></p>\n<p>差不多了，私信删。</p>\n<p><a href=\"https://www.luogu.com.cn/paste/gcq95gtb\">SC-S迷惑行为大赏</a></p>\n<p>SC源码：</p>\n<p><a href=\"https://wwjo.lanzouj.com/iaWUg1ci4fmd\">SC-J</a></p>\n<p><a href=\"https://wwjo.lanzouj.com/iJnCY1ci4fkb\">SC-S</a></p>\n","excerpt":"","more":"<h1 id=\"SC-J-迷惑行为大赏\"><a href=\"#SC-J-迷惑行为大赏\" class=\"headerlink\" title=\"SC-J 迷惑行为大赏\"></a>SC-J 迷惑行为大赏</h1><h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>共有 <code>6925</code> 个 <code>freopen</code> ，<code>8821</code>个 <code>return 0;</code> ，看来 <code>freopen</code> 没打的人比较多。</p>\n<p>共有 <code>80</code> 个 <code>//freopen</code>。</p>\n<h2 id=\"爆0\"><a href=\"#爆0\" class=\"headerlink\" title=\"爆0\"></a>爆0</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/jf4c71kd.png\" alt=\"\"></p>\n<p>明明写对了结果又挂分了。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/2zk8t2jb.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/lwcygwvo.png\" alt=\"\"></p>\n<p>看来调试崩溃了。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/shbwp5qs.png\" alt=\"\"></p>\n<h2 id=\"CCF浓度\"><a href=\"#CCF浓度\" class=\"headerlink\" title=\"CCF浓度\"></a>CCF浓度</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/esiojwk3.png\" alt=\"\"></p>\n<h2 id=\"暴戾语言\"><a href=\"#暴戾语言\" class=\"headerlink\" title=\"暴戾语言\"></a>暴戾语言</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/3hgh65b4.png\" alt=\"\"></p>\n<p>为保护当事人，不公开其考号。</p>\n<h2 id=\"直接了当\"><a href=\"#直接了当\" class=\"headerlink\" title=\"直接了当\"></a>直接了当</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ewfl9zzp.png\" alt=\"\"></p>\n<p>这个真的不是我！！！</p>\n<h2 id=\"pj没有原神\"><a href=\"#pj没有原神\" class=\"headerlink\" title=\"pj没有原神\"></a>pj没有原神</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/gqlgk0am.png\" alt=\"\"></p>\n<p>笔者对 <code>mihoyu</code> 、<code>米哈游</code>等关键词进行查询均未找到。</p>\n<h2 id=\"膜拜大佬\"><a href=\"#膜拜大佬\" class=\"headerlink\" title=\"膜拜大佬\"></a>膜拜大佬</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ejjuwm6n.png\" alt=\"\"></p>\n<h2 id=\"pj也可以AFO\"><a href=\"#pj也可以AFO\" class=\"headerlink\" title=\"pj也可以AFO\"></a>pj也可以AFO</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/75jzi6vi.png\" alt=\"\"></p>\n<h2 id=\"AK\"><a href=\"#AK\" class=\"headerlink\" title=\"AK\"></a>AK</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ygtldloo.png\" alt=\"\"></p>\n<p>SC-J00580人在哪里，赶紧出来，赶紧cos。</p>\n<p>ps：小图灵这人估分300,所以cos不了了。</p>\n<h2 id=\"出题人\"><a href=\"#出题人\" class=\"headerlink\" title=\"出题人\"></a>出题人</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/k3n1lpiv.png\" alt=\"\"></p>\n<p>骂出题人会不会导致连夜加强数据。</p>\n<h2 id=\"未雨绸缪\"><a href=\"#未雨绸缪\" class=\"headerlink\" title=\"未雨绸缪\"></a>未雨绸缪</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/tynevanr.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/3uojgwsg.png\" alt=\"\"></p>\n<h2 id=\"Love-OI-CCF也没用\"><a href=\"#Love-OI-CCF也没用\" class=\"headerlink\" title=\"Love OI/CCF也没用\"></a>Love OI/CCF也没用</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/aw90ow5x.png\" alt=\"\"></p>\n<p>要交钱</p>\n<h2 id=\"Zi-Gao怎么你了\"><a href=\"#Zi-Gao怎么你了\" class=\"headerlink\" title=\"Zi_Gao怎么你了\"></a><a href=\"https://www.luogu.com.cn/user/554698\">Zi_Gao</a>怎么你了</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/2xfv7bph.png\" alt=\"\"></p>\n<p>SC-J00454出来回应一下。</p>\n<p>upd:<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/w6mmbr64.png\" alt=\"\"></p>\n<h2 id=\"励志\"><a href=\"#励志\" class=\"headerlink\" title=\"励志\"></a>励志</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/zeefo219.png\" alt=\"\"></p>\n<p>差不多了，私信删。</p>\n<p><a href=\"https://www.luogu.com.cn/paste/gcq95gtb\">SC-S迷惑行为大赏</a></p>\n<p>SC源码：</p>\n<p><a href=\"https://wwjo.lanzouj.com/iaWUg1ci4fmd\">SC-J</a></p>\n<p><a href=\"https://wwjo.lanzouj.com/iJnCY1ci4fkb\">SC-S</a></p>\n"},{"title":"SC-S 迷惑行为大赏","date":"2023-11-02T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n# SC-S 迷惑行为大赏\n\n## 无意义统计\n\n在 4 小时内， SC选手打出了 $2447$ 个文件，共$4892$ 个`freopen` , $3391$ 个`return 0;`\n\n\n## 经典爆0错误\n\n### //freopen\n\n共计有25个\n`//freopen\n` 。\n![](https://cdn.luogu.com.cn/upload/image_hosting/n459diq9.png)\n\n这下打表也要挂分了。暂时没找到`freopen`拼写错误。\n\n## 暴戾语言\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5uukmfbg.png)\n\n为保护该选手，不展示其考号。\n\n## 直接了当\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hb8lp4ac.png)\n\n## 原神启动\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z3yqxx5i.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/u97rcgbi.png)\n\n## %%%\n![](https://cdn.luogu.com.cn/upload/image_hosting/ifl4j8hq.png)\n\nSC-S00538 选手真喜欢膜拜啊\n\n## 尊敬CCF\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w2sd3oc8.png)\n\n看注释，看来看过考前玄学物品，就是不知道有没有在泳池后空翻。\n\n## 输完样例发现自己会做了\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3y8xr696.png)\n\n## 喜欢OI没用，建议给CCF捐钱\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/97ikhwgc.png)\n\n## 我们教练怎么你了\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/liwtcyvq.png)\n\nps：我猜是hash\n\n## 表白\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ub9tnibt.png)\n\n你的表白被看到了，下次记得不要输样例。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fpoaach5.png)\n\n## 考试不能做与考试无关的事情\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/krmmazqm.png)\n\n## 游客模式是什么\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ypzsz32a.png)\n\n## 考场怎么写游记\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pzins20d.png)\n\n## 退役人\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vfms1evj.png)\n\n## AK人\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ii0vcvyy.png)\n\n差不多了，私信删，那个 `I don't know` 是我自己。\n\n## cym是谁\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/snp2dnjg.png)\n\ntips：当事人要求加上的\n\n[SC-J迷惑行为\n](https://www.luogu.com.cn/paste/ek4kbp0t)\n\nSC源码：\n\n[SC-J](https://wwjo.lanzouj.com/iaWUg1ci4fmd)\n\n[SC-S](https://wwjo.lanzouj.com/iJnCY1ci4fkb)\n","source":"_posts/0019.md","raw":"---\ntitle: SC-S 迷惑行为大赏\ndate: 2023-11-03\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n# SC-S 迷惑行为大赏\n\n## 无意义统计\n\n在 4 小时内， SC选手打出了 $2447$ 个文件，共$4892$ 个`freopen` , $3391$ 个`return 0;`\n\n\n## 经典爆0错误\n\n### //freopen\n\n共计有25个\n`//freopen\n` 。\n![](https://cdn.luogu.com.cn/upload/image_hosting/n459diq9.png)\n\n这下打表也要挂分了。暂时没找到`freopen`拼写错误。\n\n## 暴戾语言\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5uukmfbg.png)\n\n为保护该选手，不展示其考号。\n\n## 直接了当\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hb8lp4ac.png)\n\n## 原神启动\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z3yqxx5i.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/u97rcgbi.png)\n\n## %%%\n![](https://cdn.luogu.com.cn/upload/image_hosting/ifl4j8hq.png)\n\nSC-S00538 选手真喜欢膜拜啊\n\n## 尊敬CCF\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w2sd3oc8.png)\n\n看注释，看来看过考前玄学物品，就是不知道有没有在泳池后空翻。\n\n## 输完样例发现自己会做了\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3y8xr696.png)\n\n## 喜欢OI没用，建议给CCF捐钱\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/97ikhwgc.png)\n\n## 我们教练怎么你了\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/liwtcyvq.png)\n\nps：我猜是hash\n\n## 表白\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ub9tnibt.png)\n\n你的表白被看到了，下次记得不要输样例。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fpoaach5.png)\n\n## 考试不能做与考试无关的事情\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/krmmazqm.png)\n\n## 游客模式是什么\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ypzsz32a.png)\n\n## 考场怎么写游记\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pzins20d.png)\n\n## 退役人\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vfms1evj.png)\n\n## AK人\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ii0vcvyy.png)\n\n差不多了，私信删，那个 `I don't know` 是我自己。\n\n## cym是谁\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/snp2dnjg.png)\n\ntips：当事人要求加上的\n\n[SC-J迷惑行为\n](https://www.luogu.com.cn/paste/ek4kbp0t)\n\nSC源码：\n\n[SC-J](https://wwjo.lanzouj.com/iaWUg1ci4fmd)\n\n[SC-S](https://wwjo.lanzouj.com/iJnCY1ci4fkb)\n","slug":"0019","published":1,"updated":"2024-01-08T12:19:59.227Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk1000zxday9pync6l1","content":"<h1 id=\"SC-S-迷惑行为大赏\"><a href=\"#SC-S-迷惑行为大赏\" class=\"headerlink\" title=\"SC-S 迷惑行为大赏\"></a>SC-S 迷惑行为大赏</h1><h2 id=\"无意义统计\"><a href=\"#无意义统计\" class=\"headerlink\" title=\"无意义统计\"></a>无意义统计</h2><p>在 4 小时内， SC选手打出了 $2447$ 个文件，共$4892$ 个<code>freopen</code> , $3391$ 个<code>return 0;</code></p>\n<h2 id=\"经典爆0错误\"><a href=\"#经典爆0错误\" class=\"headerlink\" title=\"经典爆0错误\"></a>经典爆0错误</h2><h3 id=\"freopen\"><a href=\"#freopen\" class=\"headerlink\" title=\"//freopen\"></a>//freopen</h3><p>共计有25个<br><code>//freopen</code> 。<br><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/n459diq9.png\" alt=\"\"></p>\n<p>这下打表也要挂分了。暂时没找到<code>freopen</code>拼写错误。</p>\n<h2 id=\"暴戾语言\"><a href=\"#暴戾语言\" class=\"headerlink\" title=\"暴戾语言\"></a>暴戾语言</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/5uukmfbg.png\" alt=\"\"></p>\n<p>为保护该选手，不展示其考号。</p>\n<h2 id=\"直接了当\"><a href=\"#直接了当\" class=\"headerlink\" title=\"直接了当\"></a>直接了当</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hb8lp4ac.png\" alt=\"\"></p>\n<h2 id=\"原神启动\"><a href=\"#原神启动\" class=\"headerlink\" title=\"原神启动\"></a>原神启动</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/z3yqxx5i.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/u97rcgbi.png\" alt=\"\"></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%%%\"></a>%%%</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ifl4j8hq.png\" alt=\"\"></p>\n<p>SC-S00538 选手真喜欢膜拜啊</p>\n<h2 id=\"尊敬CCF\"><a href=\"#尊敬CCF\" class=\"headerlink\" title=\"尊敬CCF\"></a>尊敬CCF</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/w2sd3oc8.png\" alt=\"\"></p>\n<p>看注释，看来看过考前玄学物品，就是不知道有没有在泳池后空翻。</p>\n<h2 id=\"输完样例发现自己会做了\"><a href=\"#输完样例发现自己会做了\" class=\"headerlink\" title=\"输完样例发现自己会做了\"></a>输完样例发现自己会做了</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/3y8xr696.png\" alt=\"\"></p>\n<h2 id=\"喜欢OI没用，建议给CCF捐钱\"><a href=\"#喜欢OI没用，建议给CCF捐钱\" class=\"headerlink\" title=\"喜欢OI没用，建议给CCF捐钱\"></a>喜欢OI没用，建议给CCF捐钱</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/97ikhwgc.png\" alt=\"\"></p>\n<h2 id=\"我们教练怎么你了\"><a href=\"#我们教练怎么你了\" class=\"headerlink\" title=\"我们教练怎么你了\"></a>我们教练怎么你了</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/liwtcyvq.png\" alt=\"\"></p>\n<p>ps：我猜是hash</p>\n<h2 id=\"表白\"><a href=\"#表白\" class=\"headerlink\" title=\"表白\"></a>表白</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ub9tnibt.png\" alt=\"\"></p>\n<p>你的表白被看到了，下次记得不要输样例。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/fpoaach5.png\" alt=\"\"></p>\n<h2 id=\"考试不能做与考试无关的事情\"><a href=\"#考试不能做与考试无关的事情\" class=\"headerlink\" title=\"考试不能做与考试无关的事情\"></a>考试不能做与考试无关的事情</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/krmmazqm.png\" alt=\"\"></p>\n<h2 id=\"游客模式是什么\"><a href=\"#游客模式是什么\" class=\"headerlink\" title=\"游客模式是什么\"></a>游客模式是什么</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ypzsz32a.png\" alt=\"\"></p>\n<h2 id=\"考场怎么写游记\"><a href=\"#考场怎么写游记\" class=\"headerlink\" title=\"考场怎么写游记\"></a>考场怎么写游记</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/pzins20d.png\" alt=\"\"></p>\n<h2 id=\"退役人\"><a href=\"#退役人\" class=\"headerlink\" title=\"退役人\"></a>退役人</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/vfms1evj.png\" alt=\"\"></p>\n<h2 id=\"AK人\"><a href=\"#AK人\" class=\"headerlink\" title=\"AK人\"></a>AK人</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ii0vcvyy.png\" alt=\"\"></p>\n<p>差不多了，私信删，那个 <code>I don&#39;t know</code> 是我自己。</p>\n<h2 id=\"cym是谁\"><a href=\"#cym是谁\" class=\"headerlink\" title=\"cym是谁\"></a>cym是谁</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/snp2dnjg.png\" alt=\"\"></p>\n<p>tips：当事人要求加上的</p>\n<p><a href=\"https://www.luogu.com.cn/paste/ek4kbp0t\">SC-J迷惑行为\n</a></p>\n<p>SC源码：</p>\n<p><a href=\"https://wwjo.lanzouj.com/iaWUg1ci4fmd\">SC-J</a></p>\n<p><a href=\"https://wwjo.lanzouj.com/iJnCY1ci4fkb\">SC-S</a></p>\n","excerpt":"","more":"<h1 id=\"SC-S-迷惑行为大赏\"><a href=\"#SC-S-迷惑行为大赏\" class=\"headerlink\" title=\"SC-S 迷惑行为大赏\"></a>SC-S 迷惑行为大赏</h1><h2 id=\"无意义统计\"><a href=\"#无意义统计\" class=\"headerlink\" title=\"无意义统计\"></a>无意义统计</h2><p>在 4 小时内， SC选手打出了 $2447$ 个文件，共$4892$ 个<code>freopen</code> , $3391$ 个<code>return 0;</code></p>\n<h2 id=\"经典爆0错误\"><a href=\"#经典爆0错误\" class=\"headerlink\" title=\"经典爆0错误\"></a>经典爆0错误</h2><h3 id=\"freopen\"><a href=\"#freopen\" class=\"headerlink\" title=\"//freopen\"></a>//freopen</h3><p>共计有25个<br><code>//freopen</code> 。<br><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/n459diq9.png\" alt=\"\"></p>\n<p>这下打表也要挂分了。暂时没找到<code>freopen</code>拼写错误。</p>\n<h2 id=\"暴戾语言\"><a href=\"#暴戾语言\" class=\"headerlink\" title=\"暴戾语言\"></a>暴戾语言</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/5uukmfbg.png\" alt=\"\"></p>\n<p>为保护该选手，不展示其考号。</p>\n<h2 id=\"直接了当\"><a href=\"#直接了当\" class=\"headerlink\" title=\"直接了当\"></a>直接了当</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/hb8lp4ac.png\" alt=\"\"></p>\n<h2 id=\"原神启动\"><a href=\"#原神启动\" class=\"headerlink\" title=\"原神启动\"></a>原神启动</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/z3yqxx5i.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/u97rcgbi.png\" alt=\"\"></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%%%\"></a>%%%</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ifl4j8hq.png\" alt=\"\"></p>\n<p>SC-S00538 选手真喜欢膜拜啊</p>\n<h2 id=\"尊敬CCF\"><a href=\"#尊敬CCF\" class=\"headerlink\" title=\"尊敬CCF\"></a>尊敬CCF</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/w2sd3oc8.png\" alt=\"\"></p>\n<p>看注释，看来看过考前玄学物品，就是不知道有没有在泳池后空翻。</p>\n<h2 id=\"输完样例发现自己会做了\"><a href=\"#输完样例发现自己会做了\" class=\"headerlink\" title=\"输完样例发现自己会做了\"></a>输完样例发现自己会做了</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/3y8xr696.png\" alt=\"\"></p>\n<h2 id=\"喜欢OI没用，建议给CCF捐钱\"><a href=\"#喜欢OI没用，建议给CCF捐钱\" class=\"headerlink\" title=\"喜欢OI没用，建议给CCF捐钱\"></a>喜欢OI没用，建议给CCF捐钱</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/97ikhwgc.png\" alt=\"\"></p>\n<h2 id=\"我们教练怎么你了\"><a href=\"#我们教练怎么你了\" class=\"headerlink\" title=\"我们教练怎么你了\"></a>我们教练怎么你了</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/liwtcyvq.png\" alt=\"\"></p>\n<p>ps：我猜是hash</p>\n<h2 id=\"表白\"><a href=\"#表白\" class=\"headerlink\" title=\"表白\"></a>表白</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ub9tnibt.png\" alt=\"\"></p>\n<p>你的表白被看到了，下次记得不要输样例。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/fpoaach5.png\" alt=\"\"></p>\n<h2 id=\"考试不能做与考试无关的事情\"><a href=\"#考试不能做与考试无关的事情\" class=\"headerlink\" title=\"考试不能做与考试无关的事情\"></a>考试不能做与考试无关的事情</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/krmmazqm.png\" alt=\"\"></p>\n<h2 id=\"游客模式是什么\"><a href=\"#游客模式是什么\" class=\"headerlink\" title=\"游客模式是什么\"></a>游客模式是什么</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ypzsz32a.png\" alt=\"\"></p>\n<h2 id=\"考场怎么写游记\"><a href=\"#考场怎么写游记\" class=\"headerlink\" title=\"考场怎么写游记\"></a>考场怎么写游记</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/pzins20d.png\" alt=\"\"></p>\n<h2 id=\"退役人\"><a href=\"#退役人\" class=\"headerlink\" title=\"退役人\"></a>退役人</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/vfms1evj.png\" alt=\"\"></p>\n<h2 id=\"AK人\"><a href=\"#AK人\" class=\"headerlink\" title=\"AK人\"></a>AK人</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/ii0vcvyy.png\" alt=\"\"></p>\n<p>差不多了，私信删，那个 <code>I don&#39;t know</code> 是我自己。</p>\n<h2 id=\"cym是谁\"><a href=\"#cym是谁\" class=\"headerlink\" title=\"cym是谁\"></a>cym是谁</h2><p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/snp2dnjg.png\" alt=\"\"></p>\n<p>tips：当事人要求加上的</p>\n<p><a href=\"https://www.luogu.com.cn/paste/ek4kbp0t\">SC-J迷惑行为\n</a></p>\n<p>SC源码：</p>\n<p><a href=\"https://wwjo.lanzouj.com/iaWUg1ci4fmd\">SC-J</a></p>\n<p><a href=\"https://wwjo.lanzouj.com/iJnCY1ci4fkb\">SC-S</a></p>\n"},{"title":"区间DP","date":"2023-07-19T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n\n区间$DP$将区间作为状态进行$DP$。\n\n[P1880](/problem/P1880)是很典型的区间$DP$。设$dp_{i,j}$为已经将$i,j$之间的合并后的结果。\n\n接下来考虑如何枚举，$DP$ 枚举的关键是三大点：\n\n1、不会出现后效性。\n\n2、考虑第某个情况时，它所需要的子情况已经求解。\n\n3、不会违反题意。\n\n很显然$dp_{i,j}$明显是由2个更小的区间合并，所以可以在第一层循环中枚举区间大小$L(2<=L<=N)$第二层则枚举区间起点。那这个区间就已经确定了，再在区间内枚举分割点。即可AC。（记得断环为链）\n\n","source":"_posts/0020.md","raw":"---\ntitle: 区间DP\ndate: 2023-07-20\ntags: [OI,DP]\ntoc: true\nmathjax: true\n---\n\n\n区间$DP$将区间作为状态进行$DP$。\n\n[P1880](/problem/P1880)是很典型的区间$DP$。设$dp_{i,j}$为已经将$i,j$之间的合并后的结果。\n\n接下来考虑如何枚举，$DP$ 枚举的关键是三大点：\n\n1、不会出现后效性。\n\n2、考虑第某个情况时，它所需要的子情况已经求解。\n\n3、不会违反题意。\n\n很显然$dp_{i,j}$明显是由2个更小的区间合并，所以可以在第一层循环中枚举区间大小$L(2<=L<=N)$第二层则枚举区间起点。那这个区间就已经确定了，再在区间内枚举分割点。即可AC。（记得断环为链）\n\n","slug":"0020","published":1,"updated":"2024-01-08T12:05:58.312Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk20011xdaycisw65xb","content":"<p>区间$DP$将区间作为状态进行$DP$。</p>\n<p><a href=\"/problem/P1880\">P1880</a>是很典型的区间$DP$。设$dp_{i,j}$为已经将$i,j$之间的合并后的结果。</p>\n<p>接下来考虑如何枚举，$DP$ 枚举的关键是三大点：</p>\n<p>1、不会出现后效性。</p>\n<p>2、考虑第某个情况时，它所需要的子情况已经求解。</p>\n<p>3、不会违反题意。</p>\n<p>很显然$dp_{i,j}$明显是由2个更小的区间合并，所以可以在第一层循环中枚举区间大小$L(2&lt;=L&lt;=N)$第二层则枚举区间起点。那这个区间就已经确定了，再在区间内枚举分割点。即可AC。（记得断环为链）</p>\n","excerpt":"","more":"<p>区间$DP$将区间作为状态进行$DP$。</p>\n<p><a href=\"/problem/P1880\">P1880</a>是很典型的区间$DP$。设$dp_{i,j}$为已经将$i,j$之间的合并后的结果。</p>\n<p>接下来考虑如何枚举，$DP$ 枚举的关键是三大点：</p>\n<p>1、不会出现后效性。</p>\n<p>2、考虑第某个情况时，它所需要的子情况已经求解。</p>\n<p>3、不会违反题意。</p>\n<p>很显然$dp_{i,j}$明显是由2个更小的区间合并，所以可以在第一层循环中枚举区间大小$L(2&lt;=L&lt;=N)$第二层则枚举区间起点。那这个区间就已经确定了，再在区间内枚举分割点。即可AC。（记得断环为链）</p>\n"},{"title":"Solution for the third competition in summer in 2022","date":"2022-08-02T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\nA:\n\nhs都~~水~~讲过了还做不来，建议回去反省上课摸了多久的鱼。\n矩阵乘法有结合律所以符合\n\n$A_n==({A_{n/2}})^2(n\\equiv 0\\mod 2)$\n\n\n$A_n==A_{n-1}*A(n\\equiv 1\\mod 2)$\n\n所以直接快速幂，快点写。建议练习用矩阵乘法计算斐波拉契序列。\n\n\nB:(YTC息怒)\n\n背包问题的典型变形。（只不过是增加了附件可以选择）\n\n考虑到有人没看过01背包问题所以这个题解姑且算个入门吧。\n\n\n\n# [NOIP2005 普及组] 采药\n\n## 题目描述\n\n辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”\n\n\n如果你是辰辰，你能完成这个任务吗？\n\n## 输入格式\n\n第一行有 $2$ 个整数 $T$（$1 \\le T \\le 1000$）和 $M$（$1 \\le  M \\le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。\n\n接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。\n\n## 输出格式\n\n输出在规定的时间内可以采到的草药的最大总价值。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n70 3\n71 100\n69 1\n1 2\n```\n\n### 样例输出 #1\n\n```\n3\n```\n\n## 提示\n\n**【数据范围】**\n\n- 对于 $30\\%$ 的数据，$M \\le 10$；\n- 对于全部的数据，$M \\le 100$。\n\n\n设计状态$dp_{ij}$为在考虑前i个药后，背包容量为j的情况。\n\n动态转移方程易得：\n\n不选$i$：$dp_{ij}=dp_{(i-1) j}$\n\n选$i$：$dp_{ij}=dp_{(i-1) (j-(t_{i}))}+cost_i$\n\n选最大即可。\n\n枚举顺序外层枚举物品，内层枚举背包容量（从大到小）\n\n为什么从大到小？？？\n\n因为这样可以避开多次选择，因为你会从背包容量小的进行转移，而这些方向暂时未考虑这个物品，所以不会多次选择。\n\n优化（压缩掉i维）：\n\n直接将第一维去掉就好了。\n\n回到这道题其实就是多了转移方式而已。\n\n```cpp\nif(j-a[i]>=0)\n\tdp[j]=max(dp[j],dp[j-a[i]]+b[i]); \nif(j-a[i]-c[i]>=0&&c[i]!=0)\n\tdp[j]=max(dp[j],dp[j-a[i]-c[i]]+b[i]+d[i]);\n```\n建议去做一下这道题：[P1064](/problem/P1064)\n\n可以去机房群找我传的4.zip，里面有背包问题的递推方案。\n\n\n嘿嘿嘿，应该来看这道题了\n\n其实只是一个变式，递推式变了而已。\n\n考虑三种情况不选，只选主件，和两个都选\n\n建议自己去推递推式。（这里挖了一个坑，如果神奇的错了部分点，可以私聊WXT）。\n\n第三道题：\n\n单调队列水题，不会建议22号找hs挨打。\n\n第四道题：\n\n很容易发现无论怎样操作$A_i$一定是$c$的n次方。所以只用存是$c$的几次方就行了。把一段数乘上$c$,就变成了加上$1$（差分啊）。\n\n取模不要搞错了qwq。\n","source":"_posts/0021.md","raw":"---\ntitle: Solution for the third competition in summer in 2022\ndate: 2022-08-03\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\nA:\n\nhs都~~水~~讲过了还做不来，建议回去反省上课摸了多久的鱼。\n矩阵乘法有结合律所以符合\n\n$A_n==({A_{n/2}})^2(n\\equiv 0\\mod 2)$\n\n\n$A_n==A_{n-1}*A(n\\equiv 1\\mod 2)$\n\n所以直接快速幂，快点写。建议练习用矩阵乘法计算斐波拉契序列。\n\n\nB:(YTC息怒)\n\n背包问题的典型变形。（只不过是增加了附件可以选择）\n\n考虑到有人没看过01背包问题所以这个题解姑且算个入门吧。\n\n\n\n# [NOIP2005 普及组] 采药\n\n## 题目描述\n\n辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”\n\n\n如果你是辰辰，你能完成这个任务吗？\n\n## 输入格式\n\n第一行有 $2$ 个整数 $T$（$1 \\le T \\le 1000$）和 $M$（$1 \\le  M \\le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。\n\n接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。\n\n## 输出格式\n\n输出在规定的时间内可以采到的草药的最大总价值。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n70 3\n71 100\n69 1\n1 2\n```\n\n### 样例输出 #1\n\n```\n3\n```\n\n## 提示\n\n**【数据范围】**\n\n- 对于 $30\\%$ 的数据，$M \\le 10$；\n- 对于全部的数据，$M \\le 100$。\n\n\n设计状态$dp_{ij}$为在考虑前i个药后，背包容量为j的情况。\n\n动态转移方程易得：\n\n不选$i$：$dp_{ij}=dp_{(i-1) j}$\n\n选$i$：$dp_{ij}=dp_{(i-1) (j-(t_{i}))}+cost_i$\n\n选最大即可。\n\n枚举顺序外层枚举物品，内层枚举背包容量（从大到小）\n\n为什么从大到小？？？\n\n因为这样可以避开多次选择，因为你会从背包容量小的进行转移，而这些方向暂时未考虑这个物品，所以不会多次选择。\n\n优化（压缩掉i维）：\n\n直接将第一维去掉就好了。\n\n回到这道题其实就是多了转移方式而已。\n\n```cpp\nif(j-a[i]>=0)\n\tdp[j]=max(dp[j],dp[j-a[i]]+b[i]); \nif(j-a[i]-c[i]>=0&&c[i]!=0)\n\tdp[j]=max(dp[j],dp[j-a[i]-c[i]]+b[i]+d[i]);\n```\n建议去做一下这道题：[P1064](/problem/P1064)\n\n可以去机房群找我传的4.zip，里面有背包问题的递推方案。\n\n\n嘿嘿嘿，应该来看这道题了\n\n其实只是一个变式，递推式变了而已。\n\n考虑三种情况不选，只选主件，和两个都选\n\n建议自己去推递推式。（这里挖了一个坑，如果神奇的错了部分点，可以私聊WXT）。\n\n第三道题：\n\n单调队列水题，不会建议22号找hs挨打。\n\n第四道题：\n\n很容易发现无论怎样操作$A_i$一定是$c$的n次方。所以只用存是$c$的几次方就行了。把一段数乘上$c$,就变成了加上$1$（差分啊）。\n\n取模不要搞错了qwq。\n","slug":"0021","published":1,"updated":"2024-01-08T12:20:25.765Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk40014xday09x120x5","content":"<p>A:</p>\n<p>hs都<del>水</del>讲过了还做不来，建议回去反省上课摸了多久的鱼。<br>矩阵乘法有结合律所以符合</p>\n<p>$A_n==({A_{n/2}})^2(n\\equiv 0\\mod 2)$</p>\n<p>$A_n==A_{n-1}*A(n\\equiv 1\\mod 2)$</p>\n<p>所以直接快速幂，快点写。建议练习用矩阵乘法计算斐波拉契序列。</p>\n<p>B:(YTC息怒)</p>\n<p>背包问题的典型变形。（只不过是增加了附件可以选择）</p>\n<p>考虑到有人没看过01背包问题所以这个题解姑且算个入门吧。</p>\n<h1 id=\"NOIP2005-普及组-采药\"><a href=\"#NOIP2005-普及组-采药\" class=\"headerlink\" title=\"[NOIP2005 普及组] 采药\"></a>[NOIP2005 普及组] 采药</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p>\n<p>如果你是辰辰，你能完成这个任务吗？</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行有 $2$ 个整数 $T$（$1 \\le T \\le 1000$）和 $M$（$1 \\le  M \\le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p>\n<p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出在规定的时间内可以采到的草药的最大总价值。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">70 3\n71 100\n69 1\n1 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p><strong>【数据范围】</strong></p>\n<ul>\n<li>对于 $30\\%$ 的数据，$M \\le 10$；</li>\n<li>对于全部的数据，$M \\le 100$。</li>\n</ul>\n<p>设计状态$dp_{ij}$为在考虑前i个药后，背包容量为j的情况。</p>\n<p>动态转移方程易得：</p>\n<p>不选$i$：$dp_{ij}=dp_{(i-1) j}$</p>\n<p>选$i$：$dp_{ij}=dp_{(i-1) (j-(t_{i}))}+cost_i$</p>\n<p>选最大即可。</p>\n<p>枚举顺序外层枚举物品，内层枚举背包容量（从大到小）</p>\n<p>为什么从大到小？？？</p>\n<p>因为这样可以避开多次选择，因为你会从背包容量小的进行转移，而这些方向暂时未考虑这个物品，所以不会多次选择。</p>\n<p>优化（压缩掉i维）：</p>\n<p>直接将第一维去掉就好了。</p>\n<p>回到这道题其实就是多了转移方式而已。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>建议去做一下这道题：<a href=\"/problem/P1064\">P1064</a></p>\n<p>可以去机房群找我传的4.zip，里面有背包问题的递推方案。</p>\n<p>嘿嘿嘿，应该来看这道题了</p>\n<p>其实只是一个变式，递推式变了而已。</p>\n<p>考虑三种情况不选，只选主件，和两个都选</p>\n<p>建议自己去推递推式。（这里挖了一个坑，如果神奇的错了部分点，可以私聊WXT）。</p>\n<p>第三道题：</p>\n<p>单调队列水题，不会建议22号找hs挨打。</p>\n<p>第四道题：</p>\n<p>很容易发现无论怎样操作$A_i$一定是$c$的n次方。所以只用存是$c$的几次方就行了。把一段数乘上$c$,就变成了加上$1$（差分啊）。</p>\n<p>取模不要搞错了qwq。</p>\n","excerpt":"","more":"<p>A:</p>\n<p>hs都<del>水</del>讲过了还做不来，建议回去反省上课摸了多久的鱼。<br>矩阵乘法有结合律所以符合</p>\n<p>$A_n==({A_{n/2}})^2(n\\equiv 0\\mod 2)$</p>\n<p>$A_n==A_{n-1}*A(n\\equiv 1\\mod 2)$</p>\n<p>所以直接快速幂，快点写。建议练习用矩阵乘法计算斐波拉契序列。</p>\n<p>B:(YTC息怒)</p>\n<p>背包问题的典型变形。（只不过是增加了附件可以选择）</p>\n<p>考虑到有人没看过01背包问题所以这个题解姑且算个入门吧。</p>\n<h1 id=\"NOIP2005-普及组-采药\"><a href=\"#NOIP2005-普及组-采药\" class=\"headerlink\" title=\"[NOIP2005 普及组] 采药\"></a>[NOIP2005 普及组] 采药</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p>\n<p>如果你是辰辰，你能完成这个任务吗？</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行有 $2$ 个整数 $T$（$1 \\le T \\le 1000$）和 $M$（$1 \\le  M \\le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p>\n<p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出在规定的时间内可以采到的草药的最大总价值。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">70 3\n71 100\n69 1\n1 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p><strong>【数据范围】</strong></p>\n<ul>\n<li>对于 $30\\%$ 的数据，$M \\le 10$；</li>\n<li>对于全部的数据，$M \\le 100$。</li>\n</ul>\n<p>设计状态$dp_{ij}$为在考虑前i个药后，背包容量为j的情况。</p>\n<p>动态转移方程易得：</p>\n<p>不选$i$：$dp_{ij}=dp_{(i-1) j}$</p>\n<p>选$i$：$dp_{ij}=dp_{(i-1) (j-(t_{i}))}+cost_i$</p>\n<p>选最大即可。</p>\n<p>枚举顺序外层枚举物品，内层枚举背包容量（从大到小）</p>\n<p>为什么从大到小？？？</p>\n<p>因为这样可以避开多次选择，因为你会从背包容量小的进行转移，而这些方向暂时未考虑这个物品，所以不会多次选择。</p>\n<p>优化（压缩掉i维）：</p>\n<p>直接将第一维去掉就好了。</p>\n<p>回到这道题其实就是多了转移方式而已。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>建议去做一下这道题：<a href=\"/problem/P1064\">P1064</a></p>\n<p>可以去机房群找我传的4.zip，里面有背包问题的递推方案。</p>\n<p>嘿嘿嘿，应该来看这道题了</p>\n<p>其实只是一个变式，递推式变了而已。</p>\n<p>考虑三种情况不选，只选主件，和两个都选</p>\n<p>建议自己去推递推式。（这里挖了一个坑，如果神奇的错了部分点，可以私聊WXT）。</p>\n<p>第三道题：</p>\n<p>单调队列水题，不会建议22号找hs挨打。</p>\n<p>第四道题：</p>\n<p>很容易发现无论怎样操作$A_i$一定是$c$的n次方。所以只用存是$c$的几次方就行了。把一段数乘上$c$,就变成了加上$1$（差分啊）。</p>\n<p>取模不要搞错了qwq。</p>\n"},{"title":"P8446","date":"2022-07-25T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n\n[题目传送门](/problem/P8446)\n\n题意：\n你有一个长度为 $n$ 的序列 $a$，它的一个区间 $[l,r]$ 的价值是 $\\max\\{a_l,a_{l+1},\\cdots,a_r\\}-\\min\\{a_l,a_{l+1},\\cdots,a_r\\}-r+l-1$。求这个序列价值最大的子区间并输出这个价值。\n\n~~为什么又是区间~~\n看到区间的题，有一种非常常用的方法是枚举右端点，确定左端点。这道题也不例外。\n\n举个栗子：求区间最大值，我的做法是记录前面前缀和的最大值，再用当前的前缀和减前面的前缀和更新答案。\n\n代码片段（非本题）：\n```cpp\nans=0;\n_min=0;\nfor(int i=1;i<=n;i++){\n\tnow+=a[i];\n\t_min=min(_min,now);\n\tans=max(ans,now-_min);\n}\n```\n\n这个算法将答案分成两部分，分别是前面的前缀和以及后面的前缀和。\n回到本题，先对式子一顿折腾：$(\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l)-(\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1)$~~没有太折腾~~\n\n再分析一下题，区间的端点应该在最大值和最小值上，因为他要是区间越小越好。\n\n假设说最小值的端点在右边，那么在前面找到$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$的最大值，再减去$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$，为什么是这样的？\n\n因为一旦确定最小值就相当于$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$已经被确定了。那只要让$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$（被减数 ）最大。\n\n最小值的端点在左边怎么办？\n\n翻转一遍就好了。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#define int long long\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nint a[4000005];\nsigned main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tint n=read();\n\tint ans=0;\n\tint mx=-1,re=-1;\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=read();\n\t\tmx=max(mx,a[i]+i);\n\t\tre=max(re,mx-a[i]-i-1);\n\t}\n\treverse(a+1,a+n+1);\n\tmx=-1;\n\tfor(int i=1;i<=n;i++){\n\t\tmx=max(mx,a[i]+i);\n\t\tre=max(re,mx-a[i]-i-1);\n\t}\n\tprintf(\"%lld\",re);\n\treturn 0;\n}\n\n\n\n```\n","source":"_posts/0022.md","raw":"---\ntitle: P8446\ndate: 2022-07-26\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n\n[题目传送门](/problem/P8446)\n\n题意：\n你有一个长度为 $n$ 的序列 $a$，它的一个区间 $[l,r]$ 的价值是 $\\max\\{a_l,a_{l+1},\\cdots,a_r\\}-\\min\\{a_l,a_{l+1},\\cdots,a_r\\}-r+l-1$。求这个序列价值最大的子区间并输出这个价值。\n\n~~为什么又是区间~~\n看到区间的题，有一种非常常用的方法是枚举右端点，确定左端点。这道题也不例外。\n\n举个栗子：求区间最大值，我的做法是记录前面前缀和的最大值，再用当前的前缀和减前面的前缀和更新答案。\n\n代码片段（非本题）：\n```cpp\nans=0;\n_min=0;\nfor(int i=1;i<=n;i++){\n\tnow+=a[i];\n\t_min=min(_min,now);\n\tans=max(ans,now-_min);\n}\n```\n\n这个算法将答案分成两部分，分别是前面的前缀和以及后面的前缀和。\n回到本题，先对式子一顿折腾：$(\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l)-(\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1)$~~没有太折腾~~\n\n再分析一下题，区间的端点应该在最大值和最小值上，因为他要是区间越小越好。\n\n假设说最小值的端点在右边，那么在前面找到$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$的最大值，再减去$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$，为什么是这样的？\n\n因为一旦确定最小值就相当于$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$已经被确定了。那只要让$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$（被减数 ）最大。\n\n最小值的端点在左边怎么办？\n\n翻转一遍就好了。\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#define int long long\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tc=='-'?f=-1:1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nint a[4000005];\nsigned main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tint n=read();\n\tint ans=0;\n\tint mx=-1,re=-1;\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=read();\n\t\tmx=max(mx,a[i]+i);\n\t\tre=max(re,mx-a[i]-i-1);\n\t}\n\treverse(a+1,a+n+1);\n\tmx=-1;\n\tfor(int i=1;i<=n;i++){\n\t\tmx=max(mx,a[i]+i);\n\t\tre=max(re,mx-a[i]-i-1);\n\t}\n\tprintf(\"%lld\",re);\n\treturn 0;\n}\n\n\n\n```\n","slug":"0022","published":1,"updated":"2024-01-08T12:20:19.508Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk50016xday4irm2zsx","content":"<p><a href=\"/problem/P8446\">题目传送门</a></p>\n<p>题意：<br>你有一个长度为 $n$ 的序列 $a$，它的一个区间 $[l,r]$ 的价值是 $\\max\\{a_l,a_{l+1},\\cdots,a_r\\}-\\min\\{a_l,a_{l+1},\\cdots,a_r\\}-r+l-1$。求这个序列价值最大的子区间并输出这个价值。</p>\n<p><del>为什么又是区间</del><br>看到区间的题，有一种非常常用的方法是枚举右端点，确定左端点。这道题也不例外。</p>\n<p>举个栗子：求区间最大值，我的做法是记录前面前缀和的最大值，再用当前的前缀和减前面的前缀和更新答案。</p>\n<p>代码片段（非本题）：<br><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n_min<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tnow<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_min<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>_min<span class=\"token punctuation\">,</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>now<span class=\"token operator\">-</span>_min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>这个算法将答案分成两部分，分别是前面的前缀和以及后面的前缀和。<br>回到本题，先对式子一顿折腾：$(\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l)-(\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1)$<del>没有太折腾</del></p>\n<p>再分析一下题，区间的端点应该在最大值和最小值上，因为他要是区间越小越好。</p>\n<p>假设说最小值的端点在右边，那么在前面找到$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$的最大值，再减去$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$，为什么是这样的？</p>\n<p>因为一旦确定最小值就相当于$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$已经被确定了。那只要让$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$（被减数 ）最大。</p>\n<p>最小值的端点在左边怎么办？</p>\n<p>翻转一遍就好了。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//\tfreopen(\".in\",\"r\",stdin);</span>\n<span class=\"token comment\">//\tfreopen(\".out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> mx<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>re<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tre<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span>mx<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmx<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tmx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tre<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span>mx<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<p><a href=\"/problem/P8446\">题目传送门</a></p>\n<p>题意：<br>你有一个长度为 $n$ 的序列 $a$，它的一个区间 $[l,r]$ 的价值是 $\\max\\{a_l,a_{l+1},\\cdots,a_r\\}-\\min\\{a_l,a_{l+1},\\cdots,a_r\\}-r+l-1$。求这个序列价值最大的子区间并输出这个价值。</p>\n<p><del>为什么又是区间</del><br>看到区间的题，有一种非常常用的方法是枚举右端点，确定左端点。这道题也不例外。</p>\n<p>举个栗子：求区间最大值，我的做法是记录前面前缀和的最大值，再用当前的前缀和减前面的前缀和更新答案。</p>\n<p>代码片段（非本题）：<br><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n_min<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tnow<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_min<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>_min<span class=\"token punctuation\">,</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>now<span class=\"token operator\">-</span>_min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>这个算法将答案分成两部分，分别是前面的前缀和以及后面的前缀和。<br>回到本题，先对式子一顿折腾：$(\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l)-(\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1)$<del>没有太折腾</del></p>\n<p>再分析一下题，区间的端点应该在最大值和最小值上，因为他要是区间越小越好。</p>\n<p>假设说最小值的端点在右边，那么在前面找到$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$的最大值，再减去$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$，为什么是这样的？</p>\n<p>因为一旦确定最小值就相当于$\\min\\{a_l,a_{l+1},\\cdots,a_r\\}+r+1$已经被确定了。那只要让$\\max\\{a_l,a_{l+1},\\cdots,a_r\\}+l$（被减数 ）最大。</p>\n<p>最小值的端点在左边怎么办？</p>\n<p>翻转一遍就好了。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">?</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//\tfreopen(\".in\",\"r\",stdin);</span>\n<span class=\"token comment\">//\tfreopen(\".out\",\"w\",stdout);</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> mx<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>re<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tre<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span>mx<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmx<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tmx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tre<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span>mx<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"P8445","date":"2022-07-25T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n\n[题目传送门](/problem/P8445)\n\n题意：给定序列 $\\{a_n\\},\\{b_n\\}$，求一个序列 $\\{c_n\\}$ 满足 $\\forall i\\in[1,n],c_i\\in\\{a_i,b_i\\}$，最大化\n\n$$\\max\\{r-l+1-\\operatorname{mex}\\{c_l,c_{l+1},\\dots, c_{r-1},c_r\\}\\}(1\\le l\\le r\\le n)$$\n\n并输出该式子可能的最大值。\n\n其中 $\\operatorname{mex}\\{c_l,c_{l+1},\\dots,c_{r-1},c_r\\}$ 指的是 $c_l,c_{l+1},\\dots,c_{r-1},c_r$ 中没有出现过的**最小非负整数**。\n\n\n看到数据范围有一点奇怪$0\n\\leq a_i,b_i\\leq n$\n\n为什么会限制$a,b$取值范围。正解：枚举mex。\n\n其实也不太严谨，如果去掉最小的条件从0~n枚举作为没有出现的那个数，会出现问题吗？\n\n没有。因为在最终的序列中是要剪掉$mex$的。所以$mex$是不是最小的没必要考虑，因为更小的$mex$是被考虑了的。\n\n问题变为：确定一个区间使得区间的数都不等于m(0$\\leq$m$\\leq$n)，区间要尽可能大。\n\n如果所有$a_i$!=$b_i$，那么总有方案是的能选出c序列使得其中每一个数不等于任意一个数，因为假如$mex=1$，考虑第$i$个位置，如果$a_i=mex$，那$b_i$一定不等于$mex$。总会找到一个数满足情况。\n\n加上 $a_i=b_i$ 的情况，那如果 $a_i=b_i!=mex$ 并无大碍。\n如果 $a_i=b_i=mex$那就必须从i中间断开成为两个序列，分别考虑对答案的贡献。\n\n用vector来存$a_i=b_i=mex$的所有下标\n\n```cpp\n//g++  7.4.0\n\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#define int long long\nusing namespace std;\nint a[1000005];\nvector<int>to[1000005];\ninline int read()\n{\n\tint x=0;\n\tbool flag=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tflag=0;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn (flag?x:~(x-1));\n}\nsigned main()\n{\n    int n;\n    n=read();\n    int ans=0;\n    to[0].push_back(0); \n    for(int i=1;i<=n;i++){\n    \ta[i]=read();\n    \tto[i].push_back(0);\n\t}\n//\tint t=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint temp;\n\t\ttemp=read();\n\t\tif(a[i]==temp){\n\t\t\tto[a[i]].push_back(i);\n\t\t}\n\t}\n\tfor(int i=0;i<=n;i++){\n\t\tto[i].push_back(n+1);\n\t}\n\tfor(int i=0;i<=n;i++){\n\t\tfor(int j=1;j<to[i].size();j++){\n\t\t\tans=max(ans,to[i][j]-1-to[i][j-1]-i);\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n    return 0;\n}\n```\n\n\n","source":"_posts/0023.md","raw":"---\ntitle: P8445\ndate: 2022-07-26\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n\n[题目传送门](/problem/P8445)\n\n题意：给定序列 $\\{a_n\\},\\{b_n\\}$，求一个序列 $\\{c_n\\}$ 满足 $\\forall i\\in[1,n],c_i\\in\\{a_i,b_i\\}$，最大化\n\n$$\\max\\{r-l+1-\\operatorname{mex}\\{c_l,c_{l+1},\\dots, c_{r-1},c_r\\}\\}(1\\le l\\le r\\le n)$$\n\n并输出该式子可能的最大值。\n\n其中 $\\operatorname{mex}\\{c_l,c_{l+1},\\dots,c_{r-1},c_r\\}$ 指的是 $c_l,c_{l+1},\\dots,c_{r-1},c_r$ 中没有出现过的**最小非负整数**。\n\n\n看到数据范围有一点奇怪$0\n\\leq a_i,b_i\\leq n$\n\n为什么会限制$a,b$取值范围。正解：枚举mex。\n\n其实也不太严谨，如果去掉最小的条件从0~n枚举作为没有出现的那个数，会出现问题吗？\n\n没有。因为在最终的序列中是要剪掉$mex$的。所以$mex$是不是最小的没必要考虑，因为更小的$mex$是被考虑了的。\n\n问题变为：确定一个区间使得区间的数都不等于m(0$\\leq$m$\\leq$n)，区间要尽可能大。\n\n如果所有$a_i$!=$b_i$，那么总有方案是的能选出c序列使得其中每一个数不等于任意一个数，因为假如$mex=1$，考虑第$i$个位置，如果$a_i=mex$，那$b_i$一定不等于$mex$。总会找到一个数满足情况。\n\n加上 $a_i=b_i$ 的情况，那如果 $a_i=b_i!=mex$ 并无大碍。\n如果 $a_i=b_i=mex$那就必须从i中间断开成为两个序列，分别考虑对答案的贡献。\n\n用vector来存$a_i=b_i=mex$的所有下标\n\n```cpp\n//g++  7.4.0\n\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#define int long long\nusing namespace std;\nint a[1000005];\nvector<int>to[1000005];\ninline int read()\n{\n\tint x=0;\n\tbool flag=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tflag=0;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn (flag?x:~(x-1));\n}\nsigned main()\n{\n    int n;\n    n=read();\n    int ans=0;\n    to[0].push_back(0); \n    for(int i=1;i<=n;i++){\n    \ta[i]=read();\n    \tto[i].push_back(0);\n\t}\n//\tint t=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint temp;\n\t\ttemp=read();\n\t\tif(a[i]==temp){\n\t\t\tto[a[i]].push_back(i);\n\t\t}\n\t}\n\tfor(int i=0;i<=n;i++){\n\t\tto[i].push_back(n+1);\n\t}\n\tfor(int i=0;i<=n;i++){\n\t\tfor(int j=1;j<to[i].size();j++){\n\t\t\tans=max(ans,to[i][j]-1-to[i][j-1]-i);\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n    return 0;\n}\n```\n\n\n","slug":"0023","published":1,"updated":"2024-01-08T12:07:34.689Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk60019xdaybga88b3g","content":"<p><a href=\"/problem/P8445\">题目传送门</a></p>\n<p>题意：给定序列 $\\{a_n\\},\\{b_n\\}$，求一个序列 $\\{c_n\\}$ 满足 $\\forall i\\in[1,n],c_i\\in\\{a_i,b_i\\}$，最大化</p>\n<script type=\"math/tex; mode=display\">\\max\\{r-l+1-\\operatorname{mex}\\{c_l,c_{l+1},\\dots, c_{r-1},c_r\\}\\}(1\\le l\\le r\\le n)</script><p>并输出该式子可能的最大值。</p>\n<p>其中 $\\operatorname{mex}\\{c_l,c_{l+1},\\dots,c_{r-1},c_r\\}$ 指的是 $c_l,c_{l+1},\\dots,c_{r-1},c_r$ 中没有出现过的<strong>最小非负整数</strong>。</p>\n<p>看到数据范围有一点奇怪$0<br>\\leq a_i,b_i\\leq n$</p>\n<p>为什么会限制$a,b$取值范围。正解：枚举mex。</p>\n<p>其实也不太严谨，如果去掉最小的条件从0~n枚举作为没有出现的那个数，会出现问题吗？</p>\n<p>没有。因为在最终的序列中是要剪掉$mex$的。所以$mex$是不是最小的没必要考虑，因为更小的$mex$是被考虑了的。</p>\n<p>问题变为：确定一个区间使得区间的数都不等于m(0$\\leq$m$\\leq$n)，区间要尽可能大。</p>\n<p>如果所有$a_i$!=$b_i$，那么总有方案是的能选出c序列使得其中每一个数不等于任意一个数，因为假如$mex=1$，考虑第$i$个位置，如果$a_i=mex$，那$b_i$一定不等于$mex$。总会找到一个数满足情况。</p>\n<p>加上 $a_i=b_i$ 的情况，那如果 $a_i=b_i!=mex$ 并无大碍。<br>如果 $a_i=b_i=mex$那就必须从i中间断开成为两个序列，分别考虑对答案的贡献。</p>\n<p>用vector来存$a_i=b_i=mex$的所有下标</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//g++  7.4.0</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>to<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>c<span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    to<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//\tint t=0;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tto<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<p><a href=\"/problem/P8445\">题目传送门</a></p>\n<p>题意：给定序列 $\\{a_n\\},\\{b_n\\}$，求一个序列 $\\{c_n\\}$ 满足 $\\forall i\\in[1,n],c_i\\in\\{a_i,b_i\\}$，最大化</p>\n<script type=\"math/tex; mode=display\">\\max\\{r-l+1-\\operatorname{mex}\\{c_l,c_{l+1},\\dots, c_{r-1},c_r\\}\\}(1\\le l\\le r\\le n)</script><p>并输出该式子可能的最大值。</p>\n<p>其中 $\\operatorname{mex}\\{c_l,c_{l+1},\\dots,c_{r-1},c_r\\}$ 指的是 $c_l,c_{l+1},\\dots,c_{r-1},c_r$ 中没有出现过的<strong>最小非负整数</strong>。</p>\n<p>看到数据范围有一点奇怪$0<br>\\leq a_i,b_i\\leq n$</p>\n<p>为什么会限制$a,b$取值范围。正解：枚举mex。</p>\n<p>其实也不太严谨，如果去掉最小的条件从0~n枚举作为没有出现的那个数，会出现问题吗？</p>\n<p>没有。因为在最终的序列中是要剪掉$mex$的。所以$mex$是不是最小的没必要考虑，因为更小的$mex$是被考虑了的。</p>\n<p>问题变为：确定一个区间使得区间的数都不等于m(0$\\leq$m$\\leq$n)，区间要尽可能大。</p>\n<p>如果所有$a_i$!=$b_i$，那么总有方案是的能选出c序列使得其中每一个数不等于任意一个数，因为假如$mex=1$，考虑第$i$个位置，如果$a_i=mex$，那$b_i$一定不等于$mex$。总会找到一个数满足情况。</p>\n<p>加上 $a_i=b_i$ 的情况，那如果 $a_i=b_i!=mex$ 并无大碍。<br>如果 $a_i=b_i=mex$那就必须从i中间断开成为两个序列，分别考虑对答案的贡献。</p>\n<p>用vector来存$a_i=b_i=mex$的所有下标</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//g++  7.4.0</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>to<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>c<span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    to<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//\tint t=0;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tto<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"P8444","date":"2022-07-25T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n\n[题目传送门](/problem/P8444)\n\n题目意思：你有 $w$ 元，你只能从 $n$ 个商品选一个买买得起的，但是你可以用你有的商品换取 $n$ 个其他商品，换取的商品价值总和不能大于原来的。每个商品只有一个。\n\n看了一眼数据范围：$1 \\leq n\\leq10^6$。\n确定贪心。\n首先买的商品价值越大越好，因为换取的商品的价值总和可以小于原来的商品。那就先贪心选择价值最大的可以选的商品。\n\n商品在经过多次转换后不仅会使价值更分散（不能将多个商品合在一起兑换），也不会徒增商品价值，所以就一次到位。\n\n怎么选才能最优，贪心啊。\n\n从最小的开始选，再选第二小的，选不了了就输出答案。\n\n记得边界条件。\n\n```cpp\n//g++  7.4.0\n\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\ninline int read()\n{\n\tint x=0;\n\tbool flag=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tflag=0;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn (flag?x:~(x-1));\n}\nusing namespace std;\nint a[100005];\nint main()\n{\n    int n=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n    }\n    int w;\n    w=read();\n    sort(a+1,a+n+1);\n    if(n==0||a[1]>w){\n        printf(\"0\");\n        return 0;\n    }\n    int temp=upper_bound(a+1,a+n+1,w)-a-1;//在选择的时候，已经进行排序，所以直接二分查找能买到的价值最高的商品。\n    int more=a[temp];\n    for(int i=1;i<temp;i++){\n        more-=a[i];\n        if(more<0){\n            printf(\"%d\",max(i-1,1));\n            return 0;\n        }\n    }\n    printf(\"%d\",max(1,temp-1));\n    return 0;\n}\n```\n\n","source":"_posts/0024.md","raw":"---\ntitle: P8444\ndate: 2022-07-26\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n\n[题目传送门](/problem/P8444)\n\n题目意思：你有 $w$ 元，你只能从 $n$ 个商品选一个买买得起的，但是你可以用你有的商品换取 $n$ 个其他商品，换取的商品价值总和不能大于原来的。每个商品只有一个。\n\n看了一眼数据范围：$1 \\leq n\\leq10^6$。\n确定贪心。\n首先买的商品价值越大越好，因为换取的商品的价值总和可以小于原来的商品。那就先贪心选择价值最大的可以选的商品。\n\n商品在经过多次转换后不仅会使价值更分散（不能将多个商品合在一起兑换），也不会徒增商品价值，所以就一次到位。\n\n怎么选才能最优，贪心啊。\n\n从最小的开始选，再选第二小的，选不了了就输出答案。\n\n记得边界条件。\n\n```cpp\n//g++  7.4.0\n\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\ninline int read()\n{\n\tint x=0;\n\tbool flag=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tflag=0;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn (flag?x:~(x-1));\n}\nusing namespace std;\nint a[100005];\nint main()\n{\n    int n=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n    }\n    int w;\n    w=read();\n    sort(a+1,a+n+1);\n    if(n==0||a[1]>w){\n        printf(\"0\");\n        return 0;\n    }\n    int temp=upper_bound(a+1,a+n+1,w)-a-1;//在选择的时候，已经进行排序，所以直接二分查找能买到的价值最高的商品。\n    int more=a[temp];\n    for(int i=1;i<temp;i++){\n        more-=a[i];\n        if(more<0){\n            printf(\"%d\",max(i-1,1));\n            return 0;\n        }\n    }\n    printf(\"%d\",max(1,temp-1));\n    return 0;\n}\n```\n\n","slug":"0024","published":1,"updated":"2024-01-08T12:08:35.975Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk7001bxdayfico9pvd","content":"<p><a href=\"/problem/P8444\">题目传送门</a></p>\n<p>题目意思：你有 $w$ 元，你只能从 $n$ 个商品选一个买买得起的，但是你可以用你有的商品换取 $n$ 个其他商品，换取的商品价值总和不能大于原来的。每个商品只有一个。</p>\n<p>看了一眼数据范围：$1 \\leq n\\leq10^6$。<br>确定贪心。<br>首先买的商品价值越大越好，因为换取的商品的价值总和可以小于原来的商品。那就先贪心选择价值最大的可以选的商品。</p>\n<p>商品在经过多次转换后不仅会使价值更分散（不能将多个商品合在一起兑换），也不会徒增商品价值，所以就一次到位。</p>\n<p>怎么选才能最优，贪心啊。</p>\n<p>从最小的开始选，再选第二小的，选不了了就输出答案。</p>\n<p>记得边界条件。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//g++  7.4.0</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>c<span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n    w<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在选择的时候，已经进行排序，所以直接二分查找能买到的价值最高的商品。</span>\n    <span class=\"token keyword\">int</span> more<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>temp<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        more<span class=\"token operator\">-=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>more<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>temp<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<p><a href=\"/problem/P8444\">题目传送门</a></p>\n<p>题目意思：你有 $w$ 元，你只能从 $n$ 个商品选一个买买得起的，但是你可以用你有的商品换取 $n$ 个其他商品，换取的商品价值总和不能大于原来的。每个商品只有一个。</p>\n<p>看了一眼数据范围：$1 \\leq n\\leq10^6$。<br>确定贪心。<br>首先买的商品价值越大越好，因为换取的商品的价值总和可以小于原来的商品。那就先贪心选择价值最大的可以选的商品。</p>\n<p>商品在经过多次转换后不仅会使价值更分散（不能将多个商品合在一起兑换），也不会徒增商品价值，所以就一次到位。</p>\n<p>怎么选才能最优，贪心啊。</p>\n<p>从最小的开始选，再选第二小的，选不了了就输出答案。</p>\n<p>记得边界条件。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//g++  7.4.0</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span><span class=\"token operator\">||</span>c<span class=\"token operator\">></span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">>=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>c<span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n    w<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在选择的时候，已经进行排序，所以直接二分查找能买到的价值最高的商品。</span>\n    <span class=\"token keyword\">int</span> more<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>temp<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        more<span class=\"token operator\">-=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>more<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>temp<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"P8443","date":"2022-07-25T16:00:00.000Z","toc":true,"mathjax":true,"_content":"\n[题目传送门](https://www.luogu.com.cn/problem/P8443)\n\n**题意**：提供 $l$, $r$, $x$，求出$\\gcd(\\lfloor \\frac{l}{x}\\rfloor,\\lfloor \\frac{l+1}{x}\\rfloor,\\cdots,\\lfloor \\frac{r}{x}\\rfloor)$\n\n汉语翻译：对于每个$x$ ($l$ $\\leq$ $x$ $\\leq$ $r)$ ,求出$y=\\lfloor \\frac{l}{x}\\rfloor$ ,最后求出所有$y$的最大公因数。\n\n观察样例：\n- 对于第一组数据，$l=3,r=6,x=1$，即求 $\\gcd(\\lfloor \\frac{3}{1}\\rfloor,\\lfloor \\frac{4}{1} \\rfloor, \\lfloor \\frac{5}{1}\\rfloor,\\lfloor \\frac{6}{1}\\rfloor)=1$。\n\n- 对于第二组数据，$l=8,r=11,x=4$，即求 $\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$。\n\n- 对于第三组数据，$l=4,r=4,x=3$，即求 $\\gcd(\\lfloor \\frac{4}{3}\\rfloor)=1$。\n\n感觉出现了很多$1$。\n\n通过观察$gcd$内部的数，发现是非严格单调递增，每次多$1$。\n\n想一想$\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor$一定满足$0<=\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor<=1$\n\n又因为$gcd(n,n+1)=1$\n\n所以**大部分情况**应该是1。\n\n\n为什么样例输出的有非1情况？\n\n再看$\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$\n\n$gcd$内的数全都一样。\n\n**还有一个小问题：**怎么判断$gcd$内的数是不是一样的?\n\n还记得前面说的$gcd$内的数单调递增。\n\n只用判断第一个数和最后一个数相不相同。\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint main(){\n    long long T;\n    scanf(\"%lld\",&T);\n    while(T--){\n        long long l,r,x;\n        scanf(\"%lld%lld%lld\",&l,&r,&x);\n        if(l/x==r/x){\n            printf(\"%lld\\n\",l/x);\n        }else{\n            printf(\"1\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n完结撒花~~~\n","source":"_posts/0025.md","raw":"---\ntitle: P8443\ndate: 2022-07-26\ntags: [OI]\ntoc: true\nmathjax: true\n---\n\n[题目传送门](https://www.luogu.com.cn/problem/P8443)\n\n**题意**：提供 $l$, $r$, $x$，求出$\\gcd(\\lfloor \\frac{l}{x}\\rfloor,\\lfloor \\frac{l+1}{x}\\rfloor,\\cdots,\\lfloor \\frac{r}{x}\\rfloor)$\n\n汉语翻译：对于每个$x$ ($l$ $\\leq$ $x$ $\\leq$ $r)$ ,求出$y=\\lfloor \\frac{l}{x}\\rfloor$ ,最后求出所有$y$的最大公因数。\n\n观察样例：\n- 对于第一组数据，$l=3,r=6,x=1$，即求 $\\gcd(\\lfloor \\frac{3}{1}\\rfloor,\\lfloor \\frac{4}{1} \\rfloor, \\lfloor \\frac{5}{1}\\rfloor,\\lfloor \\frac{6}{1}\\rfloor)=1$。\n\n- 对于第二组数据，$l=8,r=11,x=4$，即求 $\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$。\n\n- 对于第三组数据，$l=4,r=4,x=3$，即求 $\\gcd(\\lfloor \\frac{4}{3}\\rfloor)=1$。\n\n感觉出现了很多$1$。\n\n通过观察$gcd$内部的数，发现是非严格单调递增，每次多$1$。\n\n想一想$\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor$一定满足$0<=\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor<=1$\n\n又因为$gcd(n,n+1)=1$\n\n所以**大部分情况**应该是1。\n\n\n为什么样例输出的有非1情况？\n\n再看$\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$\n\n$gcd$内的数全都一样。\n\n**还有一个小问题：**怎么判断$gcd$内的数是不是一样的?\n\n还记得前面说的$gcd$内的数单调递增。\n\n只用判断第一个数和最后一个数相不相同。\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint main(){\n    long long T;\n    scanf(\"%lld\",&T);\n    while(T--){\n        long long l,r,x;\n        scanf(\"%lld%lld%lld\",&l,&r,&x);\n        if(l/x==r/x){\n            printf(\"%lld\\n\",l/x);\n        }else{\n            printf(\"1\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n完结撒花~~~\n","slug":"0025","published":1,"updated":"2024-01-08T12:09:20.793Z","comments":1,"layout":"post","photos":[],"_id":"clr62ttk8001exdayc4l1gsue","content":"<p><a href=\"https://www.luogu.com.cn/problem/P8443\">题目传送门</a></p>\n<p><strong>题意</strong>：提供 $l$, $r$, $x$，求出$\\gcd(\\lfloor \\frac{l}{x}\\rfloor,\\lfloor \\frac{l+1}{x}\\rfloor,\\cdots,\\lfloor \\frac{r}{x}\\rfloor)$</p>\n<p>汉语翻译：对于每个$x$ ($l$ $\\leq$ $x$ $\\leq$ $r)$ ,求出$y=\\lfloor \\frac{l}{x}\\rfloor$ ,最后求出所有$y$的最大公因数。</p>\n<p>观察样例：</p>\n<ul>\n<li><p>对于第一组数据，$l=3,r=6,x=1$，即求 $\\gcd(\\lfloor \\frac{3}{1}\\rfloor,\\lfloor \\frac{4}{1} \\rfloor, \\lfloor \\frac{5}{1}\\rfloor,\\lfloor \\frac{6}{1}\\rfloor)=1$。</p>\n</li>\n<li><p>对于第二组数据，$l=8,r=11,x=4$，即求 $\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$。</p>\n</li>\n<li><p>对于第三组数据，$l=4,r=4,x=3$，即求 $\\gcd(\\lfloor \\frac{4}{3}\\rfloor)=1$。</p>\n</li>\n</ul>\n<p>感觉出现了很多$1$。</p>\n<p>通过观察$gcd$内部的数，发现是非严格单调递增，每次多$1$。</p>\n<p>想一想$\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor$一定满足$0&lt;=\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor&lt;=1$</p>\n<p>又因为$gcd(n,n+1)=1$</p>\n<p>所以<strong>大部分情况</strong>应该是1。</p>\n<p>为什么样例输出的有非1情况？</p>\n<p>再看$\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$</p>\n<p>$gcd$内的数全都一样。</p>\n<p><strong>还有一个小问题：</strong>怎么判断$gcd$内的数是不是一样的?</p>\n<p>还记得前面说的$gcd$内的数单调递增。</p>\n<p>只用判断第一个数和最后一个数相不相同。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">/</span>x<span class=\"token operator\">==</span>r<span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完结撒花~~~</p>\n","excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P8443\">题目传送门</a></p>\n<p><strong>题意</strong>：提供 $l$, $r$, $x$，求出$\\gcd(\\lfloor \\frac{l}{x}\\rfloor,\\lfloor \\frac{l+1}{x}\\rfloor,\\cdots,\\lfloor \\frac{r}{x}\\rfloor)$</p>\n<p>汉语翻译：对于每个$x$ ($l$ $\\leq$ $x$ $\\leq$ $r)$ ,求出$y=\\lfloor \\frac{l}{x}\\rfloor$ ,最后求出所有$y$的最大公因数。</p>\n<p>观察样例：</p>\n<ul>\n<li><p>对于第一组数据，$l=3,r=6,x=1$，即求 $\\gcd(\\lfloor \\frac{3}{1}\\rfloor,\\lfloor \\frac{4}{1} \\rfloor, \\lfloor \\frac{5}{1}\\rfloor,\\lfloor \\frac{6}{1}\\rfloor)=1$。</p>\n</li>\n<li><p>对于第二组数据，$l=8,r=11,x=4$，即求 $\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$。</p>\n</li>\n<li><p>对于第三组数据，$l=4,r=4,x=3$，即求 $\\gcd(\\lfloor \\frac{4}{3}\\rfloor)=1$。</p>\n</li>\n</ul>\n<p>感觉出现了很多$1$。</p>\n<p>通过观察$gcd$内部的数，发现是非严格单调递增，每次多$1$。</p>\n<p>想一想$\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor$一定满足$0&lt;=\\lfloor \\frac{l+1}{x}\\rfloor$-$\\lfloor \\frac{l}{x}\\rfloor&lt;=1$</p>\n<p>又因为$gcd(n,n+1)=1$</p>\n<p>所以<strong>大部分情况</strong>应该是1。</p>\n<p>为什么样例输出的有非1情况？</p>\n<p>再看$\\gcd(\\lfloor \\frac{8}{4} \\rfloor,\\lfloor \\frac{9}{4} \\rfloor,\\lfloor \\frac{10}{4}\\rfloor,\\lfloor \\frac{11}{4}\\rfloor)=\\gcd(2,2,2,2)=2$</p>\n<p>$gcd$内的数全都一样。</p>\n<p><strong>还有一个小问题：</strong>怎么判断$gcd$内的数是不是一样的?</p>\n<p>还记得前面说的$gcd$内的数单调递增。</p>\n<p>只用判断第一个数和最后一个数相不相同。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">/</span>x<span class=\"token operator\">==</span>r<span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完结撒花~~~</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clr62ttjj000axday90y8gnn2","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttjm000dxday6u8ph5sl"},{"post_id":"clr62ttiz0000xday7c9hcesr","tag_id":"clr62ttj80002xday7dhue9hf","_id":"clr62ttjp000fxdayhtqm8kqx"},{"post_id":"clr62ttiz0000xday7c9hcesr","tag_id":"clr62ttje0006xdayh5mv1ebj","_id":"clr62ttjr000ixdaydlfg3iks"},{"post_id":"clr62ttiz0000xday7c9hcesr","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttjs000kxday9u680swj"},{"post_id":"clr62ttjq000gxday56pc4glh","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttjt000mxday83fn7xd9"},{"post_id":"clr62ttjs000jxdayacyw95wg","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttjv000pxdaydnzog5n7"},{"post_id":"clr62ttj50001xdaygq6mb52g","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttjy000txdaya5o64wzu"},{"post_id":"clr62ttj50001xdaygq6mb52g","tag_id":"clr62ttjr000hxday6hzy4aed","_id":"clr62ttjz000vxday8xxj41ym"},{"post_id":"clr62ttj50001xdaygq6mb52g","tag_id":"clr62ttju000nxday7dt08l52","_id":"clr62ttk0000yxdayddfne8fs"},{"post_id":"clr62ttjz000wxdayh72kewke","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk10010xday8b3sfdyx"},{"post_id":"clr62ttk1000zxday9pync6l1","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk30013xdaybrcl7nsy"},{"post_id":"clr62ttja0003xdaybz9746ng","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk40015xdaygmvwdguw"},{"post_id":"clr62ttja0003xdaybz9746ng","tag_id":"clr62ttk0000xxdaygjokfp55","_id":"clr62ttk60018xday3aj3co3w"},{"post_id":"clr62ttk40014xday09x120x5","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk6001axdayb619eih5"},{"post_id":"clr62ttjc0004xday0669905s","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk7001dxday2n7k56d8"},{"post_id":"clr62ttk50016xday4irm2zsx","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk8001fxday0zl35ciy"},{"post_id":"clr62ttk60019xdaybga88b3g","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk9001hxday98tabw90"},{"post_id":"clr62ttk7001bxdayfico9pvd","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttk9001ixdayexvbg5ob"},{"post_id":"clr62ttk8001exdayc4l1gsue","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttka001kxday9tdudr0a"},{"post_id":"clr62ttjd0005xdayfigo4j13","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttka001lxday6k4b8uma"},{"post_id":"clr62ttjd0005xdayfigo4j13","tag_id":"clr62ttk7001cxdayajxz7lve","_id":"clr62ttka001nxdaygw6z6e36"},{"post_id":"clr62ttjf0007xdaya3yc4xco","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkb001pxday3ikx22ej"},{"post_id":"clr62ttjf0007xdaya3yc4xco","tag_id":"clr62ttk9001jxday5y7a4dd8","_id":"clr62ttkb001qxdayefvj1q5u"},{"post_id":"clr62ttjf0007xdaya3yc4xco","tag_id":"clr62ttka001mxdayf8hg43eq","_id":"clr62ttkc001sxdayhb930x5t"},{"post_id":"clr62ttjg0008xday6mqgf9eq","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkc001uxday6bu7bseh"},{"post_id":"clr62ttjg0008xday6mqgf9eq","tag_id":"clr62ttkb001rxday5xhoghtw","_id":"clr62ttkc001vxday2l86hc6f"},{"post_id":"clr62ttjk000bxdaya1hd9e4n","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkd001yxday6yen2mi5"},{"post_id":"clr62ttjk000bxdaya1hd9e4n","tag_id":"clr62ttkc001txdayaliq6qo4","_id":"clr62ttkd001zxday93i5awzx"},{"post_id":"clr62ttjk000bxdaya1hd9e4n","tag_id":"clr62ttkc001wxdayc6uq9yqd","_id":"clr62ttke0021xdaycfxrcooz"},{"post_id":"clr62ttjn000exday7oe9c9ph","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttke0022xday7wam8feh"},{"post_id":"clr62ttjn000exday7oe9c9ph","tag_id":"clr62ttkb001rxday5xhoghtw","_id":"clr62ttke0024xdayfe7hdpc0"},{"post_id":"clr62ttjt000lxdayd116cv5v","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttke0025xday0tji0p8v"},{"post_id":"clr62ttjt000lxdayd116cv5v","tag_id":"clr62ttkd0020xday81efgrb4","_id":"clr62ttkf0027xday10oc30sm"},{"post_id":"clr62ttju000oxdaybsx588ph","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkf0028xdayhepp3w1a"},{"post_id":"clr62ttju000oxdaybsx588ph","tag_id":"clr62ttkd0020xday81efgrb4","_id":"clr62ttkf002axdaycbv10bzx"},{"post_id":"clr62ttjv000qxday2kaddczx","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkg002bxday93z44iqm"},{"post_id":"clr62ttjv000qxday2kaddczx","tag_id":"clr62ttkd0020xday81efgrb4","_id":"clr62ttkg002dxdaybvoufy9o"},{"post_id":"clr62ttjx000rxday9gjia1jg","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkg002exday2e05c348"},{"post_id":"clr62ttjx000rxday9gjia1jg","tag_id":"clr62ttkd0020xday81efgrb4","_id":"clr62ttkh002gxdayb2km6h8c"},{"post_id":"clr62ttjy000uxday4w50cnre","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkh002hxday22dgg2tb"},{"post_id":"clr62ttjy000uxday4w50cnre","tag_id":"clr62ttkd0020xday81efgrb4","_id":"clr62ttkh002ixdaychzo88u2"},{"post_id":"clr62ttk20011xdaycisw65xb","tag_id":"clr62ttji0009xday3ret3dtt","_id":"clr62ttkh002jxday1d58fyrx"},{"post_id":"clr62ttk20011xdaycisw65xb","tag_id":"clr62ttk9001jxday5y7a4dd8","_id":"clr62ttkh002kxday0naz04xx"}],"Tag":[{"name":"数据结构","_id":"clr62ttj80002xday7dhue9hf"},{"name":"并查集","_id":"clr62ttje0006xdayh5mv1ebj"},{"name":"OI","_id":"clr62ttji0009xday3ret3dtt"},{"name":"树形结构","_id":"clr62ttjr000hxday6hzy4aed"},{"name":"分治","_id":"clr62ttju000nxday7dt08l52"},{"name":"多项式","_id":"clr62ttk0000xxdaygjokfp55"},{"name":"NOI_Linux","_id":"clr62ttk7001cxdayajxz7lve"},{"name":"DP","_id":"clr62ttk9001jxday5y7a4dd8"},{"name":"斜率优化","_id":"clr62ttka001mxdayf8hg43eq"},{"name":"网络流","_id":"clr62ttkb001rxday5xhoghtw"},{"name":"Nvim","_id":"clr62ttkc001txdayaliq6qo4"},{"name":"IDE","_id":"clr62ttkc001wxdayc6uq9yqd"},{"name":"CSP","_id":"clr62ttkd0020xday81efgrb4"}]}}