import{_ as n,o as i,c as e,R as t}from"./chunks/framework.EUU6lLMq.js";const k=JSON.parse('{"title":"Sự khác biệt với Magisk","description":"","frontmatter":{},"headers":[],"relativePath":"vi_VN/guide/difference-with-magisk.md","filePath":"vi_VN/guide/difference-with-magisk.md"}'),c={name:"vi_VN/guide/difference-with-magisk.md"},h=t('<h1 id="su-khac-biet-voi-magisk" tabindex="-1">Sự khác biệt với Magisk <a class="header-anchor" href="#su-khac-biet-voi-magisk" aria-label="Permalink to &quot;Sự khác biệt với Magisk&quot;">​</a></h1><p>Mặc dù có nhiều điểm tương đồng giữa mô-đun KernelSU và mô-đun Magisk nhưng chắc chắn vẫn có một số khác biệt do cơ chế triển khai hoàn toàn khác nhau của chúng. Nếu muốn mô-đun của mình chạy trên cả Magisk và KernelSU, bạn phải hiểu những khác biệt này.</p><h2 id="điem-tuong-đong" tabindex="-1">Điểm tương đồng <a class="header-anchor" href="#điem-tuong-đong" aria-label="Permalink to &quot;Điểm tương đồng&quot;">​</a></h2><ul><li>Định dạng file mô-đun: đều sử dụng định dạng zip để sắp xếp các mô-đun và định dạng của các mô-đun gần như giống nhau</li><li>Thư mục cài đặt mô-đun: cả hai đều nằm trong <code>/data/adb/modules</code></li><li>systemless: cả hai đều hỗ trợ sửa đổi /system theo cách không có hệ thống thông qua các mô-đun</li><li>post-fs-data.sh: thời gian thực hiện và ngữ nghĩa hoàn toàn giống nhau</li><li>service.sh: thời gian thực hiện và ngữ nghĩa hoàn toàn giống nhau</li><li>system.prop: hoàn toàn giống nhau</li><li>sepolicy.rule: hoàn toàn giống nhau</li><li>BusyBox: các tập lệnh được chạy trong BusyBox với &quot;standalone mode&quot; được bật trong cả hai trường hợp</li></ul><h2 id="điem-khac-biet" tabindex="-1">Điểm khác biệt <a class="header-anchor" href="#điem-khac-biet" aria-label="Permalink to &quot;Điểm khác biệt&quot;">​</a></h2><p>Trước khi hiểu sự khác biệt, bạn cần biết cách phân biệt mô-đun của bạn đang chạy trong KernelSU hay Magisk. Bạn có thể sử dụng biến môi trường <code>KSU</code> để phân biệt nó ở tất cả những nơi bạn có thể chạy tập lệnh mô-đun (<code>customize.sh</code>, <code>post-fs-data.sh</code>, <code>service.sh</code>). Trong KernelSU, biến môi trường này sẽ được đặt thành <code>true</code>.</p><p>Dưới đây là một số khác biệt:</p><ul><li>Không thể cài đặt các mô-đun KernelSU ở chế độ Recovery.</li><li>Các mô-đun KernelSU không có hỗ trợ tích hợp cho Zygisk (nhưng bạn có thể sử dụng các mô-đun Zygisk thông qua <a href="https://github.com/Dr-TSNG/ZygiskNext" target="_blank" rel="noreferrer">ZygiskNext</a>.</li><li>Phương pháp thay thế hoặc xóa file trong module KernelSU hoàn toàn khác với Magisk. KernelSU không hỗ trợ phương thức <code>.replace</code>. Thay vào đó, bạn cần tạo một file cùng tên với <code>mknod filename c 0 0</code> để xóa file tương ứng.</li><li>Các thư mục của BusyBox khác nhau. BusyBox tích hợp trong KernelSU nằm ở <code>/data/adb/ksu/bin/busybox</code>, trong khi ở Magisk nó nằm ở <code>/data/adb/magisk/busybox</code>. <strong>Lưu ý rằng đây là hoạt động nội bộ của KernelSU và có thể thay đổi trong tương lai!</strong></li><li>KernelSU không hỗ trợ file <code>.replace</code>; tuy nhiên, KernelSU hỗ trợ biến <code>REMOVE</code> và <code>REPLACE</code> để xóa hoặc thay thế các tệp và thư mục.</li><li>KernelSU thêm giai đoạn <code>boot-completed</code> để chạy một số script khi khởi động xong.</li><li>KernelSU thêm giai đoạn <code>post-mount</code> để chạy một số tập lệnh sau khi gắn overlayfs</li></ul>',8),a=[h];function o(g,s,l,r,d,u){return i(),e("div",null,a)}const b=n(c,[["render",o]]);export{k as __pageData,b as default};
